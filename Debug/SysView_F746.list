
SysView_F746.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071b0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08007380  08007380  00017380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074f8  080074f8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080074f8  080074f8  000174f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007500  08007500  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007500  08007500  00017500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007504  08007504  00017504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00035648  20000010  08007518  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20035658  08007518  00025658  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b88c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003741  00000000  00000000  0003b8cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001690  00000000  00000000  0003f010  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014b8  00000000  00000000  000406a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028720  00000000  00000000  00041b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013160  00000000  00000000  0006a278  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fbe58  00000000  00000000  0007d3d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00179230  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dac  00000000  00000000  001792ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007368 	.word	0x08007368

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08007368 	.word	0x08007368

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	200355b0 	.word	0x200355b0

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b972 	b.w	80005a0 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9e08      	ldr	r6, [sp, #32]
 80002da:	4604      	mov	r4, r0
 80002dc:	4688      	mov	r8, r1
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0xa6>
 80002e2:	428a      	cmp	r2, r1
 80002e4:	4615      	mov	r5, r2
 80002e6:	d967      	bls.n	80003b8 <__udivmoddi4+0xe4>
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	b14a      	cbz	r2, 8000302 <__udivmoddi4+0x2e>
 80002ee:	f1c2 0720 	rsb	r7, r2, #32
 80002f2:	fa01 f302 	lsl.w	r3, r1, r2
 80002f6:	fa20 f707 	lsr.w	r7, r0, r7
 80002fa:	4095      	lsls	r5, r2
 80002fc:	ea47 0803 	orr.w	r8, r7, r3
 8000300:	4094      	lsls	r4, r2
 8000302:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fbb8 f7fe 	udiv	r7, r8, lr
 800030c:	fa1f fc85 	uxth.w	ip, r5
 8000310:	fb0e 8817 	mls	r8, lr, r7, r8
 8000314:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000318:	fb07 f10c 	mul.w	r1, r7, ip
 800031c:	4299      	cmp	r1, r3
 800031e:	d909      	bls.n	8000334 <__udivmoddi4+0x60>
 8000320:	18eb      	adds	r3, r5, r3
 8000322:	f107 30ff 	add.w	r0, r7, #4294967295
 8000326:	f080 811b 	bcs.w	8000560 <__udivmoddi4+0x28c>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 8118 	bls.w	8000560 <__udivmoddi4+0x28c>
 8000330:	3f02      	subs	r7, #2
 8000332:	442b      	add	r3, r5
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0fe 	udiv	r0, r3, lr
 800033c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 fc0c 	mul.w	ip, r0, ip
 8000348:	45a4      	cmp	ip, r4
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x8c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x290>
 8000356:	45a4      	cmp	ip, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x290>
 800035c:	3802      	subs	r0, #2
 800035e:	442c      	add	r4, r5
 8000360:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000364:	eba4 040c 	sub.w	r4, r4, ip
 8000368:	2700      	movs	r7, #0
 800036a:	b11e      	cbz	r6, 8000374 <__udivmoddi4+0xa0>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c6 4300 	strd	r4, r3, [r6]
 8000374:	4639      	mov	r1, r7
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xbe>
 800037e:	2e00      	cmp	r6, #0
 8000380:	f000 80eb 	beq.w	800055a <__udivmoddi4+0x286>
 8000384:	2700      	movs	r7, #0
 8000386:	e9c6 0100 	strd	r0, r1, [r6]
 800038a:	4638      	mov	r0, r7
 800038c:	4639      	mov	r1, r7
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f783 	clz	r7, r3
 8000396:	2f00      	cmp	r7, #0
 8000398:	d147      	bne.n	800042a <__udivmoddi4+0x156>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd0>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80fa 	bhi.w	8000598 <__udivmoddi4+0x2c4>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	4698      	mov	r8, r3
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa0>
 80003b2:	e9c6 4800 	strd	r4, r8, [r6]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa0>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xe8>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 808f 	bne.w	80004e4 <__udivmoddi4+0x210>
 80003c6:	1b49      	subs	r1, r1, r5
 80003c8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003cc:	fa1f f885 	uxth.w	r8, r5
 80003d0:	2701      	movs	r7, #1
 80003d2:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d6:	0c23      	lsrs	r3, r4, #16
 80003d8:	fb0e 111c 	mls	r1, lr, ip, r1
 80003dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e0:	fb08 f10c 	mul.w	r1, r8, ip
 80003e4:	4299      	cmp	r1, r3
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x124>
 80003e8:	18eb      	adds	r3, r5, r3
 80003ea:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x122>
 80003f0:	4299      	cmp	r1, r3
 80003f2:	f200 80cd 	bhi.w	8000590 <__udivmoddi4+0x2bc>
 80003f6:	4684      	mov	ip, r0
 80003f8:	1a59      	subs	r1, r3, r1
 80003fa:	b2a3      	uxth	r3, r4
 80003fc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000400:	fb0e 1410 	mls	r4, lr, r0, r1
 8000404:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000408:	fb08 f800 	mul.w	r8, r8, r0
 800040c:	45a0      	cmp	r8, r4
 800040e:	d907      	bls.n	8000420 <__udivmoddi4+0x14c>
 8000410:	192c      	adds	r4, r5, r4
 8000412:	f100 33ff 	add.w	r3, r0, #4294967295
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0x14a>
 8000418:	45a0      	cmp	r8, r4
 800041a:	f200 80b6 	bhi.w	800058a <__udivmoddi4+0x2b6>
 800041e:	4618      	mov	r0, r3
 8000420:	eba4 0408 	sub.w	r4, r4, r8
 8000424:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000428:	e79f      	b.n	800036a <__udivmoddi4+0x96>
 800042a:	f1c7 0c20 	rsb	ip, r7, #32
 800042e:	40bb      	lsls	r3, r7
 8000430:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000434:	ea4e 0e03 	orr.w	lr, lr, r3
 8000438:	fa01 f407 	lsl.w	r4, r1, r7
 800043c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000440:	fa21 f30c 	lsr.w	r3, r1, ip
 8000444:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000448:	4325      	orrs	r5, r4
 800044a:	fbb3 f9f8 	udiv	r9, r3, r8
 800044e:	0c2c      	lsrs	r4, r5, #16
 8000450:	fb08 3319 	mls	r3, r8, r9, r3
 8000454:	fa1f fa8e 	uxth.w	sl, lr
 8000458:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800045c:	fb09 f40a 	mul.w	r4, r9, sl
 8000460:	429c      	cmp	r4, r3
 8000462:	fa02 f207 	lsl.w	r2, r2, r7
 8000466:	fa00 f107 	lsl.w	r1, r0, r7
 800046a:	d90b      	bls.n	8000484 <__udivmoddi4+0x1b0>
 800046c:	eb1e 0303 	adds.w	r3, lr, r3
 8000470:	f109 30ff 	add.w	r0, r9, #4294967295
 8000474:	f080 8087 	bcs.w	8000586 <__udivmoddi4+0x2b2>
 8000478:	429c      	cmp	r4, r3
 800047a:	f240 8084 	bls.w	8000586 <__udivmoddi4+0x2b2>
 800047e:	f1a9 0902 	sub.w	r9, r9, #2
 8000482:	4473      	add	r3, lr
 8000484:	1b1b      	subs	r3, r3, r4
 8000486:	b2ad      	uxth	r5, r5
 8000488:	fbb3 f0f8 	udiv	r0, r3, r8
 800048c:	fb08 3310 	mls	r3, r8, r0, r3
 8000490:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000494:	fb00 fa0a 	mul.w	sl, r0, sl
 8000498:	45a2      	cmp	sl, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1da>
 800049c:	eb1e 0404 	adds.w	r4, lr, r4
 80004a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a4:	d26b      	bcs.n	800057e <__udivmoddi4+0x2aa>
 80004a6:	45a2      	cmp	sl, r4
 80004a8:	d969      	bls.n	800057e <__udivmoddi4+0x2aa>
 80004aa:	3802      	subs	r0, #2
 80004ac:	4474      	add	r4, lr
 80004ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b2:	fba0 8902 	umull	r8, r9, r0, r2
 80004b6:	eba4 040a 	sub.w	r4, r4, sl
 80004ba:	454c      	cmp	r4, r9
 80004bc:	46c2      	mov	sl, r8
 80004be:	464b      	mov	r3, r9
 80004c0:	d354      	bcc.n	800056c <__udivmoddi4+0x298>
 80004c2:	d051      	beq.n	8000568 <__udivmoddi4+0x294>
 80004c4:	2e00      	cmp	r6, #0
 80004c6:	d069      	beq.n	800059c <__udivmoddi4+0x2c8>
 80004c8:	ebb1 050a 	subs.w	r5, r1, sl
 80004cc:	eb64 0403 	sbc.w	r4, r4, r3
 80004d0:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d4:	40fd      	lsrs	r5, r7
 80004d6:	40fc      	lsrs	r4, r7
 80004d8:	ea4c 0505 	orr.w	r5, ip, r5
 80004dc:	e9c6 5400 	strd	r5, r4, [r6]
 80004e0:	2700      	movs	r7, #0
 80004e2:	e747      	b.n	8000374 <__udivmoddi4+0xa0>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f703 	lsr.w	r7, r0, r3
 80004ec:	4095      	lsls	r5, r2
 80004ee:	fa01 f002 	lsl.w	r0, r1, r2
 80004f2:	fa21 f303 	lsr.w	r3, r1, r3
 80004f6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004fa:	4338      	orrs	r0, r7
 80004fc:	0c01      	lsrs	r1, r0, #16
 80004fe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000502:	fa1f f885 	uxth.w	r8, r5
 8000506:	fb0e 3317 	mls	r3, lr, r7, r3
 800050a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050e:	fb07 f308 	mul.w	r3, r7, r8
 8000512:	428b      	cmp	r3, r1
 8000514:	fa04 f402 	lsl.w	r4, r4, r2
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x256>
 800051a:	1869      	adds	r1, r5, r1
 800051c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000520:	d22f      	bcs.n	8000582 <__udivmoddi4+0x2ae>
 8000522:	428b      	cmp	r3, r1
 8000524:	d92d      	bls.n	8000582 <__udivmoddi4+0x2ae>
 8000526:	3f02      	subs	r7, #2
 8000528:	4429      	add	r1, r5
 800052a:	1acb      	subs	r3, r1, r3
 800052c:	b281      	uxth	r1, r0
 800052e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000532:	fb0e 3310 	mls	r3, lr, r0, r3
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb00 f308 	mul.w	r3, r0, r8
 800053e:	428b      	cmp	r3, r1
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x27e>
 8000542:	1869      	adds	r1, r5, r1
 8000544:	f100 3cff 	add.w	ip, r0, #4294967295
 8000548:	d217      	bcs.n	800057a <__udivmoddi4+0x2a6>
 800054a:	428b      	cmp	r3, r1
 800054c:	d915      	bls.n	800057a <__udivmoddi4+0x2a6>
 800054e:	3802      	subs	r0, #2
 8000550:	4429      	add	r1, r5
 8000552:	1ac9      	subs	r1, r1, r3
 8000554:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000558:	e73b      	b.n	80003d2 <__udivmoddi4+0xfe>
 800055a:	4637      	mov	r7, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e709      	b.n	8000374 <__udivmoddi4+0xa0>
 8000560:	4607      	mov	r7, r0
 8000562:	e6e7      	b.n	8000334 <__udivmoddi4+0x60>
 8000564:	4618      	mov	r0, r3
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x8c>
 8000568:	4541      	cmp	r1, r8
 800056a:	d2ab      	bcs.n	80004c4 <__udivmoddi4+0x1f0>
 800056c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000570:	eb69 020e 	sbc.w	r2, r9, lr
 8000574:	3801      	subs	r0, #1
 8000576:	4613      	mov	r3, r2
 8000578:	e7a4      	b.n	80004c4 <__udivmoddi4+0x1f0>
 800057a:	4660      	mov	r0, ip
 800057c:	e7e9      	b.n	8000552 <__udivmoddi4+0x27e>
 800057e:	4618      	mov	r0, r3
 8000580:	e795      	b.n	80004ae <__udivmoddi4+0x1da>
 8000582:	4667      	mov	r7, ip
 8000584:	e7d1      	b.n	800052a <__udivmoddi4+0x256>
 8000586:	4681      	mov	r9, r0
 8000588:	e77c      	b.n	8000484 <__udivmoddi4+0x1b0>
 800058a:	3802      	subs	r0, #2
 800058c:	442c      	add	r4, r5
 800058e:	e747      	b.n	8000420 <__udivmoddi4+0x14c>
 8000590:	f1ac 0c02 	sub.w	ip, ip, #2
 8000594:	442b      	add	r3, r5
 8000596:	e72f      	b.n	80003f8 <__udivmoddi4+0x124>
 8000598:	4638      	mov	r0, r7
 800059a:	e708      	b.n	80003ae <__udivmoddi4+0xda>
 800059c:	4637      	mov	r7, r6
 800059e:	e6e9      	b.n	8000374 <__udivmoddi4+0xa0>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	4a06      	ldr	r2, [pc, #24]	; (80005d4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005c2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005c4:	bf00      	nop
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	2000002c 	.word	0x2000002c
 80005d4:	20000080 	.word	0x20000080

080005d8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005d8:	b5b0      	push	{r4, r5, r7, lr}
 80005da:	b092      	sub	sp, #72	; 0x48
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of TrcMutex */
  osMutexDef(TrcMutex);
 80005de:	2300      	movs	r3, #0
 80005e0:	643b      	str	r3, [r7, #64]	; 0x40
 80005e2:	2300      	movs	r3, #0
 80005e4:	647b      	str	r3, [r7, #68]	; 0x44
  TrcMutexHandle = osMutexCreate(osMutex(TrcMutex));
 80005e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 fe0e 	bl	800320c <osMutexCreate>
 80005f0:	4602      	mov	r2, r0
 80005f2:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <MX_FREERTOS_Init+0x88>)
 80005f4:	601a      	str	r2, [r3, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of TrcBinarySem */
  osSemaphoreDef(TrcBinarySem);
 80005f6:	2300      	movs	r3, #0
 80005f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80005fa:	2300      	movs	r3, #0
 80005fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  TrcBinarySemHandle = osSemaphoreCreate(osSemaphore(TrcBinarySem), 1);
 80005fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000602:	2101      	movs	r1, #1
 8000604:	4618      	mov	r0, r3
 8000606:	f002 fe19 	bl	800323c <osSemaphoreCreate>
 800060a:	4602      	mov	r2, r0
 800060c:	4b15      	ldr	r3, [pc, #84]	; (8000664 <MX_FREERTOS_Init+0x8c>)
 800060e:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of myTask01 */
  osThreadDef(myTask01, StartTask01, osPriorityNormal, 0, 256);
 8000610:	4b15      	ldr	r3, [pc, #84]	; (8000668 <MX_FREERTOS_Init+0x90>)
 8000612:	f107 041c 	add.w	r4, r7, #28
 8000616:	461d      	mov	r5, r3
 8000618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000620:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask01Handle = osThreadCreate(osThread(myTask01), NULL);
 8000624:	f107 031c 	add.w	r3, r7, #28
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f002 fd7b 	bl	8003126 <osThreadCreate>
 8000630:	4602      	mov	r2, r0
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_FREERTOS_Init+0x94>)
 8000634:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 256);
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_FREERTOS_Init+0x98>)
 8000638:	463c      	mov	r4, r7
 800063a:	461d      	mov	r5, r3
 800063c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000640:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000644:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000648:	463b      	mov	r3, r7
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f002 fd6a 	bl	8003126 <osThreadCreate>
 8000652:	4602      	mov	r2, r0
 8000654:	4b07      	ldr	r3, [pc, #28]	; (8000674 <MX_FREERTOS_Init+0x9c>)
 8000656:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000658:	bf00      	nop
 800065a:	3748      	adds	r7, #72	; 0x48
 800065c:	46bd      	mov	sp, r7
 800065e:	bdb0      	pop	{r4, r5, r7, pc}
 8000660:	200354e4 	.word	0x200354e4
 8000664:	200354dc 	.word	0x200354dc
 8000668:	0800738c 	.word	0x0800738c
 800066c:	200354e8 	.word	0x200354e8
 8000670:	080073b4 	.word	0x080073b4
 8000674:	200354e0 	.word	0x200354e0

08000678 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
	uint32_t delay = 1;
 8000680:	2301      	movs	r3, #1
 8000682:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	  if(xSemaphoreTake(TrcMutexHandle, ( TickType_t ) 1) == pdTRUE){
 8000684:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <StartTask01+0x50>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2101      	movs	r1, #1
 800068a:	4618      	mov	r0, r3
 800068c:	f003 f982 	bl	8003994 <xQueueSemaphoreTake>
 8000690:	4603      	mov	r3, r0
 8000692:	2b01      	cmp	r3, #1
 8000694:	d1f6      	bne.n	8000684 <StartTask01+0xc>

		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 8000696:	2102      	movs	r1, #2
 8000698:	480c      	ldr	r0, [pc, #48]	; (80006cc <StartTask01+0x54>)
 800069a:	f000 fd7a 	bl	8001192 <HAL_GPIO_TogglePin>
		SEGGER_SYSVIEW_PrintfHost("Task1, delay = %d ms", delay);
 800069e:	68f9      	ldr	r1, [r7, #12]
 80006a0:	480b      	ldr	r0, [pc, #44]	; (80006d0 <StartTask01+0x58>)
 80006a2:	f006 fdab 	bl	80071fc <SEGGER_SYSVIEW_PrintfHost>
		osDelay(delay++);
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	1c5a      	adds	r2, r3, #1
 80006aa:	60fa      	str	r2, [r7, #12]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f002 fd99 	bl	80031e4 <osDelay>
		xSemaphoreGive(TrcMutexHandle);
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <StartTask01+0x50>)
 80006b4:	6818      	ldr	r0, [r3, #0]
 80006b6:	2300      	movs	r3, #0
 80006b8:	2200      	movs	r2, #0
 80006ba:	2100      	movs	r1, #0
 80006bc:	f003 f840 	bl	8003740 <xQueueGenericSend>
		osThreadYield();
 80006c0:	f002 fd7e 	bl	80031c0 <osThreadYield>
	  if(xSemaphoreTake(TrcMutexHandle, ( TickType_t ) 1) == pdTRUE){
 80006c4:	e7de      	b.n	8000684 <StartTask01+0xc>
 80006c6:	bf00      	nop
 80006c8:	200354e4 	.word	0x200354e4
 80006cc:	40022000 	.word	0x40022000
 80006d0:	080073d0 	.word	0x080073d0

080006d4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  if(xSemaphoreTake(TrcMutexHandle, ( TickType_t ) 1) == pdTRUE){
 80006dc:	4b0b      	ldr	r3, [pc, #44]	; (800070c <StartTask02+0x38>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2101      	movs	r1, #1
 80006e2:	4618      	mov	r0, r3
 80006e4:	f003 f956 	bl	8003994 <xQueueSemaphoreTake>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d1f6      	bne.n	80006dc <StartTask02+0x8>

		  SEGGER_SYSVIEW_PrintfHost("Task 2, delay = 100 ms");
 80006ee:	4808      	ldr	r0, [pc, #32]	; (8000710 <StartTask02+0x3c>)
 80006f0:	f006 fd84 	bl	80071fc <SEGGER_SYSVIEW_PrintfHost>
		  xSemaphoreGive(TrcMutexHandle);
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <StartTask02+0x38>)
 80006f6:	6818      	ldr	r0, [r3, #0]
 80006f8:	2300      	movs	r3, #0
 80006fa:	2200      	movs	r2, #0
 80006fc:	2100      	movs	r1, #0
 80006fe:	f003 f81f 	bl	8003740 <xQueueGenericSend>
		  osDelay(100);
 8000702:	2064      	movs	r0, #100	; 0x64
 8000704:	f002 fd6e 	bl	80031e4 <osDelay>
	  if(xSemaphoreTake(TrcMutexHandle, ( TickType_t ) 1) == pdTRUE){
 8000708:	e7e8      	b.n	80006dc <StartTask02+0x8>
 800070a:	bf00      	nop
 800070c:	200354e4 	.word	0x200354e4
 8000710:	080073e8 	.word	0x080073e8

08000714 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	; 0x28
 8000718:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	4b23      	ldr	r3, [pc, #140]	; (80007b8 <MX_GPIO_Init+0xa4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a22      	ldr	r2, [pc, #136]	; (80007b8 <MX_GPIO_Init+0xa4>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <MX_GPIO_Init+0xa4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <MX_GPIO_Init+0xa4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a1c      	ldr	r2, [pc, #112]	; (80007b8 <MX_GPIO_Init+0xa4>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_GPIO_Init+0xa4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_GPIO_Init+0xa4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a16      	ldr	r2, [pc, #88]	; (80007b8 <MX_GPIO_Init+0xa4>)
 8000760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_GPIO_Init+0xa4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_GPIO_Init+0xa4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a10      	ldr	r2, [pc, #64]	; (80007b8 <MX_GPIO_Init+0xa4>)
 8000778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_GPIO_Init+0xa4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	2102      	movs	r1, #2
 800078e:	480b      	ldr	r0, [pc, #44]	; (80007bc <MX_GPIO_Init+0xa8>)
 8000790:	f000 fce6 	bl	8001160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000794:	2302      	movs	r3, #2
 8000796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000798:	2301      	movs	r3, #1
 800079a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a0:	2300      	movs	r3, #0
 80007a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4619      	mov	r1, r3
 80007aa:	4804      	ldr	r0, [pc, #16]	; (80007bc <MX_GPIO_Init+0xa8>)
 80007ac:	f000 fb2e 	bl	8000e0c <HAL_GPIO_Init>

}
 80007b0:	bf00      	nop
 80007b2:	3728      	adds	r7, #40	; 0x28
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40022000 	.word	0x40022000

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	DWT->CTRL |= (1<<0);
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <main+0x38>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a0b      	ldr	r2, [pc, #44]	; (80007f8 <main+0x38>)
 80007ca:	f043 0301 	orr.w	r3, r3, #1
 80007ce:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d0:	f000 fa0d 	bl	8000bee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d4:	f000 f812 	bl	80007fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d8:	f7ff ff9c 	bl	8000714 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007dc:	f000 f96a 	bl	8000ab4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_SYSVIEW_Conf();
 80007e0:	f005 f832 	bl	8005848 <SEGGER_SYSVIEW_Conf>
  vSetVarulMaxPRIGROUPValue();
 80007e4:	f004 fdea 	bl	80053bc <vSetVarulMaxPRIGROUPValue>
  SEGGER_SYSVIEW_Start();
 80007e8:	f006 f814 	bl	8006814 <SEGGER_SYSVIEW_Start>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80007ec:	f7ff fef4 	bl	80005d8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80007f0:	f002 fc92 	bl	8003118 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <main+0x34>
 80007f6:	bf00      	nop
 80007f8:	e0001000 	.word	0xe0001000

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b0b4      	sub	sp, #208	; 0xd0
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000806:	2230      	movs	r2, #48	; 0x30
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f006 fda4 	bl	8007358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	2284      	movs	r2, #132	; 0x84
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f006 fd95 	bl	8007358 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	4b39      	ldr	r3, [pc, #228]	; (8000914 <SystemClock_Config+0x118>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	4a38      	ldr	r2, [pc, #224]	; (8000914 <SystemClock_Config+0x118>)
 8000834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000838:	6413      	str	r3, [r2, #64]	; 0x40
 800083a:	4b36      	ldr	r3, [pc, #216]	; (8000914 <SystemClock_Config+0x118>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000846:	4b34      	ldr	r3, [pc, #208]	; (8000918 <SystemClock_Config+0x11c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a33      	ldr	r2, [pc, #204]	; (8000918 <SystemClock_Config+0x11c>)
 800084c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000850:	6013      	str	r3, [r2, #0]
 8000852:	4b31      	ldr	r3, [pc, #196]	; (8000918 <SystemClock_Config+0x11c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800085e:	2301      	movs	r3, #1
 8000860:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000864:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000868:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086c:	2302      	movs	r3, #2
 800086e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000872:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000876:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 800087a:	2319      	movs	r3, #25
 800087c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000880:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000884:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000888:	2302      	movs	r3, #2
 800088a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800088e:	2302      	movs	r3, #2
 8000890:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000894:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000898:	4618      	mov	r0, r3
 800089a:	f000 fce5 	bl	8001268 <HAL_RCC_OscConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80008a4:	f000 f84c 	bl	8000940 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008a8:	f000 fc8e 	bl	80011c8 <HAL_PWREx_EnableOverDrive>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80008b2:	f000 f845 	bl	8000940 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b6:	230f      	movs	r3, #15
 80008b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008bc:	2302      	movs	r3, #2
 80008be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80008d8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80008dc:	2107      	movs	r1, #7
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 ff66 	bl	80017b0 <HAL_RCC_ClockConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80008ea:	f000 f829 	bl	8000940 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80008ee:	2340      	movs	r3, #64	; 0x40
 80008f0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008f2:	2300      	movs	r3, #0
 80008f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	4618      	mov	r0, r3
 80008fc:	f001 f95c 	bl	8001bb8 <HAL_RCCEx_PeriphCLKConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8000906:	f000 f81b 	bl	8000940 <Error_Handler>
  }
}
 800090a:	bf00      	nop
 800090c:	37d0      	adds	r7, #208	; 0xd0
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800
 8000918:	40007000 	.word	0x40007000

0800091c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a04      	ldr	r2, [pc, #16]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d101      	bne.n	8000932 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800092e:	f000 f96b 	bl	8000c08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40010000 	.word	0x40010000

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000946:	e7fe      	b.n	8000946 <Error_Handler+0x6>

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	4a10      	ldr	r2, [pc, #64]	; (8000994 <HAL_MspInit+0x4c>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000958:	6413      	str	r3, [r2, #64]	; 0x40
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <HAL_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <HAL_MspInit+0x4c>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <HAL_MspInit+0x4c>)
 800096c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000970:	6453      	str	r3, [r2, #68]	; 0x44
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <HAL_MspInit+0x4c>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	210f      	movs	r1, #15
 8000982:	f06f 0001 	mvn.w	r0, #1
 8000986:	f000 fa17 	bl	8000db8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800

08000998 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08c      	sub	sp, #48	; 0x30
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80009a8:	2200      	movs	r2, #0
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	2019      	movs	r0, #25
 80009ae:	f000 fa03 	bl	8000db8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009b2:	2019      	movs	r0, #25
 80009b4:	f000 fa1c 	bl	8000df0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009b8:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <HAL_InitTick+0xa0>)
 80009ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009bc:	4a1e      	ldr	r2, [pc, #120]	; (8000a38 <HAL_InitTick+0xa0>)
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	6453      	str	r3, [r2, #68]	; 0x44
 80009c4:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <HAL_InitTick+0xa0>)
 80009c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009d0:	f107 0210 	add.w	r2, r7, #16
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4611      	mov	r1, r2
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 f8ba 	bl	8001b54 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80009e0:	f001 f8a4 	bl	8001b2c <HAL_RCC_GetPCLK2Freq>
 80009e4:	4603      	mov	r3, r0
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ec:	4a13      	ldr	r2, [pc, #76]	; (8000a3c <HAL_InitTick+0xa4>)
 80009ee:	fba2 2303 	umull	r2, r3, r2, r3
 80009f2:	0c9b      	lsrs	r3, r3, #18
 80009f4:	3b01      	subs	r3, #1
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <HAL_InitTick+0xa8>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <HAL_InitTick+0xac>)
 80009fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <HAL_InitTick+0xa8>)
 8000a00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a04:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a06:	4a0e      	ldr	r2, [pc, #56]	; (8000a40 <HAL_InitTick+0xa8>)
 8000a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a0a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <HAL_InitTick+0xa8>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <HAL_InitTick+0xa8>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000a18:	4809      	ldr	r0, [pc, #36]	; (8000a40 <HAL_InitTick+0xa8>)
 8000a1a:	f001 fcbb 	bl	8002394 <HAL_TIM_Base_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d104      	bne.n	8000a2e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000a24:	4806      	ldr	r0, [pc, #24]	; (8000a40 <HAL_InitTick+0xa8>)
 8000a26:	f001 fceb 	bl	8002400 <HAL_TIM_Base_Start_IT>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	e000      	b.n	8000a30 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3730      	adds	r7, #48	; 0x30
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	431bde83 	.word	0x431bde83
 8000a40:	200354ec 	.word	0x200354ec
 8000a44:	40010000 	.word	0x40010000

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <NMI_Handler+0x4>

08000a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <HardFault_Handler+0x4>

08000a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <MemManage_Handler+0x4>

08000a5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <BusFault_Handler+0x4>

08000a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <UsageFault_Handler+0x4>

08000a66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a78:	4802      	ldr	r0, [pc, #8]	; (8000a84 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a7a:	f001 fceb 	bl	8002454 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200354ec 	.word	0x200354ec

08000a88 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <SystemInit+0x28>)
 8000a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a92:	4a07      	ldr	r2, [pc, #28]	; (8000ab0 <SystemInit+0x28>)
 8000a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <SystemInit+0x28>)
 8000a9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aa2:	609a      	str	r2, [r3, #8]
#endif
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000aba:	4a15      	ldr	r2, [pc, #84]	; (8000b10 <MX_USART1_UART_Init+0x5c>)
 8000abc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000abe:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ac0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ada:	220c      	movs	r2, #12
 8000adc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000af8:	f001 feb2 	bl	8002860 <HAL_UART_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b02:	f7ff ff1d 	bl	8000940 <Error_Handler>
  }

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	2003552c 	.word	0x2003552c
 8000b10:	40011000 	.word	0x40011000

08000b14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a17      	ldr	r2, [pc, #92]	; (8000b90 <HAL_UART_MspInit+0x7c>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d127      	bne.n	8000b86 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b36:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <HAL_UART_MspInit+0x80>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	4a16      	ldr	r2, [pc, #88]	; (8000b94 <HAL_UART_MspInit+0x80>)
 8000b3c:	f043 0310 	orr.w	r3, r3, #16
 8000b40:	6453      	str	r3, [r2, #68]	; 0x44
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <HAL_UART_MspInit+0x80>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	f003 0310 	and.w	r3, r3, #16
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <HAL_UART_MspInit+0x80>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <HAL_UART_MspInit+0x80>)
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <HAL_UART_MspInit+0x80>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000b66:	23c0      	movs	r3, #192	; 0xc0
 8000b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b72:	2303      	movs	r3, #3
 8000b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b76:	2307      	movs	r3, #7
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <HAL_UART_MspInit+0x84>)
 8000b82:	f000 f943 	bl	8000e0c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000b86:	bf00      	nop
 8000b88:	3728      	adds	r7, #40	; 0x28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40011000 	.word	0x40011000
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020400 	.word	0x40020400

08000b9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ba0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ba2:	e003      	b.n	8000bac <LoopCopyDataInit>

08000ba4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ba6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ba8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000baa:	3104      	adds	r1, #4

08000bac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bac:	480b      	ldr	r0, [pc, #44]	; (8000bdc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bb0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bb2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bb4:	d3f6      	bcc.n	8000ba4 <CopyDataInit>
  ldr  r2, =_sbss
 8000bb6:	4a0b      	ldr	r2, [pc, #44]	; (8000be4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bb8:	e002      	b.n	8000bc0 <LoopFillZerobss>

08000bba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bbc:	f842 3b04 	str.w	r3, [r2], #4

08000bc0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bc2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bc4:	d3f9      	bcc.n	8000bba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bc6:	f7ff ff5f 	bl	8000a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bca:	f006 fb87 	bl	80072dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bce:	f7ff fdf7 	bl	80007c0 <main>
  bx  lr    
 8000bd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bd4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000bd8:	08007508 	.word	0x08007508
  ldr  r0, =_sdata
 8000bdc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000be0:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000be4:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000be8:	20035658 	.word	0x20035658

08000bec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bec:	e7fe      	b.n	8000bec <ADC_IRQHandler>

08000bee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf2:	2003      	movs	r0, #3
 8000bf4:	f000 f8d5 	bl	8000da2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f7ff fecd 	bl	8000998 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000bfe:	f7ff fea3 	bl	8000948 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000c02:	2300      	movs	r3, #0
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_IncTick+0x20>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	461a      	mov	r2, r3
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_IncTick+0x24>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4413      	add	r3, r2
 8000c18:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <HAL_IncTick+0x24>)
 8000c1a:	6013      	str	r3, [r2, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	200355ac 	.word	0x200355ac

08000c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return uwTick;
 8000c34:	4b03      	ldr	r3, [pc, #12]	; (8000c44 <HAL_GetTick+0x14>)
 8000c36:	681b      	ldr	r3, [r3, #0]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	200355ac 	.word	0x200355ac

08000c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c58:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <__NVIC_SetPriorityGrouping+0x40>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5e:	68ba      	ldr	r2, [r7, #8]
 8000c60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c64:	4013      	ands	r3, r2
 8000c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <__NVIC_SetPriorityGrouping+0x44>)
 8000c72:	4313      	orrs	r3, r2
 8000c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c76:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <__NVIC_SetPriorityGrouping+0x40>)
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	60d3      	str	r3, [r2, #12]
}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00
 8000c8c:	05fa0000 	.word	0x05fa0000

08000c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c94:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	0a1b      	lsrs	r3, r3, #8
 8000c9a:	f003 0307 	and.w	r3, r3, #7
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	db0b      	blt.n	8000cd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	f003 021f 	and.w	r2, r3, #31
 8000cc4:	4907      	ldr	r1, [pc, #28]	; (8000ce4 <__NVIC_EnableIRQ+0x38>)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	095b      	lsrs	r3, r3, #5
 8000ccc:	2001      	movs	r0, #1
 8000cce:	fa00 f202 	lsl.w	r2, r0, r2
 8000cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000e100 	.word	0xe000e100

08000ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	6039      	str	r1, [r7, #0]
 8000cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	db0a      	blt.n	8000d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	490c      	ldr	r1, [pc, #48]	; (8000d34 <__NVIC_SetPriority+0x4c>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	0112      	lsls	r2, r2, #4
 8000d08:	b2d2      	uxtb	r2, r2
 8000d0a:	440b      	add	r3, r1
 8000d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d10:	e00a      	b.n	8000d28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4908      	ldr	r1, [pc, #32]	; (8000d38 <__NVIC_SetPriority+0x50>)
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	f003 030f 	and.w	r3, r3, #15
 8000d1e:	3b04      	subs	r3, #4
 8000d20:	0112      	lsls	r2, r2, #4
 8000d22:	b2d2      	uxtb	r2, r2
 8000d24:	440b      	add	r3, r1
 8000d26:	761a      	strb	r2, [r3, #24]
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000e100 	.word	0xe000e100
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b089      	sub	sp, #36	; 0x24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	f1c3 0307 	rsb	r3, r3, #7
 8000d56:	2b04      	cmp	r3, #4
 8000d58:	bf28      	it	cs
 8000d5a:	2304      	movcs	r3, #4
 8000d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3304      	adds	r3, #4
 8000d62:	2b06      	cmp	r3, #6
 8000d64:	d902      	bls.n	8000d6c <NVIC_EncodePriority+0x30>
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3b03      	subs	r3, #3
 8000d6a:	e000      	b.n	8000d6e <NVIC_EncodePriority+0x32>
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	f04f 32ff 	mov.w	r2, #4294967295
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43da      	mvns	r2, r3
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	401a      	ands	r2, r3
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d84:	f04f 31ff 	mov.w	r1, #4294967295
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8e:	43d9      	mvns	r1, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	4313      	orrs	r3, r2
         );
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3724      	adds	r7, #36	; 0x24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff ff4c 	bl	8000c48 <__NVIC_SetPriorityGrouping>
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
 8000dc4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dca:	f7ff ff61 	bl	8000c90 <__NVIC_GetPriorityGrouping>
 8000dce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	68b9      	ldr	r1, [r7, #8]
 8000dd4:	6978      	ldr	r0, [r7, #20]
 8000dd6:	f7ff ffb1 	bl	8000d3c <NVIC_EncodePriority>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de0:	4611      	mov	r1, r2
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff ff80 	bl	8000ce8 <__NVIC_SetPriority>
}
 8000de8:	bf00      	nop
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ff54 	bl	8000cac <__NVIC_EnableIRQ>
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b089      	sub	sp, #36	; 0x24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
 8000e2a:	e175      	b.n	8001118 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	697a      	ldr	r2, [r7, #20]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	f040 8164 	bne.w	8001112 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d00b      	beq.n	8000e6a <HAL_GPIO_Init+0x5e>
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d007      	beq.n	8000e6a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e5e:	2b11      	cmp	r3, #17
 8000e60:	d003      	beq.n	8000e6a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2b12      	cmp	r3, #18
 8000e68:	d130      	bne.n	8000ecc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	2203      	movs	r2, #3
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	68da      	ldr	r2, [r3, #12]
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	091b      	lsrs	r3, r3, #4
 8000eb6:	f003 0201 	and.w	r2, r3, #1
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	689a      	ldr	r2, [r3, #8]
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d003      	beq.n	8000f0c <HAL_GPIO_Init+0x100>
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b12      	cmp	r3, #18
 8000f0a:	d123      	bne.n	8000f54 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	08da      	lsrs	r2, r3, #3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3208      	adds	r2, #8
 8000f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	f003 0307 	and.w	r3, r3, #7
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	220f      	movs	r2, #15
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	691a      	ldr	r2, [r3, #16]
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	08da      	lsrs	r2, r3, #3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	3208      	adds	r2, #8
 8000f4e:	69b9      	ldr	r1, [r7, #24]
 8000f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	2203      	movs	r2, #3
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0203 	and.w	r2, r3, #3
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f000 80be 	beq.w	8001112 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f96:	4b65      	ldr	r3, [pc, #404]	; (800112c <HAL_GPIO_Init+0x320>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	4a64      	ldr	r2, [pc, #400]	; (800112c <HAL_GPIO_Init+0x320>)
 8000f9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa2:	4b62      	ldr	r3, [pc, #392]	; (800112c <HAL_GPIO_Init+0x320>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000fae:	4a60      	ldr	r2, [pc, #384]	; (8001130 <HAL_GPIO_Init+0x324>)
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	089b      	lsrs	r3, r3, #2
 8000fb4:	3302      	adds	r3, #2
 8000fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	220f      	movs	r2, #15
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a57      	ldr	r2, [pc, #348]	; (8001134 <HAL_GPIO_Init+0x328>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d037      	beq.n	800104a <HAL_GPIO_Init+0x23e>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a56      	ldr	r2, [pc, #344]	; (8001138 <HAL_GPIO_Init+0x32c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d031      	beq.n	8001046 <HAL_GPIO_Init+0x23a>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a55      	ldr	r2, [pc, #340]	; (800113c <HAL_GPIO_Init+0x330>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d02b      	beq.n	8001042 <HAL_GPIO_Init+0x236>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a54      	ldr	r2, [pc, #336]	; (8001140 <HAL_GPIO_Init+0x334>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d025      	beq.n	800103e <HAL_GPIO_Init+0x232>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a53      	ldr	r2, [pc, #332]	; (8001144 <HAL_GPIO_Init+0x338>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d01f      	beq.n	800103a <HAL_GPIO_Init+0x22e>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a52      	ldr	r2, [pc, #328]	; (8001148 <HAL_GPIO_Init+0x33c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d019      	beq.n	8001036 <HAL_GPIO_Init+0x22a>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a51      	ldr	r2, [pc, #324]	; (800114c <HAL_GPIO_Init+0x340>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d013      	beq.n	8001032 <HAL_GPIO_Init+0x226>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a50      	ldr	r2, [pc, #320]	; (8001150 <HAL_GPIO_Init+0x344>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d00d      	beq.n	800102e <HAL_GPIO_Init+0x222>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4f      	ldr	r2, [pc, #316]	; (8001154 <HAL_GPIO_Init+0x348>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d007      	beq.n	800102a <HAL_GPIO_Init+0x21e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4e      	ldr	r2, [pc, #312]	; (8001158 <HAL_GPIO_Init+0x34c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d101      	bne.n	8001026 <HAL_GPIO_Init+0x21a>
 8001022:	2309      	movs	r3, #9
 8001024:	e012      	b.n	800104c <HAL_GPIO_Init+0x240>
 8001026:	230a      	movs	r3, #10
 8001028:	e010      	b.n	800104c <HAL_GPIO_Init+0x240>
 800102a:	2308      	movs	r3, #8
 800102c:	e00e      	b.n	800104c <HAL_GPIO_Init+0x240>
 800102e:	2307      	movs	r3, #7
 8001030:	e00c      	b.n	800104c <HAL_GPIO_Init+0x240>
 8001032:	2306      	movs	r3, #6
 8001034:	e00a      	b.n	800104c <HAL_GPIO_Init+0x240>
 8001036:	2305      	movs	r3, #5
 8001038:	e008      	b.n	800104c <HAL_GPIO_Init+0x240>
 800103a:	2304      	movs	r3, #4
 800103c:	e006      	b.n	800104c <HAL_GPIO_Init+0x240>
 800103e:	2303      	movs	r3, #3
 8001040:	e004      	b.n	800104c <HAL_GPIO_Init+0x240>
 8001042:	2302      	movs	r3, #2
 8001044:	e002      	b.n	800104c <HAL_GPIO_Init+0x240>
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <HAL_GPIO_Init+0x240>
 800104a:	2300      	movs	r3, #0
 800104c:	69fa      	ldr	r2, [r7, #28]
 800104e:	f002 0203 	and.w	r2, r2, #3
 8001052:	0092      	lsls	r2, r2, #2
 8001054:	4093      	lsls	r3, r2
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800105c:	4934      	ldr	r1, [pc, #208]	; (8001130 <HAL_GPIO_Init+0x324>)
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	3302      	adds	r3, #2
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800106a:	4b3c      	ldr	r3, [pc, #240]	; (800115c <HAL_GPIO_Init+0x350>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800108e:	4a33      	ldr	r2, [pc, #204]	; (800115c <HAL_GPIO_Init+0x350>)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001094:	4b31      	ldr	r3, [pc, #196]	; (800115c <HAL_GPIO_Init+0x350>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010b8:	4a28      	ldr	r2, [pc, #160]	; (800115c <HAL_GPIO_Init+0x350>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010be:	4b27      	ldr	r3, [pc, #156]	; (800115c <HAL_GPIO_Init+0x350>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010e2:	4a1e      	ldr	r2, [pc, #120]	; (800115c <HAL_GPIO_Init+0x350>)
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010e8:	4b1c      	ldr	r3, [pc, #112]	; (800115c <HAL_GPIO_Init+0x350>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800110c:	4a13      	ldr	r2, [pc, #76]	; (800115c <HAL_GPIO_Init+0x350>)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3301      	adds	r3, #1
 8001116:	61fb      	str	r3, [r7, #28]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	2b0f      	cmp	r3, #15
 800111c:	f67f ae86 	bls.w	8000e2c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001120:	bf00      	nop
 8001122:	3724      	adds	r7, #36	; 0x24
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	40023800 	.word	0x40023800
 8001130:	40013800 	.word	0x40013800
 8001134:	40020000 	.word	0x40020000
 8001138:	40020400 	.word	0x40020400
 800113c:	40020800 	.word	0x40020800
 8001140:	40020c00 	.word	0x40020c00
 8001144:	40021000 	.word	0x40021000
 8001148:	40021400 	.word	0x40021400
 800114c:	40021800 	.word	0x40021800
 8001150:	40021c00 	.word	0x40021c00
 8001154:	40022000 	.word	0x40022000
 8001158:	40022400 	.word	0x40022400
 800115c:	40013c00 	.word	0x40013c00

08001160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	807b      	strh	r3, [r7, #2]
 800116c:	4613      	mov	r3, r2
 800116e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001170:	787b      	ldrb	r3, [r7, #1]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001176:	887a      	ldrh	r2, [r7, #2]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800117c:	e003      	b.n	8001186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800117e:	887b      	ldrh	r3, [r7, #2]
 8001180:	041a      	lsls	r2, r3, #16
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	619a      	str	r2, [r3, #24]
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	460b      	mov	r3, r1
 800119c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	695a      	ldr	r2, [r3, #20]
 80011a2:	887b      	ldrh	r3, [r7, #2]
 80011a4:	4013      	ands	r3, r2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d004      	beq.n	80011b4 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80011aa:	887b      	ldrh	r3, [r7, #2]
 80011ac:	041a      	lsls	r2, r3, #16
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80011b2:	e002      	b.n	80011ba <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011b4:	887a      	ldrh	r2, [r7, #2]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	619a      	str	r2, [r3, #24]
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80011d2:	4b23      	ldr	r3, [pc, #140]	; (8001260 <HAL_PWREx_EnableOverDrive+0x98>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	4a22      	ldr	r2, [pc, #136]	; (8001260 <HAL_PWREx_EnableOverDrive+0x98>)
 80011d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011dc:	6413      	str	r3, [r2, #64]	; 0x40
 80011de:	4b20      	ldr	r3, [pc, #128]	; (8001260 <HAL_PWREx_EnableOverDrive+0x98>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80011ea:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <HAL_PWREx_EnableOverDrive+0x9c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a1d      	ldr	r2, [pc, #116]	; (8001264 <HAL_PWREx_EnableOverDrive+0x9c>)
 80011f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011f6:	f7ff fd1b 	bl	8000c30 <HAL_GetTick>
 80011fa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011fc:	e009      	b.n	8001212 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011fe:	f7ff fd17 	bl	8000c30 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800120c:	d901      	bls.n	8001212 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e022      	b.n	8001258 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800121a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800121e:	d1ee      	bne.n	80011fe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001220:	4b10      	ldr	r3, [pc, #64]	; (8001264 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0f      	ldr	r2, [pc, #60]	; (8001264 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800122a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800122c:	f7ff fd00 	bl	8000c30 <HAL_GetTick>
 8001230:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001232:	e009      	b.n	8001248 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001234:	f7ff fcfc 	bl	8000c30 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001242:	d901      	bls.n	8001248 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e007      	b.n	8001258 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_PWREx_EnableOverDrive+0x9c>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001250:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001254:	d1ee      	bne.n	8001234 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40023800 	.word	0x40023800
 8001264:	40007000 	.word	0x40007000

08001268 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001270:	2300      	movs	r3, #0
 8001272:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e291      	b.n	80017a2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b00      	cmp	r3, #0
 8001288:	f000 8087 	beq.w	800139a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800128c:	4b96      	ldr	r3, [pc, #600]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 030c 	and.w	r3, r3, #12
 8001294:	2b04      	cmp	r3, #4
 8001296:	d00c      	beq.n	80012b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001298:	4b93      	ldr	r3, [pc, #588]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f003 030c 	and.w	r3, r3, #12
 80012a0:	2b08      	cmp	r3, #8
 80012a2:	d112      	bne.n	80012ca <HAL_RCC_OscConfig+0x62>
 80012a4:	4b90      	ldr	r3, [pc, #576]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012b0:	d10b      	bne.n	80012ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b2:	4b8d      	ldr	r3, [pc, #564]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d06c      	beq.n	8001398 <HAL_RCC_OscConfig+0x130>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d168      	bne.n	8001398 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e26b      	b.n	80017a2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d2:	d106      	bne.n	80012e2 <HAL_RCC_OscConfig+0x7a>
 80012d4:	4b84      	ldr	r3, [pc, #528]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a83      	ldr	r2, [pc, #524]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 80012da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	e02e      	b.n	8001340 <HAL_RCC_OscConfig+0xd8>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d10c      	bne.n	8001304 <HAL_RCC_OscConfig+0x9c>
 80012ea:	4b7f      	ldr	r3, [pc, #508]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a7e      	ldr	r2, [pc, #504]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 80012f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	4b7c      	ldr	r3, [pc, #496]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a7b      	ldr	r2, [pc, #492]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 80012fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	e01d      	b.n	8001340 <HAL_RCC_OscConfig+0xd8>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800130c:	d10c      	bne.n	8001328 <HAL_RCC_OscConfig+0xc0>
 800130e:	4b76      	ldr	r3, [pc, #472]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a75      	ldr	r2, [pc, #468]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 8001314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	4b73      	ldr	r3, [pc, #460]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a72      	ldr	r2, [pc, #456]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 8001320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	e00b      	b.n	8001340 <HAL_RCC_OscConfig+0xd8>
 8001328:	4b6f      	ldr	r3, [pc, #444]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a6e      	ldr	r2, [pc, #440]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 800132e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b6c      	ldr	r3, [pc, #432]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a6b      	ldr	r2, [pc, #428]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 800133a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800133e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d013      	beq.n	8001370 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001348:	f7ff fc72 	bl	8000c30 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001350:	f7ff fc6e 	bl	8000c30 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b64      	cmp	r3, #100	; 0x64
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e21f      	b.n	80017a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001362:	4b61      	ldr	r3, [pc, #388]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f0      	beq.n	8001350 <HAL_RCC_OscConfig+0xe8>
 800136e:	e014      	b.n	800139a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001370:	f7ff fc5e 	bl	8000c30 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001378:	f7ff fc5a 	bl	8000c30 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	; 0x64
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e20b      	b.n	80017a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138a:	4b57      	ldr	r3, [pc, #348]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f0      	bne.n	8001378 <HAL_RCC_OscConfig+0x110>
 8001396:	e000      	b.n	800139a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d069      	beq.n	800147a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013a6:	4b50      	ldr	r3, [pc, #320]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00b      	beq.n	80013ca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013b2:	4b4d      	ldr	r3, [pc, #308]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f003 030c 	and.w	r3, r3, #12
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d11c      	bne.n	80013f8 <HAL_RCC_OscConfig+0x190>
 80013be:	4b4a      	ldr	r3, [pc, #296]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d116      	bne.n	80013f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ca:	4b47      	ldr	r3, [pc, #284]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d005      	beq.n	80013e2 <HAL_RCC_OscConfig+0x17a>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d001      	beq.n	80013e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e1df      	b.n	80017a2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e2:	4b41      	ldr	r3, [pc, #260]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	493d      	ldr	r1, [pc, #244]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f6:	e040      	b.n	800147a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d023      	beq.n	8001448 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001400:	4b39      	ldr	r3, [pc, #228]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a38      	ldr	r2, [pc, #224]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140c:	f7ff fc10 	bl	8000c30 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001414:	f7ff fc0c 	bl	8000c30 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e1bd      	b.n	80017a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001426:	4b30      	ldr	r3, [pc, #192]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0f0      	beq.n	8001414 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001432:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	4929      	ldr	r1, [pc, #164]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 8001442:	4313      	orrs	r3, r2
 8001444:	600b      	str	r3, [r1, #0]
 8001446:	e018      	b.n	800147a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001448:	4b27      	ldr	r3, [pc, #156]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a26      	ldr	r2, [pc, #152]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 800144e:	f023 0301 	bic.w	r3, r3, #1
 8001452:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001454:	f7ff fbec 	bl	8000c30 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800145c:	f7ff fbe8 	bl	8000c30 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e199      	b.n	80017a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800146e:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f0      	bne.n	800145c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0308 	and.w	r3, r3, #8
 8001482:	2b00      	cmp	r3, #0
 8001484:	d038      	beq.n	80014f8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d019      	beq.n	80014c2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800148e:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 8001490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001492:	4a15      	ldr	r2, [pc, #84]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800149a:	f7ff fbc9 	bl	8000c30 <HAL_GetTick>
 800149e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014a2:	f7ff fbc5 	bl	8000c30 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e176      	b.n	80017a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 80014b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d0f0      	beq.n	80014a2 <HAL_RCC_OscConfig+0x23a>
 80014c0:	e01a      	b.n	80014f8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c2:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 80014c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014c6:	4a08      	ldr	r2, [pc, #32]	; (80014e8 <HAL_RCC_OscConfig+0x280>)
 80014c8:	f023 0301 	bic.w	r3, r3, #1
 80014cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ce:	f7ff fbaf 	bl	8000c30 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d4:	e00a      	b.n	80014ec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d6:	f7ff fbab 	bl	8000c30 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d903      	bls.n	80014ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e15c      	b.n	80017a2 <HAL_RCC_OscConfig+0x53a>
 80014e8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ec:	4b91      	ldr	r3, [pc, #580]	; (8001734 <HAL_RCC_OscConfig+0x4cc>)
 80014ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1ee      	bne.n	80014d6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	2b00      	cmp	r3, #0
 8001502:	f000 80a4 	beq.w	800164e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001506:	4b8b      	ldr	r3, [pc, #556]	; (8001734 <HAL_RCC_OscConfig+0x4cc>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10d      	bne.n	800152e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001512:	4b88      	ldr	r3, [pc, #544]	; (8001734 <HAL_RCC_OscConfig+0x4cc>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	4a87      	ldr	r2, [pc, #540]	; (8001734 <HAL_RCC_OscConfig+0x4cc>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151c:	6413      	str	r3, [r2, #64]	; 0x40
 800151e:	4b85      	ldr	r3, [pc, #532]	; (8001734 <HAL_RCC_OscConfig+0x4cc>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800152a:	2301      	movs	r3, #1
 800152c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800152e:	4b82      	ldr	r3, [pc, #520]	; (8001738 <HAL_RCC_OscConfig+0x4d0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001536:	2b00      	cmp	r3, #0
 8001538:	d118      	bne.n	800156c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800153a:	4b7f      	ldr	r3, [pc, #508]	; (8001738 <HAL_RCC_OscConfig+0x4d0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a7e      	ldr	r2, [pc, #504]	; (8001738 <HAL_RCC_OscConfig+0x4d0>)
 8001540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001546:	f7ff fb73 	bl	8000c30 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800154e:	f7ff fb6f 	bl	8000c30 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b64      	cmp	r3, #100	; 0x64
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e120      	b.n	80017a2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001560:	4b75      	ldr	r3, [pc, #468]	; (8001738 <HAL_RCC_OscConfig+0x4d0>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0f0      	beq.n	800154e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d106      	bne.n	8001582 <HAL_RCC_OscConfig+0x31a>
 8001574:	4b6f      	ldr	r3, [pc, #444]	; (8001734 <HAL_RCC_OscConfig+0x4cc>)
 8001576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001578:	4a6e      	ldr	r2, [pc, #440]	; (8001734 <HAL_RCC_OscConfig+0x4cc>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	6713      	str	r3, [r2, #112]	; 0x70
 8001580:	e02d      	b.n	80015de <HAL_RCC_OscConfig+0x376>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10c      	bne.n	80015a4 <HAL_RCC_OscConfig+0x33c>
 800158a:	4b6a      	ldr	r3, [pc, #424]	; (8001734 <HAL_RCC_OscConfig+0x4cc>)
 800158c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158e:	4a69      	ldr	r2, [pc, #420]	; (8001734 <HAL_RCC_OscConfig+0x4cc>)
 8001590:	f023 0301 	bic.w	r3, r3, #1
 8001594:	6713      	str	r3, [r2, #112]	; 0x70
 8001596:	4b67      	ldr	r3, [pc, #412]	; (8001734 <HAL_RCC_OscConfig+0x4cc>)
 8001598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159a:	4a66      	ldr	r2, [pc, #408]	; (8001734 <HAL_RCC_OscConfig+0x4cc>)
 800159c:	f023 0304 	bic.w	r3, r3, #4
 80015a0:	6713      	str	r3, [r2, #112]	; 0x70
 80015a2:	e01c      	b.n	80015de <HAL_RCC_OscConfig+0x376>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	2b05      	cmp	r3, #5
 80015aa:	d10c      	bne.n	80015c6 <HAL_RCC_OscConfig+0x35e>
 80015ac:	4b61      	ldr	r3, [pc, #388]	; (8001734 <HAL_RCC_OscConfig+0x4cc>)
 80015ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b0:	4a60      	ldr	r2, [pc, #384]	; (8001734 <HAL_RCC_OscConfig+0x4cc>)
 80015b2:	f043 0304 	orr.w	r3, r3, #4
 80015b6:	6713      	str	r3, [r2, #112]	; 0x70
 80015b8:	4b5e      	ldr	r3, [pc, #376]	; (8001734 <HAL_RCC_OscConfig+0x4cc>)
 80015ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015bc:	4a5d      	ldr	r2, [pc, #372]	; (8001734 <HAL_RCC_OscConfig+0x4cc>)
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	6713      	str	r3, [r2, #112]	; 0x70
 80015c4:	e00b      	b.n	80015de <HAL_RCC_OscConfig+0x376>
 80015c6:	4b5b      	ldr	r3, [pc, #364]	; (8001734 <HAL_RCC_OscConfig+0x4cc>)
 80015c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ca:	4a5a      	ldr	r2, [pc, #360]	; (8001734 <HAL_RCC_OscConfig+0x4cc>)
 80015cc:	f023 0301 	bic.w	r3, r3, #1
 80015d0:	6713      	str	r3, [r2, #112]	; 0x70
 80015d2:	4b58      	ldr	r3, [pc, #352]	; (8001734 <HAL_RCC_OscConfig+0x4cc>)
 80015d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d6:	4a57      	ldr	r2, [pc, #348]	; (8001734 <HAL_RCC_OscConfig+0x4cc>)
 80015d8:	f023 0304 	bic.w	r3, r3, #4
 80015dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d015      	beq.n	8001612 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e6:	f7ff fb23 	bl	8000c30 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ec:	e00a      	b.n	8001604 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ee:	f7ff fb1f 	bl	8000c30 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e0ce      	b.n	80017a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001604:	4b4b      	ldr	r3, [pc, #300]	; (8001734 <HAL_RCC_OscConfig+0x4cc>)
 8001606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0ee      	beq.n	80015ee <HAL_RCC_OscConfig+0x386>
 8001610:	e014      	b.n	800163c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001612:	f7ff fb0d 	bl	8000c30 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001618:	e00a      	b.n	8001630 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800161a:	f7ff fb09 	bl	8000c30 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	f241 3288 	movw	r2, #5000	; 0x1388
 8001628:	4293      	cmp	r3, r2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e0b8      	b.n	80017a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001630:	4b40      	ldr	r3, [pc, #256]	; (8001734 <HAL_RCC_OscConfig+0x4cc>)
 8001632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1ee      	bne.n	800161a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800163c:	7dfb      	ldrb	r3, [r7, #23]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d105      	bne.n	800164e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001642:	4b3c      	ldr	r3, [pc, #240]	; (8001734 <HAL_RCC_OscConfig+0x4cc>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	4a3b      	ldr	r2, [pc, #236]	; (8001734 <HAL_RCC_OscConfig+0x4cc>)
 8001648:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800164c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	2b00      	cmp	r3, #0
 8001654:	f000 80a4 	beq.w	80017a0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001658:	4b36      	ldr	r3, [pc, #216]	; (8001734 <HAL_RCC_OscConfig+0x4cc>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 030c 	and.w	r3, r3, #12
 8001660:	2b08      	cmp	r3, #8
 8001662:	d06b      	beq.n	800173c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	2b02      	cmp	r3, #2
 800166a:	d149      	bne.n	8001700 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166c:	4b31      	ldr	r3, [pc, #196]	; (8001734 <HAL_RCC_OscConfig+0x4cc>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a30      	ldr	r2, [pc, #192]	; (8001734 <HAL_RCC_OscConfig+0x4cc>)
 8001672:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001676:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001678:	f7ff fada 	bl	8000c30 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001680:	f7ff fad6 	bl	8000c30 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e087      	b.n	80017a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001692:	4b28      	ldr	r3, [pc, #160]	; (8001734 <HAL_RCC_OscConfig+0x4cc>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69da      	ldr	r2, [r3, #28]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ac:	019b      	lsls	r3, r3, #6
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b4:	085b      	lsrs	r3, r3, #1
 80016b6:	3b01      	subs	r3, #1
 80016b8:	041b      	lsls	r3, r3, #16
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c0:	061b      	lsls	r3, r3, #24
 80016c2:	4313      	orrs	r3, r2
 80016c4:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <HAL_RCC_OscConfig+0x4cc>)
 80016c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80016ca:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016cc:	4b19      	ldr	r3, [pc, #100]	; (8001734 <HAL_RCC_OscConfig+0x4cc>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a18      	ldr	r2, [pc, #96]	; (8001734 <HAL_RCC_OscConfig+0x4cc>)
 80016d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d8:	f7ff faaa 	bl	8000c30 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e0:	f7ff faa6 	bl	8000c30 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e057      	b.n	80017a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <HAL_RCC_OscConfig+0x4cc>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0f0      	beq.n	80016e0 <HAL_RCC_OscConfig+0x478>
 80016fe:	e04f      	b.n	80017a0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <HAL_RCC_OscConfig+0x4cc>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <HAL_RCC_OscConfig+0x4cc>)
 8001706:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800170a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170c:	f7ff fa90 	bl	8000c30 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001714:	f7ff fa8c 	bl	8000c30 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e03d      	b.n	80017a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001726:	4b03      	ldr	r3, [pc, #12]	; (8001734 <HAL_RCC_OscConfig+0x4cc>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f0      	bne.n	8001714 <HAL_RCC_OscConfig+0x4ac>
 8001732:	e035      	b.n	80017a0 <HAL_RCC_OscConfig+0x538>
 8001734:	40023800 	.word	0x40023800
 8001738:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800173c:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <HAL_RCC_OscConfig+0x544>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d028      	beq.n	800179c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001754:	429a      	cmp	r2, r3
 8001756:	d121      	bne.n	800179c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001762:	429a      	cmp	r2, r3
 8001764:	d11a      	bne.n	800179c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800176c:	4013      	ands	r3, r2
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001772:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001774:	4293      	cmp	r3, r2
 8001776:	d111      	bne.n	800179c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001782:	085b      	lsrs	r3, r3, #1
 8001784:	3b01      	subs	r3, #1
 8001786:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001788:	429a      	cmp	r2, r3
 800178a:	d107      	bne.n	800179c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001796:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001798:	429a      	cmp	r2, r3
 800179a:	d001      	beq.n	80017a0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e000      	b.n	80017a2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800

080017b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d101      	bne.n	80017c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0d0      	b.n	800196a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017c8:	4b6a      	ldr	r3, [pc, #424]	; (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 030f 	and.w	r3, r3, #15
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d910      	bls.n	80017f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d6:	4b67      	ldr	r3, [pc, #412]	; (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f023 020f 	bic.w	r2, r3, #15
 80017de:	4965      	ldr	r1, [pc, #404]	; (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e6:	4b63      	ldr	r3, [pc, #396]	; (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d001      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e0b8      	b.n	800196a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d020      	beq.n	8001846 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001810:	4b59      	ldr	r3, [pc, #356]	; (8001978 <HAL_RCC_ClockConfig+0x1c8>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	4a58      	ldr	r2, [pc, #352]	; (8001978 <HAL_RCC_ClockConfig+0x1c8>)
 8001816:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800181a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0308 	and.w	r3, r3, #8
 8001824:	2b00      	cmp	r3, #0
 8001826:	d005      	beq.n	8001834 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001828:	4b53      	ldr	r3, [pc, #332]	; (8001978 <HAL_RCC_ClockConfig+0x1c8>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	4a52      	ldr	r2, [pc, #328]	; (8001978 <HAL_RCC_ClockConfig+0x1c8>)
 800182e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001832:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001834:	4b50      	ldr	r3, [pc, #320]	; (8001978 <HAL_RCC_ClockConfig+0x1c8>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	494d      	ldr	r1, [pc, #308]	; (8001978 <HAL_RCC_ClockConfig+0x1c8>)
 8001842:	4313      	orrs	r3, r2
 8001844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	d040      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d107      	bne.n	800186a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185a:	4b47      	ldr	r3, [pc, #284]	; (8001978 <HAL_RCC_ClockConfig+0x1c8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d115      	bne.n	8001892 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e07f      	b.n	800196a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d107      	bne.n	8001882 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001872:	4b41      	ldr	r3, [pc, #260]	; (8001978 <HAL_RCC_ClockConfig+0x1c8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d109      	bne.n	8001892 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e073      	b.n	800196a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001882:	4b3d      	ldr	r3, [pc, #244]	; (8001978 <HAL_RCC_ClockConfig+0x1c8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e06b      	b.n	800196a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001892:	4b39      	ldr	r3, [pc, #228]	; (8001978 <HAL_RCC_ClockConfig+0x1c8>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f023 0203 	bic.w	r2, r3, #3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	4936      	ldr	r1, [pc, #216]	; (8001978 <HAL_RCC_ClockConfig+0x1c8>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018a4:	f7ff f9c4 	bl	8000c30 <HAL_GetTick>
 80018a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018aa:	e00a      	b.n	80018c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ac:	f7ff f9c0 	bl	8000c30 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e053      	b.n	800196a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c2:	4b2d      	ldr	r3, [pc, #180]	; (8001978 <HAL_RCC_ClockConfig+0x1c8>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 020c 	and.w	r2, r3, #12
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d1eb      	bne.n	80018ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018d4:	4b27      	ldr	r3, [pc, #156]	; (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 030f 	and.w	r3, r3, #15
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d210      	bcs.n	8001904 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e2:	4b24      	ldr	r3, [pc, #144]	; (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f023 020f 	bic.w	r2, r3, #15
 80018ea:	4922      	ldr	r1, [pc, #136]	; (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f2:	4b20      	ldr	r3, [pc, #128]	; (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d001      	beq.n	8001904 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e032      	b.n	800196a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	d008      	beq.n	8001922 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001910:	4b19      	ldr	r3, [pc, #100]	; (8001978 <HAL_RCC_ClockConfig+0x1c8>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	4916      	ldr	r1, [pc, #88]	; (8001978 <HAL_RCC_ClockConfig+0x1c8>)
 800191e:	4313      	orrs	r3, r2
 8001920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	2b00      	cmp	r3, #0
 800192c:	d009      	beq.n	8001942 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800192e:	4b12      	ldr	r3, [pc, #72]	; (8001978 <HAL_RCC_ClockConfig+0x1c8>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	490e      	ldr	r1, [pc, #56]	; (8001978 <HAL_RCC_ClockConfig+0x1c8>)
 800193e:	4313      	orrs	r3, r2
 8001940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001942:	f000 f821 	bl	8001988 <HAL_RCC_GetSysClockFreq>
 8001946:	4601      	mov	r1, r0
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <HAL_RCC_ClockConfig+0x1c8>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	091b      	lsrs	r3, r3, #4
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	4a0a      	ldr	r2, [pc, #40]	; (800197c <HAL_RCC_ClockConfig+0x1cc>)
 8001954:	5cd3      	ldrb	r3, [r2, r3]
 8001956:	fa21 f303 	lsr.w	r3, r1, r3
 800195a:	4a09      	ldr	r2, [pc, #36]	; (8001980 <HAL_RCC_ClockConfig+0x1d0>)
 800195c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <HAL_RCC_ClockConfig+0x1d4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff f818 	bl	8000998 <HAL_InitTick>

  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40023c00 	.word	0x40023c00
 8001978:	40023800 	.word	0x40023800
 800197c:	080074cc 	.word	0x080074cc
 8001980:	20000000 	.word	0x20000000
 8001984:	20000004 	.word	0x20000004

08001988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	607b      	str	r3, [r7, #4]
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	2300      	movs	r3, #0
 8001998:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800199e:	4b50      	ldr	r3, [pc, #320]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x158>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d007      	beq.n	80019ba <HAL_RCC_GetSysClockFreq+0x32>
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d008      	beq.n	80019c0 <HAL_RCC_GetSysClockFreq+0x38>
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f040 808d 	bne.w	8001ace <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019b4:	4b4b      	ldr	r3, [pc, #300]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80019b6:	60bb      	str	r3, [r7, #8]
      break;
 80019b8:	e08c      	b.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ba:	4b4b      	ldr	r3, [pc, #300]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x160>)
 80019bc:	60bb      	str	r3, [r7, #8]
      break;
 80019be:	e089      	b.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019c0:	4b47      	ldr	r3, [pc, #284]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x158>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019c8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80019ca:	4b45      	ldr	r3, [pc, #276]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x158>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d023      	beq.n	8001a1e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019d6:	4b42      	ldr	r3, [pc, #264]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x158>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	099b      	lsrs	r3, r3, #6
 80019dc:	f04f 0400 	mov.w	r4, #0
 80019e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	ea03 0501 	and.w	r5, r3, r1
 80019ec:	ea04 0602 	and.w	r6, r4, r2
 80019f0:	4a3d      	ldr	r2, [pc, #244]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x160>)
 80019f2:	fb02 f106 	mul.w	r1, r2, r6
 80019f6:	2200      	movs	r2, #0
 80019f8:	fb02 f205 	mul.w	r2, r2, r5
 80019fc:	440a      	add	r2, r1
 80019fe:	493a      	ldr	r1, [pc, #232]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a00:	fba5 0101 	umull	r0, r1, r5, r1
 8001a04:	1853      	adds	r3, r2, r1
 8001a06:	4619      	mov	r1, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f04f 0400 	mov.w	r4, #0
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4623      	mov	r3, r4
 8001a12:	f7fe fc47 	bl	80002a4 <__aeabi_uldivmod>
 8001a16:	4603      	mov	r3, r0
 8001a18:	460c      	mov	r4, r1
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	e049      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a1e:	4b30      	ldr	r3, [pc, #192]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	099b      	lsrs	r3, r3, #6
 8001a24:	f04f 0400 	mov.w	r4, #0
 8001a28:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a2c:	f04f 0200 	mov.w	r2, #0
 8001a30:	ea03 0501 	and.w	r5, r3, r1
 8001a34:	ea04 0602 	and.w	r6, r4, r2
 8001a38:	4629      	mov	r1, r5
 8001a3a:	4632      	mov	r2, r6
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	f04f 0400 	mov.w	r4, #0
 8001a44:	0154      	lsls	r4, r2, #5
 8001a46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a4a:	014b      	lsls	r3, r1, #5
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4622      	mov	r2, r4
 8001a50:	1b49      	subs	r1, r1, r5
 8001a52:	eb62 0206 	sbc.w	r2, r2, r6
 8001a56:	f04f 0300 	mov.w	r3, #0
 8001a5a:	f04f 0400 	mov.w	r4, #0
 8001a5e:	0194      	lsls	r4, r2, #6
 8001a60:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a64:	018b      	lsls	r3, r1, #6
 8001a66:	1a5b      	subs	r3, r3, r1
 8001a68:	eb64 0402 	sbc.w	r4, r4, r2
 8001a6c:	f04f 0100 	mov.w	r1, #0
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	00e2      	lsls	r2, r4, #3
 8001a76:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a7a:	00d9      	lsls	r1, r3, #3
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4614      	mov	r4, r2
 8001a80:	195b      	adds	r3, r3, r5
 8001a82:	eb44 0406 	adc.w	r4, r4, r6
 8001a86:	f04f 0100 	mov.w	r1, #0
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	02a2      	lsls	r2, r4, #10
 8001a90:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a94:	0299      	lsls	r1, r3, #10
 8001a96:	460b      	mov	r3, r1
 8001a98:	4614      	mov	r4, r2
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	4621      	mov	r1, r4
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f04f 0400 	mov.w	r4, #0
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4623      	mov	r3, r4
 8001aa8:	f7fe fbfc 	bl	80002a4 <__aeabi_uldivmod>
 8001aac:	4603      	mov	r3, r0
 8001aae:	460c      	mov	r4, r1
 8001ab0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	0c1b      	lsrs	r3, r3, #16
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	3301      	adds	r3, #1
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aca:	60bb      	str	r3, [r7, #8]
      break;
 8001acc:	e002      	b.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ace:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001ad0:	60bb      	str	r3, [r7, #8]
      break;
 8001ad2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ad4:	68bb      	ldr	r3, [r7, #8]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	00f42400 	.word	0x00f42400
 8001ae8:	017d7840 	.word	0x017d7840

08001aec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af0:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000000 	.word	0x20000000

08001b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b08:	f7ff fff0 	bl	8001aec <HAL_RCC_GetHCLKFreq>
 8001b0c:	4601      	mov	r1, r0
 8001b0e:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	0a9b      	lsrs	r3, r3, #10
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	4a03      	ldr	r2, [pc, #12]	; (8001b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b1a:	5cd3      	ldrb	r3, [r2, r3]
 8001b1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40023800 	.word	0x40023800
 8001b28:	080074dc 	.word	0x080074dc

08001b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b30:	f7ff ffdc 	bl	8001aec <HAL_RCC_GetHCLKFreq>
 8001b34:	4601      	mov	r1, r0
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	0b5b      	lsrs	r3, r3, #13
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	4a03      	ldr	r2, [pc, #12]	; (8001b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b42:	5cd3      	ldrb	r3, [r2, r3]
 8001b44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	080074dc 	.word	0x080074dc

08001b54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	220f      	movs	r2, #15
 8001b62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 0203 	and.w	r2, r3, #3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	08db      	lsrs	r3, r3, #3
 8001b8e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b96:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <HAL_RCC_GetClockConfig+0x60>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 020f 	and.w	r2, r3, #15
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	601a      	str	r2, [r3, #0]
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40023c00 	.word	0x40023c00

08001bb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d012      	beq.n	8001c06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001be0:	4b69      	ldr	r3, [pc, #420]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	4a68      	ldr	r2, [pc, #416]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001be6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001bea:	6093      	str	r3, [r2, #8]
 8001bec:	4b66      	ldr	r3, [pc, #408]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf4:	4964      	ldr	r1, [pc, #400]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001c02:	2301      	movs	r3, #1
 8001c04:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d017      	beq.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c12:	4b5d      	ldr	r3, [pc, #372]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c20:	4959      	ldr	r1, [pc, #356]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c30:	d101      	bne.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001c32:	2301      	movs	r3, #1
 8001c34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d017      	beq.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001c4e:	4b4e      	ldr	r3, [pc, #312]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	494a      	ldr	r1, [pc, #296]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c6c:	d101      	bne.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0320 	and.w	r3, r3, #32
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 808b 	beq.w	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c9c:	4b3a      	ldr	r3, [pc, #232]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	4a39      	ldr	r2, [pc, #228]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca8:	4b37      	ldr	r3, [pc, #220]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001cb4:	4b35      	ldr	r3, [pc, #212]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a34      	ldr	r2, [pc, #208]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cc0:	f7fe ffb6 	bl	8000c30 <HAL_GetTick>
 8001cc4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc8:	f7fe ffb2 	bl	8000c30 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	; 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e355      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001cda:	4b2c      	ldr	r3, [pc, #176]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ce6:	4b28      	ldr	r3, [pc, #160]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d035      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d02e      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d04:	4b20      	ldr	r3, [pc, #128]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d0c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d0e:	4b1e      	ldr	r3, [pc, #120]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d12:	4a1d      	ldr	r2, [pc, #116]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d18:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d1a:	4b1b      	ldr	r3, [pc, #108]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1e:	4a1a      	ldr	r2, [pc, #104]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d24:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001d26:	4a18      	ldr	r2, [pc, #96]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001d2c:	4b16      	ldr	r3, [pc, #88]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d114      	bne.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d38:	f7fe ff7a 	bl	8000c30 <HAL_GetTick>
 8001d3c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3e:	e00a      	b.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d40:	f7fe ff76 	bl	8000c30 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e317      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d56:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0ee      	beq.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d6e:	d111      	bne.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001d7e:	400b      	ands	r3, r1
 8001d80:	4901      	ldr	r1, [pc, #4]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	608b      	str	r3, [r1, #8]
 8001d86:	e00b      	b.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40007000 	.word	0x40007000
 8001d90:	0ffffcff 	.word	0x0ffffcff
 8001d94:	4bb0      	ldr	r3, [pc, #704]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	4aaf      	ldr	r2, [pc, #700]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001d9a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001d9e:	6093      	str	r3, [r2, #8]
 8001da0:	4bad      	ldr	r3, [pc, #692]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001da2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dac:	49aa      	ldr	r1, [pc, #680]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0310 	and.w	r3, r3, #16
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d010      	beq.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001dbe:	4ba6      	ldr	r3, [pc, #664]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dc4:	4aa4      	ldr	r2, [pc, #656]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001dc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001dce:	4ba2      	ldr	r3, [pc, #648]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001dd0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd8:	499f      	ldr	r1, [pc, #636]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00a      	beq.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dec:	4b9a      	ldr	r3, [pc, #616]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001dfa:	4997      	ldr	r1, [pc, #604]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00a      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e0e:	4b92      	ldr	r3, [pc, #584]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e1c:	498e      	ldr	r1, [pc, #568]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00a      	beq.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e30:	4b89      	ldr	r3, [pc, #548]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e3e:	4986      	ldr	r1, [pc, #536]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00a      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001e52:	4b81      	ldr	r3, [pc, #516]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e60:	497d      	ldr	r1, [pc, #500]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00a      	beq.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e74:	4b78      	ldr	r3, [pc, #480]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7a:	f023 0203 	bic.w	r2, r3, #3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e82:	4975      	ldr	r1, [pc, #468]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00a      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e96:	4b70      	ldr	r3, [pc, #448]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9c:	f023 020c 	bic.w	r2, r3, #12
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ea4:	496c      	ldr	r1, [pc, #432]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00a      	beq.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001eb8:	4b67      	ldr	r3, [pc, #412]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ebe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec6:	4964      	ldr	r1, [pc, #400]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00a      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001eda:	4b5f      	ldr	r3, [pc, #380]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ee8:	495b      	ldr	r1, [pc, #364]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00a      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001efc:	4b56      	ldr	r3, [pc, #344]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0a:	4953      	ldr	r1, [pc, #332]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00a      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001f1e:	4b4e      	ldr	r3, [pc, #312]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f24:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2c:	494a      	ldr	r1, [pc, #296]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00a      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001f40:	4b45      	ldr	r3, [pc, #276]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4e:	4942      	ldr	r1, [pc, #264]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00a      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001f62:	4b3d      	ldr	r3, [pc, #244]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f70:	4939      	ldr	r1, [pc, #228]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00a      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f84:	4b34      	ldr	r3, [pc, #208]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f92:	4931      	ldr	r1, [pc, #196]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d011      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001fa6:	4b2c      	ldr	r3, [pc, #176]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fb4:	4928      	ldr	r1, [pc, #160]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fc4:	d101      	bne.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00a      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fe6:	4b1c      	ldr	r3, [pc, #112]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ff4:	4918      	ldr	r1, [pc, #96]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00b      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002008:	4b13      	ldr	r3, [pc, #76]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800200a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002018:	490f      	ldr	r1, [pc, #60]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800201a:	4313      	orrs	r3, r2
 800201c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d005      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800202e:	f040 80d8 	bne.w	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a08      	ldr	r2, [pc, #32]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002038:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800203c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800203e:	f7fe fdf7 	bl	8000c30 <HAL_GetTick>
 8002042:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002044:	e00a      	b.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002046:	f7fe fdf3 	bl	8000c30 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b64      	cmp	r3, #100	; 0x64
 8002052:	d903      	bls.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e196      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8002058:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800205c:	4b6c      	ldr	r3, [pc, #432]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1ee      	bne.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	d021      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002078:	2b00      	cmp	r3, #0
 800207a:	d11d      	bne.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800207c:	4b64      	ldr	r3, [pc, #400]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800207e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002082:	0c1b      	lsrs	r3, r3, #16
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800208a:	4b61      	ldr	r3, [pc, #388]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800208c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002090:	0e1b      	lsrs	r3, r3, #24
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	019a      	lsls	r2, r3, #6
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	041b      	lsls	r3, r3, #16
 80020a2:	431a      	orrs	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	061b      	lsls	r3, r3, #24
 80020a8:	431a      	orrs	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	071b      	lsls	r3, r3, #28
 80020b0:	4957      	ldr	r1, [pc, #348]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d004      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x516>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020cc:	d00a      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d02e      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020e2:	d129      	bne.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80020e4:	4b4a      	ldr	r3, [pc, #296]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80020e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020ea:	0c1b      	lsrs	r3, r3, #16
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80020f2:	4b47      	ldr	r3, [pc, #284]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80020f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020f8:	0f1b      	lsrs	r3, r3, #28
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	019a      	lsls	r2, r3, #6
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	041b      	lsls	r3, r3, #16
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	061b      	lsls	r3, r3, #24
 8002112:	431a      	orrs	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	071b      	lsls	r3, r3, #28
 8002118:	493d      	ldr	r1, [pc, #244]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800211a:	4313      	orrs	r3, r2
 800211c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002120:	4b3b      	ldr	r3, [pc, #236]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002122:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002126:	f023 021f 	bic.w	r2, r3, #31
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	3b01      	subs	r3, #1
 8002130:	4937      	ldr	r1, [pc, #220]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002132:	4313      	orrs	r3, r2
 8002134:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d01d      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002144:	4b32      	ldr	r3, [pc, #200]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002146:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800214a:	0e1b      	lsrs	r3, r3, #24
 800214c:	f003 030f 	and.w	r3, r3, #15
 8002150:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002152:	4b2f      	ldr	r3, [pc, #188]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002158:	0f1b      	lsrs	r3, r3, #28
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	019a      	lsls	r2, r3, #6
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	041b      	lsls	r3, r3, #16
 800216c:	431a      	orrs	r2, r3
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	061b      	lsls	r3, r3, #24
 8002172:	431a      	orrs	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	071b      	lsls	r3, r3, #28
 8002178:	4925      	ldr	r1, [pc, #148]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800217a:	4313      	orrs	r3, r2
 800217c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d011      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	019a      	lsls	r2, r3, #6
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	041b      	lsls	r3, r3, #16
 8002198:	431a      	orrs	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	061b      	lsls	r3, r3, #24
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	071b      	lsls	r3, r3, #28
 80021a8:	4919      	ldr	r1, [pc, #100]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80021b0:	4b17      	ldr	r3, [pc, #92]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a16      	ldr	r2, [pc, #88]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80021b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021bc:	f7fe fd38 	bl	8000c30 <HAL_GetTick>
 80021c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80021c4:	f7fe fd34 	bl	8000c30 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b64      	cmp	r3, #100	; 0x64
 80021d0:	d901      	bls.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e0d7      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021d6:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f0      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	f040 80cd 	bne.w	8002384 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80021ea:	4b09      	ldr	r3, [pc, #36]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a08      	ldr	r2, [pc, #32]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80021f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021f6:	f7fe fd1b 	bl	8000c30 <HAL_GetTick>
 80021fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80021fc:	e00a      	b.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80021fe:	f7fe fd17 	bl	8000c30 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b64      	cmp	r3, #100	; 0x64
 800220a:	d903      	bls.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e0ba      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8002210:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002214:	4b5e      	ldr	r3, [pc, #376]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800221c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002220:	d0ed      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002232:	2b00      	cmp	r3, #0
 8002234:	d009      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800223e:	2b00      	cmp	r3, #0
 8002240:	d02e      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	2b00      	cmp	r3, #0
 8002248:	d12a      	bne.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800224a:	4b51      	ldr	r3, [pc, #324]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800224c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002250:	0c1b      	lsrs	r3, r3, #16
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002258:	4b4d      	ldr	r3, [pc, #308]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225e:	0f1b      	lsrs	r3, r3, #28
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	019a      	lsls	r2, r3, #6
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	041b      	lsls	r3, r3, #16
 8002270:	431a      	orrs	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	061b      	lsls	r3, r3, #24
 8002278:	431a      	orrs	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	071b      	lsls	r3, r3, #28
 800227e:	4944      	ldr	r1, [pc, #272]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002280:	4313      	orrs	r3, r2
 8002282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002286:	4b42      	ldr	r3, [pc, #264]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002288:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800228c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002294:	3b01      	subs	r3, #1
 8002296:	021b      	lsls	r3, r3, #8
 8002298:	493d      	ldr	r1, [pc, #244]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800229a:	4313      	orrs	r3, r2
 800229c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d022      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022b4:	d11d      	bne.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80022b6:	4b36      	ldr	r3, [pc, #216]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80022b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022bc:	0e1b      	lsrs	r3, r3, #24
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80022c4:	4b32      	ldr	r3, [pc, #200]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ca:	0f1b      	lsrs	r3, r3, #28
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	019a      	lsls	r2, r3, #6
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	041b      	lsls	r3, r3, #16
 80022de:	431a      	orrs	r2, r3
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	061b      	lsls	r3, r3, #24
 80022e4:	431a      	orrs	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	071b      	lsls	r3, r3, #28
 80022ea:	4929      	ldr	r1, [pc, #164]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d028      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80022fe:	4b24      	ldr	r3, [pc, #144]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002304:	0e1b      	lsrs	r3, r3, #24
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800230c:	4b20      	ldr	r3, [pc, #128]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800230e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002312:	0c1b      	lsrs	r3, r3, #16
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	019a      	lsls	r2, r3, #6
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	041b      	lsls	r3, r3, #16
 8002324:	431a      	orrs	r2, r3
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	061b      	lsls	r3, r3, #24
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	071b      	lsls	r3, r3, #28
 8002332:	4917      	ldr	r1, [pc, #92]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800233c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002340:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002348:	4911      	ldr	r1, [pc, #68]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800234a:	4313      	orrs	r3, r2
 800234c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002350:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0e      	ldr	r2, [pc, #56]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800235a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800235c:	f7fe fc68 	bl	8000c30 <HAL_GetTick>
 8002360:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002364:	f7fe fc64 	bl	8000c30 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b64      	cmp	r3, #100	; 0x64
 8002370:	d901      	bls.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e007      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800237e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002382:	d1ef      	bne.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3720      	adds	r7, #32
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40023800 	.word	0x40023800

08002394 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e01d      	b.n	80023e2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d106      	bne.n	80023c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f815 	bl	80023ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3304      	adds	r3, #4
 80023d0:	4619      	mov	r1, r3
 80023d2:	4610      	mov	r0, r2
 80023d4:	f000 f986 	bl	80026e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
	...

08002400 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0201 	orr.w	r2, r2, #1
 8002416:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <HAL_TIM_Base_Start_IT+0x50>)
 8002420:	4013      	ands	r3, r2
 8002422:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2b06      	cmp	r3, #6
 8002428:	d00b      	beq.n	8002442 <HAL_TIM_Base_Start_IT+0x42>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002430:	d007      	beq.n	8002442 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 0201 	orr.w	r2, r2, #1
 8002440:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	00010007 	.word	0x00010007

08002454 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b02      	cmp	r3, #2
 8002468:	d122      	bne.n	80024b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b02      	cmp	r3, #2
 8002476:	d11b      	bne.n	80024b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f06f 0202 	mvn.w	r2, #2
 8002480:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f905 	bl	80026a6 <HAL_TIM_IC_CaptureCallback>
 800249c:	e005      	b.n	80024aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f8f7 	bl	8002692 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f908 	bl	80026ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f003 0304 	and.w	r3, r3, #4
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d122      	bne.n	8002504 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d11b      	bne.n	8002504 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f06f 0204 	mvn.w	r2, #4
 80024d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2202      	movs	r2, #2
 80024da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f8db 	bl	80026a6 <HAL_TIM_IC_CaptureCallback>
 80024f0:	e005      	b.n	80024fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f8cd 	bl	8002692 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 f8de 	bl	80026ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b08      	cmp	r3, #8
 8002510:	d122      	bne.n	8002558 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	2b08      	cmp	r3, #8
 800251e:	d11b      	bne.n	8002558 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f06f 0208 	mvn.w	r2, #8
 8002528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2204      	movs	r2, #4
 800252e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f8b1 	bl	80026a6 <HAL_TIM_IC_CaptureCallback>
 8002544:	e005      	b.n	8002552 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f8a3 	bl	8002692 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 f8b4 	bl	80026ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	f003 0310 	and.w	r3, r3, #16
 8002562:	2b10      	cmp	r3, #16
 8002564:	d122      	bne.n	80025ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f003 0310 	and.w	r3, r3, #16
 8002570:	2b10      	cmp	r3, #16
 8002572:	d11b      	bne.n	80025ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f06f 0210 	mvn.w	r2, #16
 800257c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2208      	movs	r2, #8
 8002582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f887 	bl	80026a6 <HAL_TIM_IC_CaptureCallback>
 8002598:	e005      	b.n	80025a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f879 	bl	8002692 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 f88a 	bl	80026ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d10e      	bne.n	80025d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d107      	bne.n	80025d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f06f 0201 	mvn.w	r2, #1
 80025d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7fe f9a2 	bl	800091c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e2:	2b80      	cmp	r3, #128	; 0x80
 80025e4:	d10e      	bne.n	8002604 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f0:	2b80      	cmp	r3, #128	; 0x80
 80025f2:	d107      	bne.n	8002604 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f91a 	bl	8002838 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002612:	d10e      	bne.n	8002632 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261e:	2b80      	cmp	r3, #128	; 0x80
 8002620:	d107      	bne.n	8002632 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800262a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f90d 	bl	800284c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263c:	2b40      	cmp	r3, #64	; 0x40
 800263e:	d10e      	bne.n	800265e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264a:	2b40      	cmp	r3, #64	; 0x40
 800264c:	d107      	bne.n	800265e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f838 	bl	80026ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	f003 0320 	and.w	r3, r3, #32
 8002668:	2b20      	cmp	r3, #32
 800266a:	d10e      	bne.n	800268a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f003 0320 	and.w	r3, r3, #32
 8002676:	2b20      	cmp	r3, #32
 8002678:	d107      	bne.n	800268a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f06f 0220 	mvn.w	r2, #32
 8002682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f8cd 	bl	8002824 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
	...

080026e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a40      	ldr	r2, [pc, #256]	; (80027f8 <TIM_Base_SetConfig+0x114>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d013      	beq.n	8002724 <TIM_Base_SetConfig+0x40>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002702:	d00f      	beq.n	8002724 <TIM_Base_SetConfig+0x40>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a3d      	ldr	r2, [pc, #244]	; (80027fc <TIM_Base_SetConfig+0x118>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d00b      	beq.n	8002724 <TIM_Base_SetConfig+0x40>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a3c      	ldr	r2, [pc, #240]	; (8002800 <TIM_Base_SetConfig+0x11c>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d007      	beq.n	8002724 <TIM_Base_SetConfig+0x40>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a3b      	ldr	r2, [pc, #236]	; (8002804 <TIM_Base_SetConfig+0x120>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d003      	beq.n	8002724 <TIM_Base_SetConfig+0x40>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a3a      	ldr	r2, [pc, #232]	; (8002808 <TIM_Base_SetConfig+0x124>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d108      	bne.n	8002736 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800272a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4313      	orrs	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a2f      	ldr	r2, [pc, #188]	; (80027f8 <TIM_Base_SetConfig+0x114>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d02b      	beq.n	8002796 <TIM_Base_SetConfig+0xb2>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002744:	d027      	beq.n	8002796 <TIM_Base_SetConfig+0xb2>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a2c      	ldr	r2, [pc, #176]	; (80027fc <TIM_Base_SetConfig+0x118>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d023      	beq.n	8002796 <TIM_Base_SetConfig+0xb2>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a2b      	ldr	r2, [pc, #172]	; (8002800 <TIM_Base_SetConfig+0x11c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d01f      	beq.n	8002796 <TIM_Base_SetConfig+0xb2>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a2a      	ldr	r2, [pc, #168]	; (8002804 <TIM_Base_SetConfig+0x120>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d01b      	beq.n	8002796 <TIM_Base_SetConfig+0xb2>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a29      	ldr	r2, [pc, #164]	; (8002808 <TIM_Base_SetConfig+0x124>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d017      	beq.n	8002796 <TIM_Base_SetConfig+0xb2>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a28      	ldr	r2, [pc, #160]	; (800280c <TIM_Base_SetConfig+0x128>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d013      	beq.n	8002796 <TIM_Base_SetConfig+0xb2>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a27      	ldr	r2, [pc, #156]	; (8002810 <TIM_Base_SetConfig+0x12c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d00f      	beq.n	8002796 <TIM_Base_SetConfig+0xb2>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a26      	ldr	r2, [pc, #152]	; (8002814 <TIM_Base_SetConfig+0x130>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d00b      	beq.n	8002796 <TIM_Base_SetConfig+0xb2>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a25      	ldr	r2, [pc, #148]	; (8002818 <TIM_Base_SetConfig+0x134>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d007      	beq.n	8002796 <TIM_Base_SetConfig+0xb2>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a24      	ldr	r2, [pc, #144]	; (800281c <TIM_Base_SetConfig+0x138>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d003      	beq.n	8002796 <TIM_Base_SetConfig+0xb2>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a23      	ldr	r2, [pc, #140]	; (8002820 <TIM_Base_SetConfig+0x13c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d108      	bne.n	80027a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800279c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a0a      	ldr	r2, [pc, #40]	; (80027f8 <TIM_Base_SetConfig+0x114>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d003      	beq.n	80027dc <TIM_Base_SetConfig+0xf8>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a0c      	ldr	r2, [pc, #48]	; (8002808 <TIM_Base_SetConfig+0x124>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d103      	bne.n	80027e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	615a      	str	r2, [r3, #20]
}
 80027ea:	bf00      	nop
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40010000 	.word	0x40010000
 80027fc:	40000400 	.word	0x40000400
 8002800:	40000800 	.word	0x40000800
 8002804:	40000c00 	.word	0x40000c00
 8002808:	40010400 	.word	0x40010400
 800280c:	40014000 	.word	0x40014000
 8002810:	40014400 	.word	0x40014400
 8002814:	40014800 	.word	0x40014800
 8002818:	40001800 	.word	0x40001800
 800281c:	40001c00 	.word	0x40001c00
 8002820:	40002000 	.word	0x40002000

08002824 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e040      	b.n	80028f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002876:	2b00      	cmp	r3, #0
 8002878:	d106      	bne.n	8002888 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7fe f946 	bl	8000b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2224      	movs	r2, #36	; 0x24
 800288c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0201 	bic.w	r2, r2, #1
 800289c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f82c 	bl	80028fc <UART_SetConfig>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e022      	b.n	80028f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d002      	beq.n	80028bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 faca 	bl	8002e50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0201 	orr.w	r2, r2, #1
 80028ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 fb51 	bl	8002f94 <UART_CheckIdleState>
 80028f2:	4603      	mov	r3, r0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b088      	sub	sp, #32
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002904:	2300      	movs	r3, #0
 8002906:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002908:	2300      	movs	r3, #0
 800290a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	431a      	orrs	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	4313      	orrs	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	4bb1      	ldr	r3, [pc, #708]	; (8002bf0 <UART_SetConfig+0x2f4>)
 800292c:	4013      	ands	r3, r2
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6812      	ldr	r2, [r2, #0]
 8002932:	6939      	ldr	r1, [r7, #16]
 8002934:	430b      	orrs	r3, r1
 8002936:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	4313      	orrs	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	430a      	orrs	r2, r1
 8002970:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a9f      	ldr	r2, [pc, #636]	; (8002bf4 <UART_SetConfig+0x2f8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d121      	bne.n	80029c0 <UART_SetConfig+0xc4>
 800297c:	4b9e      	ldr	r3, [pc, #632]	; (8002bf8 <UART_SetConfig+0x2fc>)
 800297e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	2b03      	cmp	r3, #3
 8002988:	d816      	bhi.n	80029b8 <UART_SetConfig+0xbc>
 800298a:	a201      	add	r2, pc, #4	; (adr r2, 8002990 <UART_SetConfig+0x94>)
 800298c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002990:	080029a1 	.word	0x080029a1
 8002994:	080029ad 	.word	0x080029ad
 8002998:	080029a7 	.word	0x080029a7
 800299c:	080029b3 	.word	0x080029b3
 80029a0:	2301      	movs	r3, #1
 80029a2:	77fb      	strb	r3, [r7, #31]
 80029a4:	e151      	b.n	8002c4a <UART_SetConfig+0x34e>
 80029a6:	2302      	movs	r3, #2
 80029a8:	77fb      	strb	r3, [r7, #31]
 80029aa:	e14e      	b.n	8002c4a <UART_SetConfig+0x34e>
 80029ac:	2304      	movs	r3, #4
 80029ae:	77fb      	strb	r3, [r7, #31]
 80029b0:	e14b      	b.n	8002c4a <UART_SetConfig+0x34e>
 80029b2:	2308      	movs	r3, #8
 80029b4:	77fb      	strb	r3, [r7, #31]
 80029b6:	e148      	b.n	8002c4a <UART_SetConfig+0x34e>
 80029b8:	2310      	movs	r3, #16
 80029ba:	77fb      	strb	r3, [r7, #31]
 80029bc:	bf00      	nop
 80029be:	e144      	b.n	8002c4a <UART_SetConfig+0x34e>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a8d      	ldr	r2, [pc, #564]	; (8002bfc <UART_SetConfig+0x300>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d134      	bne.n	8002a34 <UART_SetConfig+0x138>
 80029ca:	4b8b      	ldr	r3, [pc, #556]	; (8002bf8 <UART_SetConfig+0x2fc>)
 80029cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d0:	f003 030c 	and.w	r3, r3, #12
 80029d4:	2b0c      	cmp	r3, #12
 80029d6:	d829      	bhi.n	8002a2c <UART_SetConfig+0x130>
 80029d8:	a201      	add	r2, pc, #4	; (adr r2, 80029e0 <UART_SetConfig+0xe4>)
 80029da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029de:	bf00      	nop
 80029e0:	08002a15 	.word	0x08002a15
 80029e4:	08002a2d 	.word	0x08002a2d
 80029e8:	08002a2d 	.word	0x08002a2d
 80029ec:	08002a2d 	.word	0x08002a2d
 80029f0:	08002a21 	.word	0x08002a21
 80029f4:	08002a2d 	.word	0x08002a2d
 80029f8:	08002a2d 	.word	0x08002a2d
 80029fc:	08002a2d 	.word	0x08002a2d
 8002a00:	08002a1b 	.word	0x08002a1b
 8002a04:	08002a2d 	.word	0x08002a2d
 8002a08:	08002a2d 	.word	0x08002a2d
 8002a0c:	08002a2d 	.word	0x08002a2d
 8002a10:	08002a27 	.word	0x08002a27
 8002a14:	2300      	movs	r3, #0
 8002a16:	77fb      	strb	r3, [r7, #31]
 8002a18:	e117      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	77fb      	strb	r3, [r7, #31]
 8002a1e:	e114      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002a20:	2304      	movs	r3, #4
 8002a22:	77fb      	strb	r3, [r7, #31]
 8002a24:	e111      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002a26:	2308      	movs	r3, #8
 8002a28:	77fb      	strb	r3, [r7, #31]
 8002a2a:	e10e      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002a2c:	2310      	movs	r3, #16
 8002a2e:	77fb      	strb	r3, [r7, #31]
 8002a30:	bf00      	nop
 8002a32:	e10a      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a71      	ldr	r2, [pc, #452]	; (8002c00 <UART_SetConfig+0x304>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d120      	bne.n	8002a80 <UART_SetConfig+0x184>
 8002a3e:	4b6e      	ldr	r3, [pc, #440]	; (8002bf8 <UART_SetConfig+0x2fc>)
 8002a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a44:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002a48:	2b10      	cmp	r3, #16
 8002a4a:	d00f      	beq.n	8002a6c <UART_SetConfig+0x170>
 8002a4c:	2b10      	cmp	r3, #16
 8002a4e:	d802      	bhi.n	8002a56 <UART_SetConfig+0x15a>
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d005      	beq.n	8002a60 <UART_SetConfig+0x164>
 8002a54:	e010      	b.n	8002a78 <UART_SetConfig+0x17c>
 8002a56:	2b20      	cmp	r3, #32
 8002a58:	d005      	beq.n	8002a66 <UART_SetConfig+0x16a>
 8002a5a:	2b30      	cmp	r3, #48	; 0x30
 8002a5c:	d009      	beq.n	8002a72 <UART_SetConfig+0x176>
 8002a5e:	e00b      	b.n	8002a78 <UART_SetConfig+0x17c>
 8002a60:	2300      	movs	r3, #0
 8002a62:	77fb      	strb	r3, [r7, #31]
 8002a64:	e0f1      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002a66:	2302      	movs	r3, #2
 8002a68:	77fb      	strb	r3, [r7, #31]
 8002a6a:	e0ee      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002a6c:	2304      	movs	r3, #4
 8002a6e:	77fb      	strb	r3, [r7, #31]
 8002a70:	e0eb      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002a72:	2308      	movs	r3, #8
 8002a74:	77fb      	strb	r3, [r7, #31]
 8002a76:	e0e8      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002a78:	2310      	movs	r3, #16
 8002a7a:	77fb      	strb	r3, [r7, #31]
 8002a7c:	bf00      	nop
 8002a7e:	e0e4      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a5f      	ldr	r2, [pc, #380]	; (8002c04 <UART_SetConfig+0x308>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d120      	bne.n	8002acc <UART_SetConfig+0x1d0>
 8002a8a:	4b5b      	ldr	r3, [pc, #364]	; (8002bf8 <UART_SetConfig+0x2fc>)
 8002a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a90:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002a94:	2b40      	cmp	r3, #64	; 0x40
 8002a96:	d00f      	beq.n	8002ab8 <UART_SetConfig+0x1bc>
 8002a98:	2b40      	cmp	r3, #64	; 0x40
 8002a9a:	d802      	bhi.n	8002aa2 <UART_SetConfig+0x1a6>
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <UART_SetConfig+0x1b0>
 8002aa0:	e010      	b.n	8002ac4 <UART_SetConfig+0x1c8>
 8002aa2:	2b80      	cmp	r3, #128	; 0x80
 8002aa4:	d005      	beq.n	8002ab2 <UART_SetConfig+0x1b6>
 8002aa6:	2bc0      	cmp	r3, #192	; 0xc0
 8002aa8:	d009      	beq.n	8002abe <UART_SetConfig+0x1c2>
 8002aaa:	e00b      	b.n	8002ac4 <UART_SetConfig+0x1c8>
 8002aac:	2300      	movs	r3, #0
 8002aae:	77fb      	strb	r3, [r7, #31]
 8002ab0:	e0cb      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	77fb      	strb	r3, [r7, #31]
 8002ab6:	e0c8      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002ab8:	2304      	movs	r3, #4
 8002aba:	77fb      	strb	r3, [r7, #31]
 8002abc:	e0c5      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002abe:	2308      	movs	r3, #8
 8002ac0:	77fb      	strb	r3, [r7, #31]
 8002ac2:	e0c2      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002ac4:	2310      	movs	r3, #16
 8002ac6:	77fb      	strb	r3, [r7, #31]
 8002ac8:	bf00      	nop
 8002aca:	e0be      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a4d      	ldr	r2, [pc, #308]	; (8002c08 <UART_SetConfig+0x30c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d124      	bne.n	8002b20 <UART_SetConfig+0x224>
 8002ad6:	4b48      	ldr	r3, [pc, #288]	; (8002bf8 <UART_SetConfig+0x2fc>)
 8002ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002adc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ae4:	d012      	beq.n	8002b0c <UART_SetConfig+0x210>
 8002ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aea:	d802      	bhi.n	8002af2 <UART_SetConfig+0x1f6>
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d007      	beq.n	8002b00 <UART_SetConfig+0x204>
 8002af0:	e012      	b.n	8002b18 <UART_SetConfig+0x21c>
 8002af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002af6:	d006      	beq.n	8002b06 <UART_SetConfig+0x20a>
 8002af8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002afc:	d009      	beq.n	8002b12 <UART_SetConfig+0x216>
 8002afe:	e00b      	b.n	8002b18 <UART_SetConfig+0x21c>
 8002b00:	2300      	movs	r3, #0
 8002b02:	77fb      	strb	r3, [r7, #31]
 8002b04:	e0a1      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002b06:	2302      	movs	r3, #2
 8002b08:	77fb      	strb	r3, [r7, #31]
 8002b0a:	e09e      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002b0c:	2304      	movs	r3, #4
 8002b0e:	77fb      	strb	r3, [r7, #31]
 8002b10:	e09b      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002b12:	2308      	movs	r3, #8
 8002b14:	77fb      	strb	r3, [r7, #31]
 8002b16:	e098      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002b18:	2310      	movs	r3, #16
 8002b1a:	77fb      	strb	r3, [r7, #31]
 8002b1c:	bf00      	nop
 8002b1e:	e094      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a39      	ldr	r2, [pc, #228]	; (8002c0c <UART_SetConfig+0x310>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d124      	bne.n	8002b74 <UART_SetConfig+0x278>
 8002b2a:	4b33      	ldr	r3, [pc, #204]	; (8002bf8 <UART_SetConfig+0x2fc>)
 8002b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b38:	d012      	beq.n	8002b60 <UART_SetConfig+0x264>
 8002b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b3e:	d802      	bhi.n	8002b46 <UART_SetConfig+0x24a>
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d007      	beq.n	8002b54 <UART_SetConfig+0x258>
 8002b44:	e012      	b.n	8002b6c <UART_SetConfig+0x270>
 8002b46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b4a:	d006      	beq.n	8002b5a <UART_SetConfig+0x25e>
 8002b4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b50:	d009      	beq.n	8002b66 <UART_SetConfig+0x26a>
 8002b52:	e00b      	b.n	8002b6c <UART_SetConfig+0x270>
 8002b54:	2301      	movs	r3, #1
 8002b56:	77fb      	strb	r3, [r7, #31]
 8002b58:	e077      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	77fb      	strb	r3, [r7, #31]
 8002b5e:	e074      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002b60:	2304      	movs	r3, #4
 8002b62:	77fb      	strb	r3, [r7, #31]
 8002b64:	e071      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002b66:	2308      	movs	r3, #8
 8002b68:	77fb      	strb	r3, [r7, #31]
 8002b6a:	e06e      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002b6c:	2310      	movs	r3, #16
 8002b6e:	77fb      	strb	r3, [r7, #31]
 8002b70:	bf00      	nop
 8002b72:	e06a      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a25      	ldr	r2, [pc, #148]	; (8002c10 <UART_SetConfig+0x314>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d124      	bne.n	8002bc8 <UART_SetConfig+0x2cc>
 8002b7e:	4b1e      	ldr	r3, [pc, #120]	; (8002bf8 <UART_SetConfig+0x2fc>)
 8002b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b84:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b8c:	d012      	beq.n	8002bb4 <UART_SetConfig+0x2b8>
 8002b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b92:	d802      	bhi.n	8002b9a <UART_SetConfig+0x29e>
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d007      	beq.n	8002ba8 <UART_SetConfig+0x2ac>
 8002b98:	e012      	b.n	8002bc0 <UART_SetConfig+0x2c4>
 8002b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b9e:	d006      	beq.n	8002bae <UART_SetConfig+0x2b2>
 8002ba0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ba4:	d009      	beq.n	8002bba <UART_SetConfig+0x2be>
 8002ba6:	e00b      	b.n	8002bc0 <UART_SetConfig+0x2c4>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	77fb      	strb	r3, [r7, #31]
 8002bac:	e04d      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	77fb      	strb	r3, [r7, #31]
 8002bb2:	e04a      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002bb4:	2304      	movs	r3, #4
 8002bb6:	77fb      	strb	r3, [r7, #31]
 8002bb8:	e047      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002bba:	2308      	movs	r3, #8
 8002bbc:	77fb      	strb	r3, [r7, #31]
 8002bbe:	e044      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002bc0:	2310      	movs	r3, #16
 8002bc2:	77fb      	strb	r3, [r7, #31]
 8002bc4:	bf00      	nop
 8002bc6:	e040      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a11      	ldr	r2, [pc, #68]	; (8002c14 <UART_SetConfig+0x318>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d139      	bne.n	8002c46 <UART_SetConfig+0x34a>
 8002bd2:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <UART_SetConfig+0x2fc>)
 8002bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002bdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002be0:	d027      	beq.n	8002c32 <UART_SetConfig+0x336>
 8002be2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002be6:	d817      	bhi.n	8002c18 <UART_SetConfig+0x31c>
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d01c      	beq.n	8002c26 <UART_SetConfig+0x32a>
 8002bec:	e027      	b.n	8002c3e <UART_SetConfig+0x342>
 8002bee:	bf00      	nop
 8002bf0:	efff69f3 	.word	0xefff69f3
 8002bf4:	40011000 	.word	0x40011000
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	40004400 	.word	0x40004400
 8002c00:	40004800 	.word	0x40004800
 8002c04:	40004c00 	.word	0x40004c00
 8002c08:	40005000 	.word	0x40005000
 8002c0c:	40011400 	.word	0x40011400
 8002c10:	40007800 	.word	0x40007800
 8002c14:	40007c00 	.word	0x40007c00
 8002c18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c1c:	d006      	beq.n	8002c2c <UART_SetConfig+0x330>
 8002c1e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002c22:	d009      	beq.n	8002c38 <UART_SetConfig+0x33c>
 8002c24:	e00b      	b.n	8002c3e <UART_SetConfig+0x342>
 8002c26:	2300      	movs	r3, #0
 8002c28:	77fb      	strb	r3, [r7, #31]
 8002c2a:	e00e      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	77fb      	strb	r3, [r7, #31]
 8002c30:	e00b      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002c32:	2304      	movs	r3, #4
 8002c34:	77fb      	strb	r3, [r7, #31]
 8002c36:	e008      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002c38:	2308      	movs	r3, #8
 8002c3a:	77fb      	strb	r3, [r7, #31]
 8002c3c:	e005      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002c3e:	2310      	movs	r3, #16
 8002c40:	77fb      	strb	r3, [r7, #31]
 8002c42:	bf00      	nop
 8002c44:	e001      	b.n	8002c4a <UART_SetConfig+0x34e>
 8002c46:	2310      	movs	r3, #16
 8002c48:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c52:	d17f      	bne.n	8002d54 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8002c54:	7ffb      	ldrb	r3, [r7, #31]
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d85c      	bhi.n	8002d14 <UART_SetConfig+0x418>
 8002c5a:	a201      	add	r2, pc, #4	; (adr r2, 8002c60 <UART_SetConfig+0x364>)
 8002c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c60:	08002c85 	.word	0x08002c85
 8002c64:	08002ca5 	.word	0x08002ca5
 8002c68:	08002cc5 	.word	0x08002cc5
 8002c6c:	08002d15 	.word	0x08002d15
 8002c70:	08002cdd 	.word	0x08002cdd
 8002c74:	08002d15 	.word	0x08002d15
 8002c78:	08002d15 	.word	0x08002d15
 8002c7c:	08002d15 	.word	0x08002d15
 8002c80:	08002cfd 	.word	0x08002cfd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c84:	f7fe ff3e 	bl	8001b04 <HAL_RCC_GetPCLK1Freq>
 8002c88:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	005a      	lsls	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	085b      	lsrs	r3, r3, #1
 8002c94:	441a      	add	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	61bb      	str	r3, [r7, #24]
        break;
 8002ca2:	e03a      	b.n	8002d1a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ca4:	f7fe ff42 	bl	8001b2c <HAL_RCC_GetPCLK2Freq>
 8002ca8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	005a      	lsls	r2, r3, #1
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	085b      	lsrs	r3, r3, #1
 8002cb4:	441a      	add	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	61bb      	str	r3, [r7, #24]
        break;
 8002cc2:	e02a      	b.n	8002d1a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	085a      	lsrs	r2, r3, #1
 8002cca:	4b5f      	ldr	r3, [pc, #380]	; (8002e48 <UART_SetConfig+0x54c>)
 8002ccc:	4413      	add	r3, r2
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6852      	ldr	r2, [r2, #4]
 8002cd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	61bb      	str	r3, [r7, #24]
        break;
 8002cda:	e01e      	b.n	8002d1a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cdc:	f7fe fe54 	bl	8001988 <HAL_RCC_GetSysClockFreq>
 8002ce0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	005a      	lsls	r2, r3, #1
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	085b      	lsrs	r3, r3, #1
 8002cec:	441a      	add	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	61bb      	str	r3, [r7, #24]
        break;
 8002cfa:	e00e      	b.n	8002d1a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	085b      	lsrs	r3, r3, #1
 8002d02:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	61bb      	str	r3, [r7, #24]
        break;
 8002d12:	e002      	b.n	8002d1a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	75fb      	strb	r3, [r7, #23]
        break;
 8002d18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	2b0f      	cmp	r3, #15
 8002d1e:	d916      	bls.n	8002d4e <UART_SetConfig+0x452>
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d26:	d212      	bcs.n	8002d4e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	f023 030f 	bic.w	r3, r3, #15
 8002d30:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	085b      	lsrs	r3, r3, #1
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	897b      	ldrh	r3, [r7, #10]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	897a      	ldrh	r2, [r7, #10]
 8002d4a:	60da      	str	r2, [r3, #12]
 8002d4c:	e070      	b.n	8002e30 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	75fb      	strb	r3, [r7, #23]
 8002d52:	e06d      	b.n	8002e30 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8002d54:	7ffb      	ldrb	r3, [r7, #31]
 8002d56:	2b08      	cmp	r3, #8
 8002d58:	d859      	bhi.n	8002e0e <UART_SetConfig+0x512>
 8002d5a:	a201      	add	r2, pc, #4	; (adr r2, 8002d60 <UART_SetConfig+0x464>)
 8002d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d60:	08002d85 	.word	0x08002d85
 8002d64:	08002da3 	.word	0x08002da3
 8002d68:	08002dc1 	.word	0x08002dc1
 8002d6c:	08002e0f 	.word	0x08002e0f
 8002d70:	08002dd9 	.word	0x08002dd9
 8002d74:	08002e0f 	.word	0x08002e0f
 8002d78:	08002e0f 	.word	0x08002e0f
 8002d7c:	08002e0f 	.word	0x08002e0f
 8002d80:	08002df7 	.word	0x08002df7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d84:	f7fe febe 	bl	8001b04 <HAL_RCC_GetPCLK1Freq>
 8002d88:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	085a      	lsrs	r2, r3, #1
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	441a      	add	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	61bb      	str	r3, [r7, #24]
        break;
 8002da0:	e038      	b.n	8002e14 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002da2:	f7fe fec3 	bl	8001b2c <HAL_RCC_GetPCLK2Freq>
 8002da6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	085a      	lsrs	r2, r3, #1
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	441a      	add	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	61bb      	str	r3, [r7, #24]
        break;
 8002dbe:	e029      	b.n	8002e14 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	085a      	lsrs	r2, r3, #1
 8002dc6:	4b21      	ldr	r3, [pc, #132]	; (8002e4c <UART_SetConfig+0x550>)
 8002dc8:	4413      	add	r3, r2
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6852      	ldr	r2, [r2, #4]
 8002dce:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	61bb      	str	r3, [r7, #24]
        break;
 8002dd6:	e01d      	b.n	8002e14 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dd8:	f7fe fdd6 	bl	8001988 <HAL_RCC_GetSysClockFreq>
 8002ddc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	085a      	lsrs	r2, r3, #1
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	441a      	add	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	61bb      	str	r3, [r7, #24]
        break;
 8002df4:	e00e      	b.n	8002e14 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	085b      	lsrs	r3, r3, #1
 8002dfc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	61bb      	str	r3, [r7, #24]
        break;
 8002e0c:	e002      	b.n	8002e14 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	75fb      	strb	r3, [r7, #23]
        break;
 8002e12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	2b0f      	cmp	r3, #15
 8002e18:	d908      	bls.n	8002e2c <UART_SetConfig+0x530>
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e20:	d204      	bcs.n	8002e2c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	60da      	str	r2, [r3, #12]
 8002e2a:	e001      	b.n	8002e30 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3720      	adds	r7, #32
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	01e84800 	.word	0x01e84800
 8002e4c:	00f42400 	.word	0x00f42400

08002e50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00a      	beq.n	8002e7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00a      	beq.n	8002ebe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00a      	beq.n	8002ee0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	f003 0310 	and.w	r3, r3, #16
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00a      	beq.n	8002f02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00a      	beq.n	8002f24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d01a      	beq.n	8002f66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f4e:	d10a      	bne.n	8002f66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	605a      	str	r2, [r3, #4]
  }
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af02      	add	r7, sp, #8
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002fa2:	f7fd fe45 	bl	8000c30 <HAL_GetTick>
 8002fa6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b08      	cmp	r3, #8
 8002fb4:	d10e      	bne.n	8002fd4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fb6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f814 	bl	8002ff2 <UART_WaitOnFlagUntilTimeout>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e00a      	b.n	8002fea <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b084      	sub	sp, #16
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	60f8      	str	r0, [r7, #12]
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	603b      	str	r3, [r7, #0]
 8002ffe:	4613      	mov	r3, r2
 8003000:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003002:	e05d      	b.n	80030c0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300a:	d059      	beq.n	80030c0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800300c:	f7fd fe10 	bl	8000c30 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	429a      	cmp	r2, r3
 800301a:	d302      	bcc.n	8003022 <UART_WaitOnFlagUntilTimeout+0x30>
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d11b      	bne.n	800305a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003030:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0201 	bic.w	r2, r2, #1
 8003040:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2220      	movs	r2, #32
 8003046:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e042      	b.n	80030e0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	d02b      	beq.n	80030c0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003076:	d123      	bne.n	80030c0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003080:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003090:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0201 	bic.w	r2, r2, #1
 80030a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2220      	movs	r2, #32
 80030a6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2220      	movs	r2, #32
 80030ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2220      	movs	r2, #32
 80030b2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e00f      	b.n	80030e0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	69da      	ldr	r2, [r3, #28]
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	4013      	ands	r3, r2
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	bf0c      	ite	eq
 80030d0:	2301      	moveq	r3, #1
 80030d2:	2300      	movne	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	461a      	mov	r2, r3
 80030d8:	79fb      	ldrb	r3, [r7, #7]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d092      	beq.n	8003004 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80030f2:	2300      	movs	r3, #0
 80030f4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80030f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030fa:	2b84      	cmp	r3, #132	; 0x84
 80030fc:	d005      	beq.n	800310a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80030fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	4413      	add	r3, r2
 8003106:	3303      	adds	r3, #3
 8003108:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800310a:	68fb      	ldr	r3, [r7, #12]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800311c:	f001 f872 	bl	8004204 <vTaskStartScheduler>
  
  return osOK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	bd80      	pop	{r7, pc}

08003126 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003126:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003128:	b089      	sub	sp, #36	; 0x24
 800312a:	af04      	add	r7, sp, #16
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d020      	beq.n	800317a <osThreadCreate+0x54>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d01c      	beq.n	800317a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685c      	ldr	r4, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681d      	ldr	r5, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691e      	ldr	r6, [r3, #16]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff ffc8 	bl	80030e8 <makeFreeRtosPriority>
 8003158:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003162:	9202      	str	r2, [sp, #8]
 8003164:	9301      	str	r3, [sp, #4]
 8003166:	9100      	str	r1, [sp, #0]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	4632      	mov	r2, r6
 800316c:	4629      	mov	r1, r5
 800316e:	4620      	mov	r0, r4
 8003170:	f000 fe58 	bl	8003e24 <xTaskCreateStatic>
 8003174:	4603      	mov	r3, r0
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	e01c      	b.n	80031b4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685c      	ldr	r4, [r3, #4]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003186:	b29e      	uxth	r6, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff ffaa 	bl	80030e8 <makeFreeRtosPriority>
 8003194:	4602      	mov	r2, r0
 8003196:	f107 030c 	add.w	r3, r7, #12
 800319a:	9301      	str	r3, [sp, #4]
 800319c:	9200      	str	r2, [sp, #0]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	4632      	mov	r2, r6
 80031a2:	4629      	mov	r1, r5
 80031a4:	4620      	mov	r0, r4
 80031a6:	f000 fe9d 	bl	8003ee4 <xTaskCreate>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d001      	beq.n	80031b4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	e000      	b.n	80031b6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80031b4:	68fb      	ldr	r3, [r7, #12]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080031c0 <osThreadYield>:
* @brief  Pass control to next thread that is in state \b READY.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  taskYIELD();
 80031c4:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <osThreadYield+0x20>)
 80031c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	f3bf 8f6f 	isb	sy
  
  return osOK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	e000ed04 	.word	0xe000ed04

080031e4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <osDelay+0x16>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	e000      	b.n	80031fc <osDelay+0x18>
 80031fa:	2301      	movs	r3, #1
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 ffc7 	bl	8004190 <vTaskDelay>
  
  return osOK;
 8003202:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d007      	beq.n	800322c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	4619      	mov	r1, r3
 8003222:	2001      	movs	r0, #1
 8003224:	f000 fa71 	bl	800370a <xQueueCreateMutexStatic>
 8003228:	4603      	mov	r3, r0
 800322a:	e003      	b.n	8003234 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800322c:	2001      	movs	r0, #1
 800322e:	f000 fa54 	bl	80036da <xQueueCreateMutex>
 8003232:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8003234:	4618      	mov	r0, r3
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af02      	add	r7, sp, #8
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d010      	beq.n	8003270 <osSemaphoreCreate+0x34>
    if (count == 1) {
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d10b      	bne.n	800326c <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	2303      	movs	r3, #3
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	4613      	mov	r3, r2
 800325e:	2200      	movs	r2, #0
 8003260:	2100      	movs	r1, #0
 8003262:	2001      	movs	r0, #1
 8003264:	f000 f93c 	bl	80034e0 <xQueueGenericCreateStatic>
 8003268:	4603      	mov	r3, r0
 800326a:	e016      	b.n	800329a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800326c:	2300      	movs	r3, #0
 800326e:	e014      	b.n	800329a <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d110      	bne.n	8003298 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8003276:	2203      	movs	r2, #3
 8003278:	2100      	movs	r1, #0
 800327a:	2001      	movs	r0, #1
 800327c:	f000 f9ad 	bl	80035da <xQueueGenericCreate>
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d005      	beq.n	8003294 <osSemaphoreCreate+0x58>
 8003288:	2300      	movs	r3, #0
 800328a:	2200      	movs	r2, #0
 800328c:	2100      	movs	r1, #0
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 fa56 	bl	8003740 <xQueueGenericSend>
      return sema;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	e000      	b.n	800329a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8003298:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f103 0208 	add.w	r2, r3, #8
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f04f 32ff 	mov.w	r2, #4294967295
 80032ba:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f103 0208 	add.w	r2, r3, #8
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f103 0208 	add.w	r2, r3, #8
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	601a      	str	r2, [r3, #0]
}
 8003338:	bf00      	nop
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335a:	d103      	bne.n	8003364 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	e00c      	b.n	800337e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3308      	adds	r3, #8
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	e002      	b.n	8003372 <vListInsert+0x2e>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	429a      	cmp	r2, r3
 800337c:	d2f6      	bcs.n	800336c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	1c5a      	adds	r2, r3, #1
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	601a      	str	r2, [r3, #0]
}
 80033aa:	bf00      	nop
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80033b6:	b480      	push	{r7}
 80033b8:	b085      	sub	sp, #20
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6892      	ldr	r2, [r2, #8]
 80033cc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6852      	ldr	r2, [r2, #4]
 80033d6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d103      	bne.n	80033ea <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	1e5a      	subs	r2, r3, #1
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10b      	bne.n	8003438 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003424:	b672      	cpsid	i
 8003426:	f383 8811 	msr	BASEPRI, r3
 800342a:	f3bf 8f6f 	isb	sy
 800342e:	f3bf 8f4f 	dsb	sy
 8003432:	b662      	cpsie	i
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	e7fe      	b.n	8003436 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8003438:	f001 fe9e 	bl	8005178 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003444:	68f9      	ldr	r1, [r7, #12]
 8003446:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003448:	fb01 f303 	mul.w	r3, r1, r3
 800344c:	441a      	add	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003468:	3b01      	subs	r3, #1
 800346a:	68f9      	ldr	r1, [r7, #12]
 800346c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800346e:	fb01 f303 	mul.w	r3, r1, r3
 8003472:	441a      	add	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	22ff      	movs	r2, #255	; 0xff
 800347c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	22ff      	movs	r2, #255	; 0xff
 8003484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d114      	bne.n	80034b8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d01a      	beq.n	80034cc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	3310      	adds	r3, #16
 800349a:	4618      	mov	r0, r3
 800349c:	f001 f940 	bl	8004720 <xTaskRemoveFromEventList>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d012      	beq.n	80034cc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80034a6:	4b0d      	ldr	r3, [pc, #52]	; (80034dc <xQueueGenericReset+0xd0>)
 80034a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	f3bf 8f4f 	dsb	sy
 80034b2:	f3bf 8f6f 	isb	sy
 80034b6:	e009      	b.n	80034cc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	3310      	adds	r3, #16
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff fef0 	bl	80032a2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	3324      	adds	r3, #36	; 0x24
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff feeb 	bl	80032a2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80034cc:	f001 fe86 	bl	80051dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80034d0:	2301      	movs	r3, #1
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	e000ed04 	.word	0xe000ed04

080034e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08e      	sub	sp, #56	; 0x38
 80034e4:	af02      	add	r7, sp, #8
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
 80034ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10b      	bne.n	800350c <xQueueGenericCreateStatic+0x2c>
 80034f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f8:	b672      	cpsid	i
 80034fa:	f383 8811 	msr	BASEPRI, r3
 80034fe:	f3bf 8f6f 	isb	sy
 8003502:	f3bf 8f4f 	dsb	sy
 8003506:	b662      	cpsie	i
 8003508:	62bb      	str	r3, [r7, #40]	; 0x28
 800350a:	e7fe      	b.n	800350a <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10b      	bne.n	800352a <xQueueGenericCreateStatic+0x4a>
 8003512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003516:	b672      	cpsid	i
 8003518:	f383 8811 	msr	BASEPRI, r3
 800351c:	f3bf 8f6f 	isb	sy
 8003520:	f3bf 8f4f 	dsb	sy
 8003524:	b662      	cpsie	i
 8003526:	627b      	str	r3, [r7, #36]	; 0x24
 8003528:	e7fe      	b.n	8003528 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d002      	beq.n	8003536 <xQueueGenericCreateStatic+0x56>
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <xQueueGenericCreateStatic+0x5a>
 8003536:	2301      	movs	r3, #1
 8003538:	e000      	b.n	800353c <xQueueGenericCreateStatic+0x5c>
 800353a:	2300      	movs	r3, #0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10b      	bne.n	8003558 <xQueueGenericCreateStatic+0x78>
 8003540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003544:	b672      	cpsid	i
 8003546:	f383 8811 	msr	BASEPRI, r3
 800354a:	f3bf 8f6f 	isb	sy
 800354e:	f3bf 8f4f 	dsb	sy
 8003552:	b662      	cpsie	i
 8003554:	623b      	str	r3, [r7, #32]
 8003556:	e7fe      	b.n	8003556 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d102      	bne.n	8003564 <xQueueGenericCreateStatic+0x84>
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <xQueueGenericCreateStatic+0x88>
 8003564:	2301      	movs	r3, #1
 8003566:	e000      	b.n	800356a <xQueueGenericCreateStatic+0x8a>
 8003568:	2300      	movs	r3, #0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10b      	bne.n	8003586 <xQueueGenericCreateStatic+0xa6>
 800356e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003572:	b672      	cpsid	i
 8003574:	f383 8811 	msr	BASEPRI, r3
 8003578:	f3bf 8f6f 	isb	sy
 800357c:	f3bf 8f4f 	dsb	sy
 8003580:	b662      	cpsie	i
 8003582:	61fb      	str	r3, [r7, #28]
 8003584:	e7fe      	b.n	8003584 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003586:	2348      	movs	r3, #72	; 0x48
 8003588:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2b48      	cmp	r3, #72	; 0x48
 800358e:	d00b      	beq.n	80035a8 <xQueueGenericCreateStatic+0xc8>
 8003590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003594:	b672      	cpsid	i
 8003596:	f383 8811 	msr	BASEPRI, r3
 800359a:	f3bf 8f6f 	isb	sy
 800359e:	f3bf 8f4f 	dsb	sy
 80035a2:	b662      	cpsie	i
 80035a4:	61bb      	str	r3, [r7, #24]
 80035a6:	e7fe      	b.n	80035a6 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80035a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80035ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00d      	beq.n	80035d0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80035b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80035bc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80035c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	4613      	mov	r3, r2
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 f846 	bl	800365c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80035d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3730      	adds	r7, #48	; 0x30
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b08a      	sub	sp, #40	; 0x28
 80035de:	af02      	add	r7, sp, #8
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	4613      	mov	r3, r2
 80035e6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10b      	bne.n	8003606 <xQueueGenericCreate+0x2c>
 80035ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f2:	b672      	cpsid	i
 80035f4:	f383 8811 	msr	BASEPRI, r3
 80035f8:	f3bf 8f6f 	isb	sy
 80035fc:	f3bf 8f4f 	dsb	sy
 8003600:	b662      	cpsie	i
 8003602:	613b      	str	r3, [r7, #16]
 8003604:	e7fe      	b.n	8003604 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d102      	bne.n	8003612 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800360c:	2300      	movs	r3, #0
 800360e:	61fb      	str	r3, [r7, #28]
 8003610:	e004      	b.n	800361c <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	fb02 f303 	mul.w	r3, r2, r3
 800361a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	3348      	adds	r3, #72	; 0x48
 8003620:	4618      	mov	r0, r3
 8003622:	f001 ff23 	bl	800546c <pvPortMalloc>
 8003626:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d011      	beq.n	8003652 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	3348      	adds	r3, #72	; 0x48
 8003636:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003640:	79fa      	ldrb	r2, [r7, #7]
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	4613      	mov	r3, r2
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	68b9      	ldr	r1, [r7, #8]
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 f805 	bl	800365c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003652:	69bb      	ldr	r3, [r7, #24]
	}
 8003654:	4618      	mov	r0, r3
 8003656:	3720      	adds	r7, #32
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
 8003668:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d103      	bne.n	8003678 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	e002      	b.n	800367e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800368a:	2101      	movs	r1, #1
 800368c:	69b8      	ldr	r0, [r7, #24]
 800368e:	f7ff febd 	bl	800340c <xQueueGenericReset>
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	68f9      	ldr	r1, [r7, #12]
 8003698:	2073      	movs	r0, #115	; 0x73
 800369a:	f002 ffb3 	bl	8006604 <SEGGER_SYSVIEW_RecordU32x3>
}
 800369e:	bf00      	nop
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b082      	sub	sp, #8
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00e      	beq.n	80036d2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80036c6:	2300      	movs	r3, #0
 80036c8:	2200      	movs	r2, #0
 80036ca:	2100      	movs	r1, #0
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f837 	bl	8003740 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80036d2:	bf00      	nop
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b086      	sub	sp, #24
 80036de:	af00      	add	r7, sp, #0
 80036e0:	4603      	mov	r3, r0
 80036e2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80036e4:	2301      	movs	r3, #1
 80036e6:	617b      	str	r3, [r7, #20]
 80036e8:	2300      	movs	r3, #0
 80036ea:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80036ec:	79fb      	ldrb	r3, [r7, #7]
 80036ee:	461a      	mov	r2, r3
 80036f0:	6939      	ldr	r1, [r7, #16]
 80036f2:	6978      	ldr	r0, [r7, #20]
 80036f4:	f7ff ff71 	bl	80035da <xQueueGenericCreate>
 80036f8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f7ff ffd3 	bl	80036a6 <prvInitialiseMutex>

		return xNewQueue;
 8003700:	68fb      	ldr	r3, [r7, #12]
	}
 8003702:	4618      	mov	r0, r3
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800370a:	b580      	push	{r7, lr}
 800370c:	b088      	sub	sp, #32
 800370e:	af02      	add	r7, sp, #8
 8003710:	4603      	mov	r3, r0
 8003712:	6039      	str	r1, [r7, #0]
 8003714:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003716:	2301      	movs	r3, #1
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	2300      	movs	r3, #0
 800371c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2200      	movs	r2, #0
 8003726:	6939      	ldr	r1, [r7, #16]
 8003728:	6978      	ldr	r0, [r7, #20]
 800372a:	f7ff fed9 	bl	80034e0 <xQueueGenericCreateStatic>
 800372e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f7ff ffb8 	bl	80036a6 <prvInitialiseMutex>

		return xNewQueue;
 8003736:	68fb      	ldr	r3, [r7, #12]
	}
 8003738:	4618      	mov	r0, r3
 800373a:	3718      	adds	r7, #24
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b090      	sub	sp, #64	; 0x40
 8003744:	af02      	add	r7, sp, #8
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
 800374c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800374e:	2300      	movs	r3, #0
 8003750:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10b      	bne.n	8003774 <xQueueGenericSend+0x34>
 800375c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003760:	b672      	cpsid	i
 8003762:	f383 8811 	msr	BASEPRI, r3
 8003766:	f3bf 8f6f 	isb	sy
 800376a:	f3bf 8f4f 	dsb	sy
 800376e:	b662      	cpsie	i
 8003770:	62bb      	str	r3, [r7, #40]	; 0x28
 8003772:	e7fe      	b.n	8003772 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d103      	bne.n	8003782 <xQueueGenericSend+0x42>
 800377a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <xQueueGenericSend+0x46>
 8003782:	2301      	movs	r3, #1
 8003784:	e000      	b.n	8003788 <xQueueGenericSend+0x48>
 8003786:	2300      	movs	r3, #0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10b      	bne.n	80037a4 <xQueueGenericSend+0x64>
 800378c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003790:	b672      	cpsid	i
 8003792:	f383 8811 	msr	BASEPRI, r3
 8003796:	f3bf 8f6f 	isb	sy
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	b662      	cpsie	i
 80037a0:	627b      	str	r3, [r7, #36]	; 0x24
 80037a2:	e7fe      	b.n	80037a2 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d103      	bne.n	80037b2 <xQueueGenericSend+0x72>
 80037aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d101      	bne.n	80037b6 <xQueueGenericSend+0x76>
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <xQueueGenericSend+0x78>
 80037b6:	2300      	movs	r3, #0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10b      	bne.n	80037d4 <xQueueGenericSend+0x94>
 80037bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c0:	b672      	cpsid	i
 80037c2:	f383 8811 	msr	BASEPRI, r3
 80037c6:	f3bf 8f6f 	isb	sy
 80037ca:	f3bf 8f4f 	dsb	sy
 80037ce:	b662      	cpsie	i
 80037d0:	623b      	str	r3, [r7, #32]
 80037d2:	e7fe      	b.n	80037d2 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037d4:	f001 f966 	bl	8004aa4 <xTaskGetSchedulerState>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d102      	bne.n	80037e4 <xQueueGenericSend+0xa4>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <xQueueGenericSend+0xa8>
 80037e4:	2301      	movs	r3, #1
 80037e6:	e000      	b.n	80037ea <xQueueGenericSend+0xaa>
 80037e8:	2300      	movs	r3, #0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10b      	bne.n	8003806 <xQueueGenericSend+0xc6>
 80037ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f2:	b672      	cpsid	i
 80037f4:	f383 8811 	msr	BASEPRI, r3
 80037f8:	f3bf 8f6f 	isb	sy
 80037fc:	f3bf 8f4f 	dsb	sy
 8003800:	b662      	cpsie	i
 8003802:	61fb      	str	r3, [r7, #28]
 8003804:	e7fe      	b.n	8003804 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003806:	f001 fcb7 	bl	8005178 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800380a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800380e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003812:	429a      	cmp	r2, r3
 8003814:	d302      	bcc.n	800381c <xQueueGenericSend+0xdc>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b02      	cmp	r3, #2
 800381a:	d136      	bne.n	800388a <xQueueGenericSend+0x14a>
			{
				traceQUEUE_SEND( pxQueue );
 800381c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381e:	4618      	mov	r0, r3
 8003820:	f003 fc00 	bl	8007024 <SEGGER_SYSVIEW_ShrinkId>
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	460b      	mov	r3, r1
 800382e:	4601      	mov	r1, r0
 8003830:	205a      	movs	r0, #90	; 0x5a
 8003832:	f002 ff5d 	bl	80066f0 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	68b9      	ldr	r1, [r7, #8]
 800383a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800383c:	f000 fa08 	bl	8003c50 <prvCopyDataToQueue>
 8003840:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	2b00      	cmp	r3, #0
 8003848:	d010      	beq.n	800386c <xQueueGenericSend+0x12c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800384a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384c:	3324      	adds	r3, #36	; 0x24
 800384e:	4618      	mov	r0, r3
 8003850:	f000 ff66 	bl	8004720 <xTaskRemoveFromEventList>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d013      	beq.n	8003882 <xQueueGenericSend+0x142>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800385a:	4b4d      	ldr	r3, [pc, #308]	; (8003990 <xQueueGenericSend+0x250>)
 800385c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	f3bf 8f4f 	dsb	sy
 8003866:	f3bf 8f6f 	isb	sy
 800386a:	e00a      	b.n	8003882 <xQueueGenericSend+0x142>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800386c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386e:	2b00      	cmp	r3, #0
 8003870:	d007      	beq.n	8003882 <xQueueGenericSend+0x142>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003872:	4b47      	ldr	r3, [pc, #284]	; (8003990 <xQueueGenericSend+0x250>)
 8003874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	f3bf 8f4f 	dsb	sy
 800387e:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003882:	f001 fcab 	bl	80051dc <vPortExitCritical>
				return pdPASS;
 8003886:	2301      	movs	r3, #1
 8003888:	e07d      	b.n	8003986 <xQueueGenericSend+0x246>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d110      	bne.n	80038b2 <xQueueGenericSend+0x172>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003890:	f001 fca4 	bl	80051dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8003894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003896:	4618      	mov	r0, r3
 8003898:	f003 fbc4 	bl	8007024 <SEGGER_SYSVIEW_ShrinkId>
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	460b      	mov	r3, r1
 80038a6:	4601      	mov	r1, r0
 80038a8:	205a      	movs	r0, #90	; 0x5a
 80038aa:	f002 ff21 	bl	80066f0 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 80038ae:	2300      	movs	r3, #0
 80038b0:	e069      	b.n	8003986 <xQueueGenericSend+0x246>
				}
				else if( xEntryTimeSet == pdFALSE )
 80038b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d106      	bne.n	80038c6 <xQueueGenericSend+0x186>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038b8:	f107 0314 	add.w	r3, r7, #20
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 ff97 	bl	80047f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038c2:	2301      	movs	r3, #1
 80038c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038c6:	f001 fc89 	bl	80051dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80038ca:	f000 fd13 	bl	80042f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80038ce:	f001 fc53 	bl	8005178 <vPortEnterCritical>
 80038d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038d8:	b25b      	sxtb	r3, r3
 80038da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038de:	d103      	bne.n	80038e8 <xQueueGenericSend+0x1a8>
 80038e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038ee:	b25b      	sxtb	r3, r3
 80038f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f4:	d103      	bne.n	80038fe <xQueueGenericSend+0x1be>
 80038f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038fe:	f001 fc6d 	bl	80051dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003902:	1d3a      	adds	r2, r7, #4
 8003904:	f107 0314 	add.w	r3, r7, #20
 8003908:	4611      	mov	r1, r2
 800390a:	4618      	mov	r0, r3
 800390c:	f000 ff86 	bl	800481c <xTaskCheckForTimeOut>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d124      	bne.n	8003960 <xQueueGenericSend+0x220>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003916:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003918:	f000 fa6c 	bl	8003df4 <prvIsQueueFull>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d018      	beq.n	8003954 <xQueueGenericSend+0x214>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003924:	3310      	adds	r3, #16
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	4611      	mov	r1, r2
 800392a:	4618      	mov	r0, r3
 800392c:	f000 fed2 	bl	80046d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003930:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003932:	f000 f9f7 	bl	8003d24 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003936:	f000 fceb 	bl	8004310 <xTaskResumeAll>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	f47f af62 	bne.w	8003806 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003942:	4b13      	ldr	r3, [pc, #76]	; (8003990 <xQueueGenericSend+0x250>)
 8003944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	f3bf 8f4f 	dsb	sy
 800394e:	f3bf 8f6f 	isb	sy
 8003952:	e758      	b.n	8003806 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003954:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003956:	f000 f9e5 	bl	8003d24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800395a:	f000 fcd9 	bl	8004310 <xTaskResumeAll>
 800395e:	e752      	b.n	8003806 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003960:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003962:	f000 f9df 	bl	8003d24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003966:	f000 fcd3 	bl	8004310 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 800396a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396c:	4618      	mov	r0, r3
 800396e:	f003 fb59 	bl	8007024 <SEGGER_SYSVIEW_ShrinkId>
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	460b      	mov	r3, r1
 800397c:	4601      	mov	r1, r0
 800397e:	205a      	movs	r0, #90	; 0x5a
 8003980:	f002 feb6 	bl	80066f0 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8003984:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003986:	4618      	mov	r0, r3
 8003988:	3738      	adds	r7, #56	; 0x38
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	e000ed04 	.word	0xe000ed04

08003994 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003994:	b590      	push	{r4, r7, lr}
 8003996:	b091      	sub	sp, #68	; 0x44
 8003998:	af02      	add	r7, sp, #8
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800399e:	2300      	movs	r3, #0
 80039a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80039a6:	2300      	movs	r3, #0
 80039a8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80039aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10b      	bne.n	80039c8 <xQueueSemaphoreTake+0x34>
 80039b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b4:	b672      	cpsid	i
 80039b6:	f383 8811 	msr	BASEPRI, r3
 80039ba:	f3bf 8f6f 	isb	sy
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	b662      	cpsie	i
 80039c4:	623b      	str	r3, [r7, #32]
 80039c6:	e7fe      	b.n	80039c6 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80039c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00b      	beq.n	80039e8 <xQueueSemaphoreTake+0x54>
 80039d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d4:	b672      	cpsid	i
 80039d6:	f383 8811 	msr	BASEPRI, r3
 80039da:	f3bf 8f6f 	isb	sy
 80039de:	f3bf 8f4f 	dsb	sy
 80039e2:	b662      	cpsie	i
 80039e4:	61fb      	str	r3, [r7, #28]
 80039e6:	e7fe      	b.n	80039e6 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039e8:	f001 f85c 	bl	8004aa4 <xTaskGetSchedulerState>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d102      	bne.n	80039f8 <xQueueSemaphoreTake+0x64>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <xQueueSemaphoreTake+0x68>
 80039f8:	2301      	movs	r3, #1
 80039fa:	e000      	b.n	80039fe <xQueueSemaphoreTake+0x6a>
 80039fc:	2300      	movs	r3, #0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10b      	bne.n	8003a1a <xQueueSemaphoreTake+0x86>
 8003a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a06:	b672      	cpsid	i
 8003a08:	f383 8811 	msr	BASEPRI, r3
 8003a0c:	f3bf 8f6f 	isb	sy
 8003a10:	f3bf 8f4f 	dsb	sy
 8003a14:	b662      	cpsie	i
 8003a16:	61bb      	str	r3, [r7, #24]
 8003a18:	e7fe      	b.n	8003a18 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a1a:	f001 fbad 	bl	8005178 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a22:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d036      	beq.n	8003a98 <xQueueSemaphoreTake+0x104>
			{
				traceQUEUE_RECEIVE( pxQueue );
 8003a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f003 faf9 	bl	8007024 <SEGGER_SYSVIEW_ShrinkId>
 8003a32:	4604      	mov	r4, r0
 8003a34:	2000      	movs	r0, #0
 8003a36:	f003 faf5 	bl	8007024 <SEGGER_SYSVIEW_ShrinkId>
 8003a3a:	4601      	mov	r1, r0
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	2301      	movs	r3, #1
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	4613      	mov	r3, r2
 8003a44:	460a      	mov	r2, r1
 8003a46:	4621      	mov	r1, r4
 8003a48:	205c      	movs	r0, #92	; 0x5c
 8003a4a:	f002 fe51 	bl	80066f0 <SEGGER_SYSVIEW_RecordU32x4>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a50:	1e5a      	subs	r2, r3, #1
 8003a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a54:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d104      	bne.n	8003a68 <xQueueSemaphoreTake+0xd4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003a5e:	f001 f9f7 	bl	8004e50 <pvTaskIncrementMutexHeldCount>
 8003a62:	4602      	mov	r2, r0
 8003a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a66:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00f      	beq.n	8003a90 <xQueueSemaphoreTake+0xfc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a72:	3310      	adds	r3, #16
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 fe53 	bl	8004720 <xTaskRemoveFromEventList>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d007      	beq.n	8003a90 <xQueueSemaphoreTake+0xfc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a80:	4b66      	ldr	r3, [pc, #408]	; (8003c1c <xQueueSemaphoreTake+0x288>)
 8003a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	f3bf 8f4f 	dsb	sy
 8003a8c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a90:	f001 fba4 	bl	80051dc <vPortExitCritical>
				return pdPASS;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e0bc      	b.n	8003c12 <xQueueSemaphoreTake+0x27e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d124      	bne.n	8003ae8 <xQueueSemaphoreTake+0x154>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00b      	beq.n	8003abc <xQueueSemaphoreTake+0x128>
 8003aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa8:	b672      	cpsid	i
 8003aaa:	f383 8811 	msr	BASEPRI, r3
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	b662      	cpsie	i
 8003ab8:	617b      	str	r3, [r7, #20]
 8003aba:	e7fe      	b.n	8003aba <xQueueSemaphoreTake+0x126>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003abc:	f001 fb8e 	bl	80051dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f003 faae 	bl	8007024 <SEGGER_SYSVIEW_ShrinkId>
 8003ac8:	4604      	mov	r4, r0
 8003aca:	2000      	movs	r0, #0
 8003acc:	f003 faaa 	bl	8007024 <SEGGER_SYSVIEW_ShrinkId>
 8003ad0:	4601      	mov	r1, r0
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	460a      	mov	r2, r1
 8003adc:	4621      	mov	r1, r4
 8003ade:	205c      	movs	r0, #92	; 0x5c
 8003ae0:	f002 fe06 	bl	80066f0 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	e094      	b.n	8003c12 <xQueueSemaphoreTake+0x27e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d106      	bne.n	8003afc <xQueueSemaphoreTake+0x168>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003aee:	f107 030c 	add.w	r3, r7, #12
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 fe7c 	bl	80047f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003af8:	2301      	movs	r3, #1
 8003afa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003afc:	f001 fb6e 	bl	80051dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b00:	f000 fbf8 	bl	80042f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b04:	f001 fb38 	bl	8005178 <vPortEnterCritical>
 8003b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b0e:	b25b      	sxtb	r3, r3
 8003b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b14:	d103      	bne.n	8003b1e <xQueueSemaphoreTake+0x18a>
 8003b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b24:	b25b      	sxtb	r3, r3
 8003b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2a:	d103      	bne.n	8003b34 <xQueueSemaphoreTake+0x1a0>
 8003b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b34:	f001 fb52 	bl	80051dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b38:	463a      	mov	r2, r7
 8003b3a:	f107 030c 	add.w	r3, r7, #12
 8003b3e:	4611      	mov	r1, r2
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 fe6b 	bl	800481c <xTaskCheckForTimeOut>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d132      	bne.n	8003bb2 <xQueueSemaphoreTake+0x21e>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b4e:	f000 f93b 	bl	8003dc8 <prvIsQueueEmpty>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d026      	beq.n	8003ba6 <xQueueSemaphoreTake+0x212>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d109      	bne.n	8003b74 <xQueueSemaphoreTake+0x1e0>
					{
						taskENTER_CRITICAL();
 8003b60:	f001 fb0a 	bl	8005178 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 ffb9 	bl	8004ae0 <xTaskPriorityInherit>
 8003b6e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003b70:	f001 fb34 	bl	80051dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b76:	3324      	adds	r3, #36	; 0x24
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 fda9 	bl	80046d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b84:	f000 f8ce 	bl	8003d24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b88:	f000 fbc2 	bl	8004310 <xTaskResumeAll>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f47f af43 	bne.w	8003a1a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003b94:	4b21      	ldr	r3, [pc, #132]	; (8003c1c <xQueueSemaphoreTake+0x288>)
 8003b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	f3bf 8f6f 	isb	sy
 8003ba4:	e739      	b.n	8003a1a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003ba6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ba8:	f000 f8bc 	bl	8003d24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bac:	f000 fbb0 	bl	8004310 <xTaskResumeAll>
 8003bb0:	e733      	b.n	8003a1a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003bb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003bb4:	f000 f8b6 	bl	8003d24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bb8:	f000 fbaa 	bl	8004310 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003bbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003bbe:	f000 f903 	bl	8003dc8 <prvIsQueueEmpty>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f43f af28 	beq.w	8003a1a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00d      	beq.n	8003bec <xQueueSemaphoreTake+0x258>
					{
						taskENTER_CRITICAL();
 8003bd0:	f001 fad2 	bl	8005178 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003bd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003bd6:	f000 f823 	bl	8003c20 <prvGetDisinheritPriorityAfterTimeout>
 8003bda:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003be2:	4618      	mov	r0, r3
 8003be4:	f001 f88e 	bl	8004d04 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003be8:	f001 faf8 	bl	80051dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f003 fa18 	bl	8007024 <SEGGER_SYSVIEW_ShrinkId>
 8003bf4:	4604      	mov	r4, r0
 8003bf6:	2000      	movs	r0, #0
 8003bf8:	f003 fa14 	bl	8007024 <SEGGER_SYSVIEW_ShrinkId>
 8003bfc:	4601      	mov	r1, r0
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	2301      	movs	r3, #1
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	4613      	mov	r3, r2
 8003c06:	460a      	mov	r2, r1
 8003c08:	4621      	mov	r1, r4
 8003c0a:	205c      	movs	r0, #92	; 0x5c
 8003c0c:	f002 fd70 	bl	80066f0 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8003c10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	373c      	adds	r7, #60	; 0x3c
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd90      	pop	{r4, r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	e000ed04 	.word	0xe000ed04

08003c20 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d006      	beq.n	8003c3e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f1c3 0307 	rsb	r3, r3, #7
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	e001      	b.n	8003c42 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003c42:	68fb      	ldr	r3, [r7, #12]
	}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3714      	adds	r7, #20
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c64:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10d      	bne.n	8003c8a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d14d      	bne.n	8003d12 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 ffb6 	bl	8004bec <xTaskPriorityDisinherit>
 8003c80:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	609a      	str	r2, [r3, #8]
 8003c88:	e043      	b.n	8003d12 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d119      	bne.n	8003cc4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6858      	ldr	r0, [r3, #4]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	461a      	mov	r2, r3
 8003c9a:	68b9      	ldr	r1, [r7, #8]
 8003c9c:	f003 fb51 	bl	8007342 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca8:	441a      	add	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d32b      	bcc.n	8003d12 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	605a      	str	r2, [r3, #4]
 8003cc2:	e026      	b.n	8003d12 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	68d8      	ldr	r0, [r3, #12]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ccc:	461a      	mov	r2, r3
 8003cce:	68b9      	ldr	r1, [r7, #8]
 8003cd0:	f003 fb37 	bl	8007342 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cdc:	425b      	negs	r3, r3
 8003cde:	441a      	add	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	68da      	ldr	r2, [r3, #12]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d207      	bcs.n	8003d00 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf8:	425b      	negs	r3, r3
 8003cfa:	441a      	add	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d105      	bne.n	8003d12 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1c5a      	adds	r2, r3, #1
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003d1a:	697b      	ldr	r3, [r7, #20]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003d2c:	f001 fa24 	bl	8005178 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d36:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d38:	e011      	b.n	8003d5e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d012      	beq.n	8003d68 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	3324      	adds	r3, #36	; 0x24
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fcea 	bl	8004720 <xTaskRemoveFromEventList>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003d52:	f000 fdc7 	bl	80048e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	dce9      	bgt.n	8003d3a <prvUnlockQueue+0x16>
 8003d66:	e000      	b.n	8003d6a <prvUnlockQueue+0x46>
					break;
 8003d68:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	22ff      	movs	r2, #255	; 0xff
 8003d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003d72:	f001 fa33 	bl	80051dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003d76:	f001 f9ff 	bl	8005178 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d80:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d82:	e011      	b.n	8003da8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d012      	beq.n	8003db2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3310      	adds	r3, #16
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 fcc5 	bl	8004720 <xTaskRemoveFromEventList>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003d9c:	f000 fda2 	bl	80048e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003da0:	7bbb      	ldrb	r3, [r7, #14]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003da8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	dce9      	bgt.n	8003d84 <prvUnlockQueue+0x60>
 8003db0:	e000      	b.n	8003db4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003db2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	22ff      	movs	r2, #255	; 0xff
 8003db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003dbc:	f001 fa0e 	bl	80051dc <vPortExitCritical>
}
 8003dc0:	bf00      	nop
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003dd0:	f001 f9d2 	bl	8005178 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d102      	bne.n	8003de2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	e001      	b.n	8003de6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003de6:	f001 f9f9 	bl	80051dc <vPortExitCritical>

	return xReturn;
 8003dea:	68fb      	ldr	r3, [r7, #12]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003dfc:	f001 f9bc 	bl	8005178 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d102      	bne.n	8003e12 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	e001      	b.n	8003e16 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003e12:	2300      	movs	r3, #0
 8003e14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e16:	f001 f9e1 	bl	80051dc <vPortExitCritical>

	return xReturn;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b08e      	sub	sp, #56	; 0x38
 8003e28:	af04      	add	r7, sp, #16
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
 8003e30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10b      	bne.n	8003e50 <xTaskCreateStatic+0x2c>
 8003e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3c:	b672      	cpsid	i
 8003e3e:	f383 8811 	msr	BASEPRI, r3
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	f3bf 8f4f 	dsb	sy
 8003e4a:	b662      	cpsie	i
 8003e4c:	623b      	str	r3, [r7, #32]
 8003e4e:	e7fe      	b.n	8003e4e <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8003e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10b      	bne.n	8003e6e <xTaskCreateStatic+0x4a>
 8003e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5a:	b672      	cpsid	i
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	b662      	cpsie	i
 8003e6a:	61fb      	str	r3, [r7, #28]
 8003e6c:	e7fe      	b.n	8003e6c <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e6e:	2354      	movs	r3, #84	; 0x54
 8003e70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	2b54      	cmp	r3, #84	; 0x54
 8003e76:	d00b      	beq.n	8003e90 <xTaskCreateStatic+0x6c>
 8003e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7c:	b672      	cpsid	i
 8003e7e:	f383 8811 	msr	BASEPRI, r3
 8003e82:	f3bf 8f6f 	isb	sy
 8003e86:	f3bf 8f4f 	dsb	sy
 8003e8a:	b662      	cpsie	i
 8003e8c:	61bb      	str	r3, [r7, #24]
 8003e8e:	e7fe      	b.n	8003e8e <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e90:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d01e      	beq.n	8003ed6 <xTaskCreateStatic+0xb2>
 8003e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d01b      	beq.n	8003ed6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ea6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	9303      	str	r3, [sp, #12]
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	9302      	str	r3, [sp, #8]
 8003eb8:	f107 0314 	add.w	r3, r7, #20
 8003ebc:	9301      	str	r3, [sp, #4]
 8003ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	68b9      	ldr	r1, [r7, #8]
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 f850 	bl	8003f6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ece:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ed0:	f000 f8d6 	bl	8004080 <prvAddNewTaskToReadyList>
 8003ed4:	e001      	b.n	8003eda <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003eda:	697b      	ldr	r3, [r7, #20]
	}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3728      	adds	r7, #40	; 0x28
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08c      	sub	sp, #48	; 0x30
 8003ee8:	af04      	add	r7, sp, #16
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	603b      	str	r3, [r7, #0]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ef4:	88fb      	ldrh	r3, [r7, #6]
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f001 fab7 	bl	800546c <pvPortMalloc>
 8003efe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00e      	beq.n	8003f24 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003f06:	2054      	movs	r0, #84	; 0x54
 8003f08:	f001 fab0 	bl	800546c <pvPortMalloc>
 8003f0c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	631a      	str	r2, [r3, #48]	; 0x30
 8003f1a:	e005      	b.n	8003f28 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f1c:	6978      	ldr	r0, [r7, #20]
 8003f1e:	f001 fb6d 	bl	80055fc <vPortFree>
 8003f22:	e001      	b.n	8003f28 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f24:	2300      	movs	r3, #0
 8003f26:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d017      	beq.n	8003f5e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f36:	88fa      	ldrh	r2, [r7, #6]
 8003f38:	2300      	movs	r3, #0
 8003f3a:	9303      	str	r3, [sp, #12]
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	9302      	str	r3, [sp, #8]
 8003f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f42:	9301      	str	r3, [sp, #4]
 8003f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	68b9      	ldr	r1, [r7, #8]
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 f80e 	bl	8003f6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f52:	69f8      	ldr	r0, [r7, #28]
 8003f54:	f000 f894 	bl	8004080 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	61bb      	str	r3, [r7, #24]
 8003f5c:	e002      	b.n	8003f64 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f64:	69bb      	ldr	r3, [r7, #24]
	}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3720      	adds	r7, #32
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b088      	sub	sp, #32
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	60f8      	str	r0, [r7, #12]
 8003f76:	60b9      	str	r1, [r7, #8]
 8003f78:	607a      	str	r2, [r7, #4]
 8003f7a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f80:	6879      	ldr	r1, [r7, #4]
 8003f82:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003f86:	440b      	add	r3, r1
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	f023 0307 	bic.w	r3, r3, #7
 8003f94:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00b      	beq.n	8003fb8 <prvInitialiseNewTask+0x4a>
 8003fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa4:	b672      	cpsid	i
 8003fa6:	f383 8811 	msr	BASEPRI, r3
 8003faa:	f3bf 8f6f 	isb	sy
 8003fae:	f3bf 8f4f 	dsb	sy
 8003fb2:	b662      	cpsie	i
 8003fb4:	617b      	str	r3, [r7, #20]
 8003fb6:	e7fe      	b.n	8003fb6 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d01f      	beq.n	8003ffe <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61fb      	str	r3, [r7, #28]
 8003fc2:	e012      	b.n	8003fea <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	4413      	add	r3, r2
 8003fca:	7819      	ldrb	r1, [r3, #0]
 8003fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	3334      	adds	r3, #52	; 0x34
 8003fd4:	460a      	mov	r2, r1
 8003fd6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	4413      	add	r3, r2
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d006      	beq.n	8003ff2 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	61fb      	str	r3, [r7, #28]
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	2b0f      	cmp	r3, #15
 8003fee:	d9e9      	bls.n	8003fc4 <prvInitialiseNewTask+0x56>
 8003ff0:	e000      	b.n	8003ff4 <prvInitialiseNewTask+0x86>
			{
				break;
 8003ff2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ffc:	e003      	b.n	8004006 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004008:	2b06      	cmp	r3, #6
 800400a:	d901      	bls.n	8004010 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800400c:	2306      	movs	r3, #6
 800400e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004012:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004014:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004018:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800401a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800401c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401e:	2200      	movs	r2, #0
 8004020:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004024:	3304      	adds	r3, #4
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff f95b 	bl	80032e2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800402c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402e:	3318      	adds	r3, #24
 8004030:	4618      	mov	r0, r3
 8004032:	f7ff f956 	bl	80032e2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800403a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800403c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403e:	f1c3 0207 	rsb	r2, r3, #7
 8004042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004044:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800404a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800404c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404e:	2200      	movs	r2, #0
 8004050:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	68f9      	ldr	r1, [r7, #12]
 800405e:	69b8      	ldr	r0, [r7, #24]
 8004060:	f000 ff82 	bl	8004f68 <pxPortInitialiseStack>
 8004064:	4602      	mov	r2, r0
 8004066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004068:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800406a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004074:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004076:	bf00      	nop
 8004078:	3720      	adds	r7, #32
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
	...

08004080 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004080:	b5b0      	push	{r4, r5, r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af02      	add	r7, sp, #8
 8004086:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004088:	f001 f876 	bl	8005178 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800408c:	4b39      	ldr	r3, [pc, #228]	; (8004174 <prvAddNewTaskToReadyList+0xf4>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	3301      	adds	r3, #1
 8004092:	4a38      	ldr	r2, [pc, #224]	; (8004174 <prvAddNewTaskToReadyList+0xf4>)
 8004094:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004096:	4b38      	ldr	r3, [pc, #224]	; (8004178 <prvAddNewTaskToReadyList+0xf8>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d109      	bne.n	80040b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800409e:	4a36      	ldr	r2, [pc, #216]	; (8004178 <prvAddNewTaskToReadyList+0xf8>)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80040a4:	4b33      	ldr	r3, [pc, #204]	; (8004174 <prvAddNewTaskToReadyList+0xf4>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d110      	bne.n	80040ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80040ac:	f000 fc3e 	bl	800492c <prvInitialiseTaskLists>
 80040b0:	e00d      	b.n	80040ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80040b2:	4b32      	ldr	r3, [pc, #200]	; (800417c <prvAddNewTaskToReadyList+0xfc>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d109      	bne.n	80040ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80040ba:	4b2f      	ldr	r3, [pc, #188]	; (8004178 <prvAddNewTaskToReadyList+0xf8>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d802      	bhi.n	80040ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80040c8:	4a2b      	ldr	r2, [pc, #172]	; (8004178 <prvAddNewTaskToReadyList+0xf8>)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80040ce:	4b2c      	ldr	r3, [pc, #176]	; (8004180 <prvAddNewTaskToReadyList+0x100>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	3301      	adds	r3, #1
 80040d4:	4a2a      	ldr	r2, [pc, #168]	; (8004180 <prvAddNewTaskToReadyList+0x100>)
 80040d6:	6013      	str	r3, [r2, #0]
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d016      	beq.n	800410c <prvAddNewTaskToReadyList+0x8c>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f002 fe79 	bl	8006dd8 <SEGGER_SYSVIEW_OnTaskCreate>
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f6:	461d      	mov	r5, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	461c      	mov	r4, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004102:	1ae3      	subs	r3, r4, r3
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	462b      	mov	r3, r5
 8004108:	f001 fc38 	bl	800597c <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4618      	mov	r0, r3
 8004110:	f002 fee6 	bl	8006ee0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004118:	2201      	movs	r2, #1
 800411a:	409a      	lsls	r2, r3
 800411c:	4b19      	ldr	r3, [pc, #100]	; (8004184 <prvAddNewTaskToReadyList+0x104>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4313      	orrs	r3, r2
 8004122:	4a18      	ldr	r2, [pc, #96]	; (8004184 <prvAddNewTaskToReadyList+0x104>)
 8004124:	6013      	str	r3, [r2, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800412a:	4613      	mov	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4a15      	ldr	r2, [pc, #84]	; (8004188 <prvAddNewTaskToReadyList+0x108>)
 8004134:	441a      	add	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	3304      	adds	r3, #4
 800413a:	4619      	mov	r1, r3
 800413c:	4610      	mov	r0, r2
 800413e:	f7ff f8dd 	bl	80032fc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004142:	f001 f84b 	bl	80051dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004146:	4b0d      	ldr	r3, [pc, #52]	; (800417c <prvAddNewTaskToReadyList+0xfc>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00e      	beq.n	800416c <prvAddNewTaskToReadyList+0xec>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800414e:	4b0a      	ldr	r3, [pc, #40]	; (8004178 <prvAddNewTaskToReadyList+0xf8>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004158:	429a      	cmp	r2, r3
 800415a:	d207      	bcs.n	800416c <prvAddNewTaskToReadyList+0xec>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800415c:	4b0b      	ldr	r3, [pc, #44]	; (800418c <prvAddNewTaskToReadyList+0x10c>)
 800415e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800416c:	bf00      	nop
 800416e:	3708      	adds	r7, #8
 8004170:	46bd      	mov	sp, r7
 8004172:	bdb0      	pop	{r4, r5, r7, pc}
 8004174:	20000580 	.word	0x20000580
 8004178:	20000480 	.word	0x20000480
 800417c:	2000058c 	.word	0x2000058c
 8004180:	2000059c 	.word	0x2000059c
 8004184:	20000588 	.word	0x20000588
 8004188:	20000484 	.word	0x20000484
 800418c:	e000ed04 	.word	0xe000ed04

08004190 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004198:	2300      	movs	r3, #0
 800419a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d01c      	beq.n	80041dc <vTaskDelay+0x4c>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80041a2:	4b16      	ldr	r3, [pc, #88]	; (80041fc <vTaskDelay+0x6c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00b      	beq.n	80041c2 <vTaskDelay+0x32>
 80041aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ae:	b672      	cpsid	i
 80041b0:	f383 8811 	msr	BASEPRI, r3
 80041b4:	f3bf 8f6f 	isb	sy
 80041b8:	f3bf 8f4f 	dsb	sy
 80041bc:	b662      	cpsie	i
 80041be:	60bb      	str	r3, [r7, #8]
 80041c0:	e7fe      	b.n	80041c0 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80041c2:	f000 f897 	bl	80042f4 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	2023      	movs	r0, #35	; 0x23
 80041ca:	f002 f985 	bl	80064d8 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80041ce:	2100      	movs	r1, #0
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 fe51 	bl	8004e78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80041d6:	f000 f89b 	bl	8004310 <xTaskResumeAll>
 80041da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d107      	bne.n	80041f2 <vTaskDelay+0x62>
		{
			portYIELD_WITHIN_API();
 80041e2:	4b07      	ldr	r3, [pc, #28]	; (8004200 <vTaskDelay+0x70>)
 80041e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	f3bf 8f4f 	dsb	sy
 80041ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80041f2:	bf00      	nop
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	200005a8 	.word	0x200005a8
 8004200:	e000ed04 	.word	0xe000ed04

08004204 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b08a      	sub	sp, #40	; 0x28
 8004208:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800420a:	2300      	movs	r3, #0
 800420c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800420e:	2300      	movs	r3, #0
 8004210:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004212:	463a      	mov	r2, r7
 8004214:	1d39      	adds	r1, r7, #4
 8004216:	f107 0308 	add.w	r3, r7, #8
 800421a:	4618      	mov	r0, r3
 800421c:	f7fc f9c2 	bl	80005a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004220:	6839      	ldr	r1, [r7, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	9202      	str	r2, [sp, #8]
 8004228:	9301      	str	r3, [sp, #4]
 800422a:	2300      	movs	r3, #0
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	2300      	movs	r3, #0
 8004230:	460a      	mov	r2, r1
 8004232:	4929      	ldr	r1, [pc, #164]	; (80042d8 <vTaskStartScheduler+0xd4>)
 8004234:	4829      	ldr	r0, [pc, #164]	; (80042dc <vTaskStartScheduler+0xd8>)
 8004236:	f7ff fdf5 	bl	8003e24 <xTaskCreateStatic>
 800423a:	4602      	mov	r2, r0
 800423c:	4b28      	ldr	r3, [pc, #160]	; (80042e0 <vTaskStartScheduler+0xdc>)
 800423e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004240:	4b27      	ldr	r3, [pc, #156]	; (80042e0 <vTaskStartScheduler+0xdc>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d002      	beq.n	800424e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004248:	2301      	movs	r3, #1
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	e001      	b.n	8004252 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800424e:	2300      	movs	r3, #0
 8004250:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d12a      	bne.n	80042ae <vTaskStartScheduler+0xaa>
 8004258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425c:	b672      	cpsid	i
 800425e:	f383 8811 	msr	BASEPRI, r3
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	f3bf 8f4f 	dsb	sy
 800426a:	b662      	cpsie	i
 800426c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800426e:	4b1d      	ldr	r3, [pc, #116]	; (80042e4 <vTaskStartScheduler+0xe0>)
 8004270:	f04f 32ff 	mov.w	r2, #4294967295
 8004274:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004276:	4b1c      	ldr	r3, [pc, #112]	; (80042e8 <vTaskStartScheduler+0xe4>)
 8004278:	2201      	movs	r2, #1
 800427a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800427c:	4b1b      	ldr	r3, [pc, #108]	; (80042ec <vTaskStartScheduler+0xe8>)
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8004282:	4b1b      	ldr	r3, [pc, #108]	; (80042f0 <vTaskStartScheduler+0xec>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	3334      	adds	r3, #52	; 0x34
 8004288:	2205      	movs	r2, #5
 800428a:	4913      	ldr	r1, [pc, #76]	; (80042d8 <vTaskStartScheduler+0xd4>)
 800428c:	4618      	mov	r0, r3
 800428e:	f003 f849 	bl	8007324 <memcmp>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d005      	beq.n	80042a4 <vTaskStartScheduler+0xa0>
 8004298:	4b15      	ldr	r3, [pc, #84]	; (80042f0 <vTaskStartScheduler+0xec>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4618      	mov	r0, r3
 800429e:	f002 fddd 	bl	8006e5c <SEGGER_SYSVIEW_OnTaskStartExec>
 80042a2:	e001      	b.n	80042a8 <vTaskStartScheduler+0xa4>
 80042a4:	f002 fd7c 	bl	8006da0 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80042a8:	f000 feea 	bl	8005080 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80042ac:	e00f      	b.n	80042ce <vTaskStartScheduler+0xca>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b4:	d10b      	bne.n	80042ce <vTaskStartScheduler+0xca>
 80042b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ba:	b672      	cpsid	i
 80042bc:	f383 8811 	msr	BASEPRI, r3
 80042c0:	f3bf 8f6f 	isb	sy
 80042c4:	f3bf 8f4f 	dsb	sy
 80042c8:	b662      	cpsie	i
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	e7fe      	b.n	80042cc <vTaskStartScheduler+0xc8>
}
 80042ce:	bf00      	nop
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	08007400 	.word	0x08007400
 80042dc:	080048fd 	.word	0x080048fd
 80042e0:	200005a4 	.word	0x200005a4
 80042e4:	200005a0 	.word	0x200005a0
 80042e8:	2000058c 	.word	0x2000058c
 80042ec:	20000584 	.word	0x20000584
 80042f0:	20000480 	.word	0x20000480

080042f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80042f8:	4b04      	ldr	r3, [pc, #16]	; (800430c <vTaskSuspendAll+0x18>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3301      	adds	r3, #1
 80042fe:	4a03      	ldr	r2, [pc, #12]	; (800430c <vTaskSuspendAll+0x18>)
 8004300:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004302:	bf00      	nop
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	200005a8 	.word	0x200005a8

08004310 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004316:	2300      	movs	r3, #0
 8004318:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800431a:	2300      	movs	r3, #0
 800431c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800431e:	4b44      	ldr	r3, [pc, #272]	; (8004430 <xTaskResumeAll+0x120>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10b      	bne.n	800433e <xTaskResumeAll+0x2e>
 8004326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432a:	b672      	cpsid	i
 800432c:	f383 8811 	msr	BASEPRI, r3
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	b662      	cpsie	i
 800433a:	603b      	str	r3, [r7, #0]
 800433c:	e7fe      	b.n	800433c <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800433e:	f000 ff1b 	bl	8005178 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004342:	4b3b      	ldr	r3, [pc, #236]	; (8004430 <xTaskResumeAll+0x120>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3b01      	subs	r3, #1
 8004348:	4a39      	ldr	r2, [pc, #228]	; (8004430 <xTaskResumeAll+0x120>)
 800434a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800434c:	4b38      	ldr	r3, [pc, #224]	; (8004430 <xTaskResumeAll+0x120>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d165      	bne.n	8004420 <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004354:	4b37      	ldr	r3, [pc, #220]	; (8004434 <xTaskResumeAll+0x124>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d061      	beq.n	8004420 <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800435c:	e032      	b.n	80043c4 <xTaskResumeAll+0xb4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800435e:	4b36      	ldr	r3, [pc, #216]	; (8004438 <xTaskResumeAll+0x128>)
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	3318      	adds	r3, #24
 800436a:	4618      	mov	r0, r3
 800436c:	f7ff f823 	bl	80033b6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3304      	adds	r3, #4
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff f81e 	bl	80033b6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4618      	mov	r0, r3
 800437e:	f002 fdaf 	bl	8006ee0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004386:	2201      	movs	r2, #1
 8004388:	409a      	lsls	r2, r3
 800438a:	4b2c      	ldr	r3, [pc, #176]	; (800443c <xTaskResumeAll+0x12c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4313      	orrs	r3, r2
 8004390:	4a2a      	ldr	r2, [pc, #168]	; (800443c <xTaskResumeAll+0x12c>)
 8004392:	6013      	str	r3, [r2, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004398:	4613      	mov	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4a27      	ldr	r2, [pc, #156]	; (8004440 <xTaskResumeAll+0x130>)
 80043a2:	441a      	add	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	3304      	adds	r3, #4
 80043a8:	4619      	mov	r1, r3
 80043aa:	4610      	mov	r0, r2
 80043ac:	f7fe ffa6 	bl	80032fc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b4:	4b23      	ldr	r3, [pc, #140]	; (8004444 <xTaskResumeAll+0x134>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d302      	bcc.n	80043c4 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 80043be:	4b22      	ldr	r3, [pc, #136]	; (8004448 <xTaskResumeAll+0x138>)
 80043c0:	2201      	movs	r2, #1
 80043c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043c4:	4b1c      	ldr	r3, [pc, #112]	; (8004438 <xTaskResumeAll+0x128>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1c8      	bne.n	800435e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80043d2:	f000 fb47 	bl	8004a64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80043d6:	4b1d      	ldr	r3, [pc, #116]	; (800444c <xTaskResumeAll+0x13c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d010      	beq.n	8004404 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80043e2:	f000 f849 	bl	8004478 <xTaskIncrementTick>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d002      	beq.n	80043f2 <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 80043ec:	4b16      	ldr	r3, [pc, #88]	; (8004448 <xTaskResumeAll+0x138>)
 80043ee:	2201      	movs	r2, #1
 80043f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3b01      	subs	r3, #1
 80043f6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1f1      	bne.n	80043e2 <xTaskResumeAll+0xd2>

						uxPendedTicks = 0;
 80043fe:	4b13      	ldr	r3, [pc, #76]	; (800444c <xTaskResumeAll+0x13c>)
 8004400:	2200      	movs	r2, #0
 8004402:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004404:	4b10      	ldr	r3, [pc, #64]	; (8004448 <xTaskResumeAll+0x138>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d009      	beq.n	8004420 <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800440c:	2301      	movs	r3, #1
 800440e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004410:	4b0f      	ldr	r3, [pc, #60]	; (8004450 <xTaskResumeAll+0x140>)
 8004412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	f3bf 8f4f 	dsb	sy
 800441c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004420:	f000 fedc 	bl	80051dc <vPortExitCritical>

	return xAlreadyYielded;
 8004424:	68bb      	ldr	r3, [r7, #8]
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	200005a8 	.word	0x200005a8
 8004434:	20000580 	.word	0x20000580
 8004438:	20000540 	.word	0x20000540
 800443c:	20000588 	.word	0x20000588
 8004440:	20000484 	.word	0x20000484
 8004444:	20000480 	.word	0x20000480
 8004448:	20000594 	.word	0x20000594
 800444c:	20000590 	.word	0x20000590
 8004450:	e000ed04 	.word	0xe000ed04

08004454 <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800445a:	f000 ff6d 	bl	8005338 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800445e:	2300      	movs	r3, #0
 8004460:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8004462:	4b04      	ldr	r3, [pc, #16]	; (8004474 <xTaskGetTickCountFromISR+0x20>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004468:	683b      	ldr	r3, [r7, #0]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	20000584 	.word	0x20000584

08004478 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800447e:	2300      	movs	r3, #0
 8004480:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004482:	4b51      	ldr	r3, [pc, #324]	; (80045c8 <xTaskIncrementTick+0x150>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	f040 808d 	bne.w	80045a6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800448c:	4b4f      	ldr	r3, [pc, #316]	; (80045cc <xTaskIncrementTick+0x154>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3301      	adds	r3, #1
 8004492:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004494:	4a4d      	ldr	r2, [pc, #308]	; (80045cc <xTaskIncrementTick+0x154>)
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d121      	bne.n	80044e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80044a0:	4b4b      	ldr	r3, [pc, #300]	; (80045d0 <xTaskIncrementTick+0x158>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00b      	beq.n	80044c2 <xTaskIncrementTick+0x4a>
 80044aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ae:	b672      	cpsid	i
 80044b0:	f383 8811 	msr	BASEPRI, r3
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	f3bf 8f4f 	dsb	sy
 80044bc:	b662      	cpsie	i
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	e7fe      	b.n	80044c0 <xTaskIncrementTick+0x48>
 80044c2:	4b43      	ldr	r3, [pc, #268]	; (80045d0 <xTaskIncrementTick+0x158>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	4b42      	ldr	r3, [pc, #264]	; (80045d4 <xTaskIncrementTick+0x15c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a40      	ldr	r2, [pc, #256]	; (80045d0 <xTaskIncrementTick+0x158>)
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	4a40      	ldr	r2, [pc, #256]	; (80045d4 <xTaskIncrementTick+0x15c>)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	4b40      	ldr	r3, [pc, #256]	; (80045d8 <xTaskIncrementTick+0x160>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3301      	adds	r3, #1
 80044dc:	4a3e      	ldr	r2, [pc, #248]	; (80045d8 <xTaskIncrementTick+0x160>)
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	f000 fac0 	bl	8004a64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80044e4:	4b3d      	ldr	r3, [pc, #244]	; (80045dc <xTaskIncrementTick+0x164>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d34c      	bcc.n	8004588 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044ee:	4b38      	ldr	r3, [pc, #224]	; (80045d0 <xTaskIncrementTick+0x158>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d104      	bne.n	8004502 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044f8:	4b38      	ldr	r3, [pc, #224]	; (80045dc <xTaskIncrementTick+0x164>)
 80044fa:	f04f 32ff 	mov.w	r2, #4294967295
 80044fe:	601a      	str	r2, [r3, #0]
					break;
 8004500:	e042      	b.n	8004588 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004502:	4b33      	ldr	r3, [pc, #204]	; (80045d0 <xTaskIncrementTick+0x158>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	429a      	cmp	r2, r3
 8004518:	d203      	bcs.n	8004522 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800451a:	4a30      	ldr	r2, [pc, #192]	; (80045dc <xTaskIncrementTick+0x164>)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004520:	e032      	b.n	8004588 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	3304      	adds	r3, #4
 8004526:	4618      	mov	r0, r3
 8004528:	f7fe ff45 	bl	80033b6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004530:	2b00      	cmp	r3, #0
 8004532:	d004      	beq.n	800453e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	3318      	adds	r3, #24
 8004538:	4618      	mov	r0, r3
 800453a:	f7fe ff3c 	bl	80033b6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	4618      	mov	r0, r3
 8004542:	f002 fccd 	bl	8006ee0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454a:	2201      	movs	r2, #1
 800454c:	409a      	lsls	r2, r3
 800454e:	4b24      	ldr	r3, [pc, #144]	; (80045e0 <xTaskIncrementTick+0x168>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4313      	orrs	r3, r2
 8004554:	4a22      	ldr	r2, [pc, #136]	; (80045e0 <xTaskIncrementTick+0x168>)
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800455c:	4613      	mov	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4a1f      	ldr	r2, [pc, #124]	; (80045e4 <xTaskIncrementTick+0x16c>)
 8004566:	441a      	add	r2, r3
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	3304      	adds	r3, #4
 800456c:	4619      	mov	r1, r3
 800456e:	4610      	mov	r0, r2
 8004570:	f7fe fec4 	bl	80032fc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004578:	4b1b      	ldr	r3, [pc, #108]	; (80045e8 <xTaskIncrementTick+0x170>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457e:	429a      	cmp	r2, r3
 8004580:	d3b5      	bcc.n	80044ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004582:	2301      	movs	r3, #1
 8004584:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004586:	e7b2      	b.n	80044ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004588:	4b17      	ldr	r3, [pc, #92]	; (80045e8 <xTaskIncrementTick+0x170>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800458e:	4915      	ldr	r1, [pc, #84]	; (80045e4 <xTaskIncrementTick+0x16c>)
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	440b      	add	r3, r1
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d907      	bls.n	80045b0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80045a0:	2301      	movs	r3, #1
 80045a2:	617b      	str	r3, [r7, #20]
 80045a4:	e004      	b.n	80045b0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80045a6:	4b11      	ldr	r3, [pc, #68]	; (80045ec <xTaskIncrementTick+0x174>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	3301      	adds	r3, #1
 80045ac:	4a0f      	ldr	r2, [pc, #60]	; (80045ec <xTaskIncrementTick+0x174>)
 80045ae:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80045b0:	4b0f      	ldr	r3, [pc, #60]	; (80045f0 <xTaskIncrementTick+0x178>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80045b8:	2301      	movs	r3, #1
 80045ba:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80045bc:	697b      	ldr	r3, [r7, #20]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	200005a8 	.word	0x200005a8
 80045cc:	20000584 	.word	0x20000584
 80045d0:	20000538 	.word	0x20000538
 80045d4:	2000053c 	.word	0x2000053c
 80045d8:	20000598 	.word	0x20000598
 80045dc:	200005a0 	.word	0x200005a0
 80045e0:	20000588 	.word	0x20000588
 80045e4:	20000484 	.word	0x20000484
 80045e8:	20000480 	.word	0x20000480
 80045ec:	20000590 	.word	0x20000590
 80045f0:	20000594 	.word	0x20000594

080045f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80045fa:	4b30      	ldr	r3, [pc, #192]	; (80046bc <vTaskSwitchContext+0xc8>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004602:	4b2f      	ldr	r3, [pc, #188]	; (80046c0 <vTaskSwitchContext+0xcc>)
 8004604:	2201      	movs	r2, #1
 8004606:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004608:	e053      	b.n	80046b2 <vTaskSwitchContext+0xbe>
		xYieldPending = pdFALSE;
 800460a:	4b2d      	ldr	r3, [pc, #180]	; (80046c0 <vTaskSwitchContext+0xcc>)
 800460c:	2200      	movs	r2, #0
 800460e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004610:	4b2c      	ldr	r3, [pc, #176]	; (80046c4 <vTaskSwitchContext+0xd0>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	fab3 f383 	clz	r3, r3
 800461c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800461e:	7afb      	ldrb	r3, [r7, #11]
 8004620:	f1c3 031f 	rsb	r3, r3, #31
 8004624:	617b      	str	r3, [r7, #20]
 8004626:	4928      	ldr	r1, [pc, #160]	; (80046c8 <vTaskSwitchContext+0xd4>)
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	4613      	mov	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4413      	add	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	440b      	add	r3, r1
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10b      	bne.n	8004652 <vTaskSwitchContext+0x5e>
	__asm volatile
 800463a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463e:	b672      	cpsid	i
 8004640:	f383 8811 	msr	BASEPRI, r3
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	b662      	cpsie	i
 800464e:	607b      	str	r3, [r7, #4]
 8004650:	e7fe      	b.n	8004650 <vTaskSwitchContext+0x5c>
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	4613      	mov	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4413      	add	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4a1a      	ldr	r2, [pc, #104]	; (80046c8 <vTaskSwitchContext+0xd4>)
 800465e:	4413      	add	r3, r2
 8004660:	613b      	str	r3, [r7, #16]
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	605a      	str	r2, [r3, #4]
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	3308      	adds	r3, #8
 8004674:	429a      	cmp	r2, r3
 8004676:	d104      	bne.n	8004682 <vTaskSwitchContext+0x8e>
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	605a      	str	r2, [r3, #4]
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	4a10      	ldr	r2, [pc, #64]	; (80046cc <vTaskSwitchContext+0xd8>)
 800468a:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800468c:	4b0f      	ldr	r3, [pc, #60]	; (80046cc <vTaskSwitchContext+0xd8>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	3334      	adds	r3, #52	; 0x34
 8004692:	2205      	movs	r2, #5
 8004694:	490e      	ldr	r1, [pc, #56]	; (80046d0 <vTaskSwitchContext+0xdc>)
 8004696:	4618      	mov	r0, r3
 8004698:	f002 fe44 	bl	8007324 <memcmp>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d005      	beq.n	80046ae <vTaskSwitchContext+0xba>
 80046a2:	4b0a      	ldr	r3, [pc, #40]	; (80046cc <vTaskSwitchContext+0xd8>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f002 fbd8 	bl	8006e5c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80046ac:	e001      	b.n	80046b2 <vTaskSwitchContext+0xbe>
		traceTASK_SWITCHED_IN();
 80046ae:	f002 fb77 	bl	8006da0 <SEGGER_SYSVIEW_OnIdle>
}
 80046b2:	bf00      	nop
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	200005a8 	.word	0x200005a8
 80046c0:	20000594 	.word	0x20000594
 80046c4:	20000588 	.word	0x20000588
 80046c8:	20000484 	.word	0x20000484
 80046cc:	20000480 	.word	0x20000480
 80046d0:	08007400 	.word	0x08007400

080046d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10b      	bne.n	80046fc <vTaskPlaceOnEventList+0x28>
 80046e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e8:	b672      	cpsid	i
 80046ea:	f383 8811 	msr	BASEPRI, r3
 80046ee:	f3bf 8f6f 	isb	sy
 80046f2:	f3bf 8f4f 	dsb	sy
 80046f6:	b662      	cpsie	i
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	e7fe      	b.n	80046fa <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046fc:	4b07      	ldr	r3, [pc, #28]	; (800471c <vTaskPlaceOnEventList+0x48>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	3318      	adds	r3, #24
 8004702:	4619      	mov	r1, r3
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f7fe fe1d 	bl	8003344 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800470a:	2101      	movs	r1, #1
 800470c:	6838      	ldr	r0, [r7, #0]
 800470e:	f000 fbb3 	bl	8004e78 <prvAddCurrentTaskToDelayedList>
}
 8004712:	bf00      	nop
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	20000480 	.word	0x20000480

08004720 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10b      	bne.n	800474e <xTaskRemoveFromEventList+0x2e>
 8004736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473a:	b672      	cpsid	i
 800473c:	f383 8811 	msr	BASEPRI, r3
 8004740:	f3bf 8f6f 	isb	sy
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	b662      	cpsie	i
 800474a:	60fb      	str	r3, [r7, #12]
 800474c:	e7fe      	b.n	800474c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	3318      	adds	r3, #24
 8004752:	4618      	mov	r0, r3
 8004754:	f7fe fe2f 	bl	80033b6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004758:	4b1f      	ldr	r3, [pc, #124]	; (80047d8 <xTaskRemoveFromEventList+0xb8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d120      	bne.n	80047a2 <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	3304      	adds	r3, #4
 8004764:	4618      	mov	r0, r3
 8004766:	f7fe fe26 	bl	80033b6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	4618      	mov	r0, r3
 800476e:	f002 fbb7 	bl	8006ee0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004776:	2201      	movs	r2, #1
 8004778:	409a      	lsls	r2, r3
 800477a:	4b18      	ldr	r3, [pc, #96]	; (80047dc <xTaskRemoveFromEventList+0xbc>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4313      	orrs	r3, r2
 8004780:	4a16      	ldr	r2, [pc, #88]	; (80047dc <xTaskRemoveFromEventList+0xbc>)
 8004782:	6013      	str	r3, [r2, #0]
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004788:	4613      	mov	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4a13      	ldr	r2, [pc, #76]	; (80047e0 <xTaskRemoveFromEventList+0xc0>)
 8004792:	441a      	add	r2, r3
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	3304      	adds	r3, #4
 8004798:	4619      	mov	r1, r3
 800479a:	4610      	mov	r0, r2
 800479c:	f7fe fdae 	bl	80032fc <vListInsertEnd>
 80047a0:	e005      	b.n	80047ae <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	3318      	adds	r3, #24
 80047a6:	4619      	mov	r1, r3
 80047a8:	480e      	ldr	r0, [pc, #56]	; (80047e4 <xTaskRemoveFromEventList+0xc4>)
 80047aa:	f7fe fda7 	bl	80032fc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b2:	4b0d      	ldr	r3, [pc, #52]	; (80047e8 <xTaskRemoveFromEventList+0xc8>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d905      	bls.n	80047c8 <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80047bc:	2301      	movs	r3, #1
 80047be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80047c0:	4b0a      	ldr	r3, [pc, #40]	; (80047ec <xTaskRemoveFromEventList+0xcc>)
 80047c2:	2201      	movs	r2, #1
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	e001      	b.n	80047cc <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 80047c8:	2300      	movs	r3, #0
 80047ca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80047cc:	697b      	ldr	r3, [r7, #20]
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3718      	adds	r7, #24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	200005a8 	.word	0x200005a8
 80047dc:	20000588 	.word	0x20000588
 80047e0:	20000484 	.word	0x20000484
 80047e4:	20000540 	.word	0x20000540
 80047e8:	20000480 	.word	0x20000480
 80047ec:	20000594 	.word	0x20000594

080047f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80047f8:	4b06      	ldr	r3, [pc, #24]	; (8004814 <vTaskInternalSetTimeOutState+0x24>)
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004800:	4b05      	ldr	r3, [pc, #20]	; (8004818 <vTaskInternalSetTimeOutState+0x28>)
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	605a      	str	r2, [r3, #4]
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr
 8004814:	20000598 	.word	0x20000598
 8004818:	20000584 	.word	0x20000584

0800481c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b088      	sub	sp, #32
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10b      	bne.n	8004844 <xTaskCheckForTimeOut+0x28>
 800482c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004830:	b672      	cpsid	i
 8004832:	f383 8811 	msr	BASEPRI, r3
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	b662      	cpsie	i
 8004840:	613b      	str	r3, [r7, #16]
 8004842:	e7fe      	b.n	8004842 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10b      	bne.n	8004862 <xTaskCheckForTimeOut+0x46>
 800484a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484e:	b672      	cpsid	i
 8004850:	f383 8811 	msr	BASEPRI, r3
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	b662      	cpsie	i
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	e7fe      	b.n	8004860 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8004862:	f000 fc89 	bl	8005178 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004866:	4b1d      	ldr	r3, [pc, #116]	; (80048dc <xTaskCheckForTimeOut+0xc0>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487e:	d102      	bne.n	8004886 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004880:	2300      	movs	r3, #0
 8004882:	61fb      	str	r3, [r7, #28]
 8004884:	e023      	b.n	80048ce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	4b15      	ldr	r3, [pc, #84]	; (80048e0 <xTaskCheckForTimeOut+0xc4>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	429a      	cmp	r2, r3
 8004890:	d007      	beq.n	80048a2 <xTaskCheckForTimeOut+0x86>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	429a      	cmp	r2, r3
 800489a:	d302      	bcc.n	80048a2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800489c:	2301      	movs	r3, #1
 800489e:	61fb      	str	r3, [r7, #28]
 80048a0:	e015      	b.n	80048ce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d20b      	bcs.n	80048c4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	1ad2      	subs	r2, r2, r3
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7ff ff99 	bl	80047f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80048be:	2300      	movs	r3, #0
 80048c0:	61fb      	str	r3, [r7, #28]
 80048c2:	e004      	b.n	80048ce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	2200      	movs	r2, #0
 80048c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80048ca:	2301      	movs	r3, #1
 80048cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80048ce:	f000 fc85 	bl	80051dc <vPortExitCritical>

	return xReturn;
 80048d2:	69fb      	ldr	r3, [r7, #28]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3720      	adds	r7, #32
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	20000584 	.word	0x20000584
 80048e0:	20000598 	.word	0x20000598

080048e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80048e8:	4b03      	ldr	r3, [pc, #12]	; (80048f8 <vTaskMissedYield+0x14>)
 80048ea:	2201      	movs	r2, #1
 80048ec:	601a      	str	r2, [r3, #0]
}
 80048ee:	bf00      	nop
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	20000594 	.word	0x20000594

080048fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004904:	f000 f852 	bl	80049ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004908:	4b06      	ldr	r3, [pc, #24]	; (8004924 <prvIdleTask+0x28>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d9f9      	bls.n	8004904 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004910:	4b05      	ldr	r3, [pc, #20]	; (8004928 <prvIdleTask+0x2c>)
 8004912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004920:	e7f0      	b.n	8004904 <prvIdleTask+0x8>
 8004922:	bf00      	nop
 8004924:	20000484 	.word	0x20000484
 8004928:	e000ed04 	.word	0xe000ed04

0800492c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004932:	2300      	movs	r3, #0
 8004934:	607b      	str	r3, [r7, #4]
 8004936:	e00c      	b.n	8004952 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	4613      	mov	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4a12      	ldr	r2, [pc, #72]	; (800498c <prvInitialiseTaskLists+0x60>)
 8004944:	4413      	add	r3, r2
 8004946:	4618      	mov	r0, r3
 8004948:	f7fe fcab 	bl	80032a2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3301      	adds	r3, #1
 8004950:	607b      	str	r3, [r7, #4]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b06      	cmp	r3, #6
 8004956:	d9ef      	bls.n	8004938 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004958:	480d      	ldr	r0, [pc, #52]	; (8004990 <prvInitialiseTaskLists+0x64>)
 800495a:	f7fe fca2 	bl	80032a2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800495e:	480d      	ldr	r0, [pc, #52]	; (8004994 <prvInitialiseTaskLists+0x68>)
 8004960:	f7fe fc9f 	bl	80032a2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004964:	480c      	ldr	r0, [pc, #48]	; (8004998 <prvInitialiseTaskLists+0x6c>)
 8004966:	f7fe fc9c 	bl	80032a2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800496a:	480c      	ldr	r0, [pc, #48]	; (800499c <prvInitialiseTaskLists+0x70>)
 800496c:	f7fe fc99 	bl	80032a2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004970:	480b      	ldr	r0, [pc, #44]	; (80049a0 <prvInitialiseTaskLists+0x74>)
 8004972:	f7fe fc96 	bl	80032a2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004976:	4b0b      	ldr	r3, [pc, #44]	; (80049a4 <prvInitialiseTaskLists+0x78>)
 8004978:	4a05      	ldr	r2, [pc, #20]	; (8004990 <prvInitialiseTaskLists+0x64>)
 800497a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800497c:	4b0a      	ldr	r3, [pc, #40]	; (80049a8 <prvInitialiseTaskLists+0x7c>)
 800497e:	4a05      	ldr	r2, [pc, #20]	; (8004994 <prvInitialiseTaskLists+0x68>)
 8004980:	601a      	str	r2, [r3, #0]
}
 8004982:	bf00      	nop
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	20000484 	.word	0x20000484
 8004990:	20000510 	.word	0x20000510
 8004994:	20000524 	.word	0x20000524
 8004998:	20000540 	.word	0x20000540
 800499c:	20000554 	.word	0x20000554
 80049a0:	2000056c 	.word	0x2000056c
 80049a4:	20000538 	.word	0x20000538
 80049a8:	2000053c 	.word	0x2000053c

080049ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049b2:	e019      	b.n	80049e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80049b4:	f000 fbe0 	bl	8005178 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049b8:	4b0f      	ldr	r3, [pc, #60]	; (80049f8 <prvCheckTasksWaitingTermination+0x4c>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3304      	adds	r3, #4
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7fe fcf6 	bl	80033b6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80049ca:	4b0c      	ldr	r3, [pc, #48]	; (80049fc <prvCheckTasksWaitingTermination+0x50>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	3b01      	subs	r3, #1
 80049d0:	4a0a      	ldr	r2, [pc, #40]	; (80049fc <prvCheckTasksWaitingTermination+0x50>)
 80049d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049d4:	4b0a      	ldr	r3, [pc, #40]	; (8004a00 <prvCheckTasksWaitingTermination+0x54>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3b01      	subs	r3, #1
 80049da:	4a09      	ldr	r2, [pc, #36]	; (8004a00 <prvCheckTasksWaitingTermination+0x54>)
 80049dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80049de:	f000 fbfd 	bl	80051dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f80e 	bl	8004a04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049e8:	4b05      	ldr	r3, [pc, #20]	; (8004a00 <prvCheckTasksWaitingTermination+0x54>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1e1      	bne.n	80049b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80049f0:	bf00      	nop
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	20000554 	.word	0x20000554
 80049fc:	20000580 	.word	0x20000580
 8004a00:	20000568 	.word	0x20000568

08004a04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d108      	bne.n	8004a28 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 fdee 	bl	80055fc <vPortFree>
				vPortFree( pxTCB );
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 fdeb 	bl	80055fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a26:	e019      	b.n	8004a5c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d103      	bne.n	8004a3a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 fde2 	bl	80055fc <vPortFree>
	}
 8004a38:	e010      	b.n	8004a5c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d00b      	beq.n	8004a5c <prvDeleteTCB+0x58>
 8004a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a48:	b672      	cpsid	i
 8004a4a:	f383 8811 	msr	BASEPRI, r3
 8004a4e:	f3bf 8f6f 	isb	sy
 8004a52:	f3bf 8f4f 	dsb	sy
 8004a56:	b662      	cpsie	i
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	e7fe      	b.n	8004a5a <prvDeleteTCB+0x56>
	}
 8004a5c:	bf00      	nop
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a6a:	4b0c      	ldr	r3, [pc, #48]	; (8004a9c <prvResetNextTaskUnblockTime+0x38>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d104      	bne.n	8004a7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a74:	4b0a      	ldr	r3, [pc, #40]	; (8004aa0 <prvResetNextTaskUnblockTime+0x3c>)
 8004a76:	f04f 32ff 	mov.w	r2, #4294967295
 8004a7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a7c:	e008      	b.n	8004a90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a7e:	4b07      	ldr	r3, [pc, #28]	; (8004a9c <prvResetNextTaskUnblockTime+0x38>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	4a04      	ldr	r2, [pc, #16]	; (8004aa0 <prvResetNextTaskUnblockTime+0x3c>)
 8004a8e:	6013      	str	r3, [r2, #0]
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	20000538 	.word	0x20000538
 8004aa0:	200005a0 	.word	0x200005a0

08004aa4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004aaa:	4b0b      	ldr	r3, [pc, #44]	; (8004ad8 <xTaskGetSchedulerState+0x34>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d102      	bne.n	8004ab8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	607b      	str	r3, [r7, #4]
 8004ab6:	e008      	b.n	8004aca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ab8:	4b08      	ldr	r3, [pc, #32]	; (8004adc <xTaskGetSchedulerState+0x38>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d102      	bne.n	8004ac6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	607b      	str	r3, [r7, #4]
 8004ac4:	e001      	b.n	8004aca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004aca:	687b      	ldr	r3, [r7, #4]
	}
 8004acc:	4618      	mov	r0, r3
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	2000058c 	.word	0x2000058c
 8004adc:	200005a8 	.word	0x200005a8

08004ae0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004aec:	2300      	movs	r3, #0
 8004aee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d06e      	beq.n	8004bd4 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004afa:	4b39      	ldr	r3, [pc, #228]	; (8004be0 <xTaskPriorityInherit+0x100>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d25e      	bcs.n	8004bc2 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	db06      	blt.n	8004b1a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b0c:	4b34      	ldr	r3, [pc, #208]	; (8004be0 <xTaskPriorityInherit+0x100>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b12:	f1c3 0207 	rsb	r2, r3, #7
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	6959      	ldr	r1, [r3, #20]
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b22:	4613      	mov	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4a2e      	ldr	r2, [pc, #184]	; (8004be4 <xTaskPriorityInherit+0x104>)
 8004b2c:	4413      	add	r3, r2
 8004b2e:	4299      	cmp	r1, r3
 8004b30:	d13a      	bne.n	8004ba8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	3304      	adds	r3, #4
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fe fc3d 	bl	80033b6 <uxListRemove>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d115      	bne.n	8004b6e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b46:	4927      	ldr	r1, [pc, #156]	; (8004be4 <xTaskPriorityInherit+0x104>)
 8004b48:	4613      	mov	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	440b      	add	r3, r1
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10a      	bne.n	8004b6e <xTaskPriorityInherit+0x8e>
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b62:	43da      	mvns	r2, r3
 8004b64:	4b20      	ldr	r3, [pc, #128]	; (8004be8 <xTaskPriorityInherit+0x108>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4013      	ands	r3, r2
 8004b6a:	4a1f      	ldr	r2, [pc, #124]	; (8004be8 <xTaskPriorityInherit+0x108>)
 8004b6c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b6e:	4b1c      	ldr	r3, [pc, #112]	; (8004be0 <xTaskPriorityInherit+0x100>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	62da      	str	r2, [r3, #44]	; 0x2c
					prvReaddTaskToReadyList( pxMutexHolderTCB );
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	409a      	lsls	r2, r3
 8004b80:	4b19      	ldr	r3, [pc, #100]	; (8004be8 <xTaskPriorityInherit+0x108>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	4a18      	ldr	r2, [pc, #96]	; (8004be8 <xTaskPriorityInherit+0x108>)
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4a13      	ldr	r2, [pc, #76]	; (8004be4 <xTaskPriorityInherit+0x104>)
 8004b98:	441a      	add	r2, r3
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	f7fe fbab 	bl	80032fc <vListInsertEnd>
 8004ba6:	e004      	b.n	8004bb2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004ba8:	4b0d      	ldr	r3, [pc, #52]	; (8004be0 <xTaskPriorityInherit+0x100>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	2049      	movs	r0, #73	; 0x49
 8004bb8:	f001 fc8e 	bl	80064d8 <SEGGER_SYSVIEW_RecordU32>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	e008      	b.n	8004bd4 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bc6:	4b06      	ldr	r3, [pc, #24]	; (8004be0 <xTaskPriorityInherit+0x100>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d201      	bcs.n	8004bd4 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
	}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	20000480 	.word	0x20000480
 8004be4:	20000484 	.word	0x20000484
 8004be8:	20000588 	.word	0x20000588

08004bec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d075      	beq.n	8004cee <xTaskPriorityDisinherit+0x102>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c02:	4b3d      	ldr	r3, [pc, #244]	; (8004cf8 <xTaskPriorityDisinherit+0x10c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d00b      	beq.n	8004c24 <xTaskPriorityDisinherit+0x38>
 8004c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c10:	b672      	cpsid	i
 8004c12:	f383 8811 	msr	BASEPRI, r3
 8004c16:	f3bf 8f6f 	isb	sy
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	b662      	cpsie	i
 8004c20:	60fb      	str	r3, [r7, #12]
 8004c22:	e7fe      	b.n	8004c22 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10b      	bne.n	8004c44 <xTaskPriorityDisinherit+0x58>
 8004c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c30:	b672      	cpsid	i
 8004c32:	f383 8811 	msr	BASEPRI, r3
 8004c36:	f3bf 8f6f 	isb	sy
 8004c3a:	f3bf 8f4f 	dsb	sy
 8004c3e:	b662      	cpsie	i
 8004c40:	60bb      	str	r3, [r7, #8]
 8004c42:	e7fe      	b.n	8004c42 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c48:	1e5a      	subs	r2, r3, #1
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d049      	beq.n	8004cee <xTaskPriorityDisinherit+0x102>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d145      	bne.n	8004cee <xTaskPriorityDisinherit+0x102>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	3304      	adds	r3, #4
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fe fba5 	bl	80033b6 <uxListRemove>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d115      	bne.n	8004c9e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c76:	4921      	ldr	r1, [pc, #132]	; (8004cfc <xTaskPriorityDisinherit+0x110>)
 8004c78:	4613      	mov	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	440b      	add	r3, r1
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10a      	bne.n	8004c9e <xTaskPriorityDisinherit+0xb2>
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c92:	43da      	mvns	r2, r3
 8004c94:	4b1a      	ldr	r3, [pc, #104]	; (8004d00 <xTaskPriorityDisinherit+0x114>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4013      	ands	r3, r2
 8004c9a:	4a19      	ldr	r2, [pc, #100]	; (8004d00 <xTaskPriorityDisinherit+0x114>)
 8004c9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	204a      	movs	r0, #74	; 0x4a
 8004ca4:	f001 fc18 	bl	80064d8 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb4:	f1c3 0207 	rsb	r2, r3, #7
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	409a      	lsls	r2, r3
 8004cc4:	4b0e      	ldr	r3, [pc, #56]	; (8004d00 <xTaskPriorityDisinherit+0x114>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	4a0d      	ldr	r2, [pc, #52]	; (8004d00 <xTaskPriorityDisinherit+0x114>)
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4a08      	ldr	r2, [pc, #32]	; (8004cfc <xTaskPriorityDisinherit+0x110>)
 8004cdc:	441a      	add	r2, r3
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	f7fe fb09 	bl	80032fc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004cea:	2301      	movs	r3, #1
 8004cec:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004cee:	697b      	ldr	r3, [r7, #20]
	}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3718      	adds	r7, #24
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	20000480 	.word	0x20000480
 8004cfc:	20000484 	.word	0x20000484
 8004d00:	20000588 	.word	0x20000588

08004d04 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b088      	sub	sp, #32
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004d12:	2301      	movs	r3, #1
 8004d14:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 808e 	beq.w	8004e3a <vTaskPriorityDisinheritAfterTimeout+0x136>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10b      	bne.n	8004d3e <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8004d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2a:	b672      	cpsid	i
 8004d2c:	f383 8811 	msr	BASEPRI, r3
 8004d30:	f3bf 8f6f 	isb	sy
 8004d34:	f3bf 8f4f 	dsb	sy
 8004d38:	b662      	cpsie	i
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	e7fe      	b.n	8004d3c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d902      	bls.n	8004d4e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	61fb      	str	r3, [r7, #28]
 8004d4c:	e002      	b.n	8004d54 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d52:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	69fa      	ldr	r2, [r7, #28]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d06d      	beq.n	8004e3a <vTaskPriorityDisinheritAfterTimeout+0x136>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d168      	bne.n	8004e3a <vTaskPriorityDisinheritAfterTimeout+0x136>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004d68:	4b36      	ldr	r3, [pc, #216]	; (8004e44 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d10b      	bne.n	8004d8a <vTaskPriorityDisinheritAfterTimeout+0x86>
 8004d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d76:	b672      	cpsid	i
 8004d78:	f383 8811 	msr	BASEPRI, r3
 8004d7c:	f3bf 8f6f 	isb	sy
 8004d80:	f3bf 8f4f 	dsb	sy
 8004d84:	b662      	cpsie	i
 8004d86:	60bb      	str	r3, [r7, #8]
 8004d88:	e7fe      	b.n	8004d88 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	204a      	movs	r0, #74	; 0x4a
 8004d90:	f001 fba2 	bl	80064d8 <SEGGER_SYSVIEW_RecordU32>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d98:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	69fa      	ldr	r2, [r7, #28]
 8004d9e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	db04      	blt.n	8004db2 <vTaskPriorityDisinheritAfterTimeout+0xae>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	f1c3 0207 	rsb	r2, r3, #7
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	6959      	ldr	r1, [r3, #20]
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	4613      	mov	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4a21      	ldr	r2, [pc, #132]	; (8004e48 <vTaskPriorityDisinheritAfterTimeout+0x144>)
 8004dc2:	4413      	add	r3, r2
 8004dc4:	4299      	cmp	r1, r3
 8004dc6:	d138      	bne.n	8004e3a <vTaskPriorityDisinheritAfterTimeout+0x136>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7fe faf2 	bl	80033b6 <uxListRemove>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d115      	bne.n	8004e04 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ddc:	491a      	ldr	r1, [pc, #104]	; (8004e48 <vTaskPriorityDisinheritAfterTimeout+0x144>)
 8004dde:	4613      	mov	r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	440b      	add	r3, r1
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10a      	bne.n	8004e04 <vTaskPriorityDisinheritAfterTimeout+0x100>
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df2:	2201      	movs	r2, #1
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	43da      	mvns	r2, r3
 8004dfa:	4b14      	ldr	r3, [pc, #80]	; (8004e4c <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	4a12      	ldr	r2, [pc, #72]	; (8004e4c <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8004e02:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f002 f86a 	bl	8006ee0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e10:	2201      	movs	r2, #1
 8004e12:	409a      	lsls	r2, r3
 8004e14:	4b0d      	ldr	r3, [pc, #52]	; (8004e4c <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	4a0c      	ldr	r2, [pc, #48]	; (8004e4c <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8004e1c:	6013      	str	r3, [r2, #0]
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e22:	4613      	mov	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4413      	add	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4a07      	ldr	r2, [pc, #28]	; (8004e48 <vTaskPriorityDisinheritAfterTimeout+0x144>)
 8004e2c:	441a      	add	r2, r3
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	3304      	adds	r3, #4
 8004e32:	4619      	mov	r1, r3
 8004e34:	4610      	mov	r0, r2
 8004e36:	f7fe fa61 	bl	80032fc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e3a:	bf00      	nop
 8004e3c:	3720      	adds	r7, #32
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	20000480 	.word	0x20000480
 8004e48:	20000484 	.word	0x20000484
 8004e4c:	20000588 	.word	0x20000588

08004e50 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004e54:	4b07      	ldr	r3, [pc, #28]	; (8004e74 <pvTaskIncrementMutexHeldCount+0x24>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d004      	beq.n	8004e66 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004e5c:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <pvTaskIncrementMutexHeldCount+0x24>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e62:	3201      	adds	r2, #1
 8004e64:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004e66:	4b03      	ldr	r3, [pc, #12]	; (8004e74 <pvTaskIncrementMutexHeldCount+0x24>)
 8004e68:	681b      	ldr	r3, [r3, #0]
	}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	20000480 	.word	0x20000480

08004e78 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e82:	4b32      	ldr	r3, [pc, #200]	; (8004f4c <prvAddCurrentTaskToDelayedList+0xd4>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e88:	4b31      	ldr	r3, [pc, #196]	; (8004f50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7fe fa91 	bl	80033b6 <uxListRemove>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10b      	bne.n	8004eb2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004e9a:	4b2d      	ldr	r3, [pc, #180]	; (8004f50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea6:	43da      	mvns	r2, r3
 8004ea8:	4b2a      	ldr	r3, [pc, #168]	; (8004f54 <prvAddCurrentTaskToDelayedList+0xdc>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4013      	ands	r3, r2
 8004eae:	4a29      	ldr	r2, [pc, #164]	; (8004f54 <prvAddCurrentTaskToDelayedList+0xdc>)
 8004eb0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb8:	d110      	bne.n	8004edc <prvAddCurrentTaskToDelayedList+0x64>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00d      	beq.n	8004edc <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8004ec0:	4b23      	ldr	r3, [pc, #140]	; (8004f50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	211b      	movs	r1, #27
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f002 f84c 	bl	8006f64 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ecc:	4b20      	ldr	r3, [pc, #128]	; (8004f50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	3304      	adds	r3, #4
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	4820      	ldr	r0, [pc, #128]	; (8004f58 <prvAddCurrentTaskToDelayedList+0xe0>)
 8004ed6:	f7fe fa11 	bl	80032fc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004eda:	e032      	b.n	8004f42 <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ee4:	4b1a      	ldr	r3, [pc, #104]	; (8004f50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d20f      	bcs.n	8004f14 <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004ef4:	4b16      	ldr	r3, [pc, #88]	; (8004f50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2104      	movs	r1, #4
 8004efa:	4618      	mov	r0, r3
 8004efc:	f002 f832 	bl	8006f64 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f00:	4b16      	ldr	r3, [pc, #88]	; (8004f5c <prvAddCurrentTaskToDelayedList+0xe4>)
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	4b12      	ldr	r3, [pc, #72]	; (8004f50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	3304      	adds	r3, #4
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	4610      	mov	r0, r2
 8004f0e:	f7fe fa19 	bl	8003344 <vListInsert>
}
 8004f12:	e016      	b.n	8004f42 <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 8004f14:	4b0e      	ldr	r3, [pc, #56]	; (8004f50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2104      	movs	r1, #4
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f002 f822 	bl	8006f64 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f20:	4b0f      	ldr	r3, [pc, #60]	; (8004f60 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	4b0a      	ldr	r3, [pc, #40]	; (8004f50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	3304      	adds	r3, #4
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	4610      	mov	r0, r2
 8004f2e:	f7fe fa09 	bl	8003344 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f32:	4b0c      	ldr	r3, [pc, #48]	; (8004f64 <prvAddCurrentTaskToDelayedList+0xec>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d202      	bcs.n	8004f42 <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 8004f3c:	4a09      	ldr	r2, [pc, #36]	; (8004f64 <prvAddCurrentTaskToDelayedList+0xec>)
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	6013      	str	r3, [r2, #0]
}
 8004f42:	bf00      	nop
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	20000584 	.word	0x20000584
 8004f50:	20000480 	.word	0x20000480
 8004f54:	20000588 	.word	0x20000588
 8004f58:	2000056c 	.word	0x2000056c
 8004f5c:	2000053c 	.word	0x2000053c
 8004f60:	20000538 	.word	0x20000538
 8004f64:	200005a0 	.word	0x200005a0

08004f68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	3b04      	subs	r3, #4
 8004f78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	3b04      	subs	r3, #4
 8004f86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f023 0201 	bic.w	r2, r3, #1
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	3b04      	subs	r3, #4
 8004f96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f98:	4a0c      	ldr	r2, [pc, #48]	; (8004fcc <pxPortInitialiseStack+0x64>)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	3b14      	subs	r3, #20
 8004fa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	3b04      	subs	r3, #4
 8004fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f06f 0202 	mvn.w	r2, #2
 8004fb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	3b20      	subs	r3, #32
 8004fbc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr
 8004fcc:	08004fd1 	.word	0x08004fd1

08004fd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004fda:	4b13      	ldr	r3, [pc, #76]	; (8005028 <prvTaskExitError+0x58>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe2:	d00b      	beq.n	8004ffc <prvTaskExitError+0x2c>
 8004fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe8:	b672      	cpsid	i
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	b662      	cpsie	i
 8004ff8:	60fb      	str	r3, [r7, #12]
 8004ffa:	e7fe      	b.n	8004ffa <prvTaskExitError+0x2a>
 8004ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005000:	b672      	cpsid	i
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	b662      	cpsie	i
 8005010:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005012:	bf00      	nop
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0fc      	beq.n	8005014 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800501a:	bf00      	nop
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	2000000c 	.word	0x2000000c
 800502c:	00000000 	.word	0x00000000

08005030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005030:	4b07      	ldr	r3, [pc, #28]	; (8005050 <pxCurrentTCBConst2>)
 8005032:	6819      	ldr	r1, [r3, #0]
 8005034:	6808      	ldr	r0, [r1, #0]
 8005036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800503a:	f380 8809 	msr	PSP, r0
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f04f 0000 	mov.w	r0, #0
 8005046:	f380 8811 	msr	BASEPRI, r0
 800504a:	4770      	bx	lr
 800504c:	f3af 8000 	nop.w

08005050 <pxCurrentTCBConst2>:
 8005050:	20000480 	.word	0x20000480
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005054:	bf00      	nop
 8005056:	bf00      	nop

08005058 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005058:	4808      	ldr	r0, [pc, #32]	; (800507c <prvPortStartFirstTask+0x24>)
 800505a:	6800      	ldr	r0, [r0, #0]
 800505c:	6800      	ldr	r0, [r0, #0]
 800505e:	f380 8808 	msr	MSP, r0
 8005062:	f04f 0000 	mov.w	r0, #0
 8005066:	f380 8814 	msr	CONTROL, r0
 800506a:	b662      	cpsie	i
 800506c:	b661      	cpsie	f
 800506e:	f3bf 8f4f 	dsb	sy
 8005072:	f3bf 8f6f 	isb	sy
 8005076:	df00      	svc	0
 8005078:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800507a:	bf00      	nop
 800507c:	e000ed08 	.word	0xe000ed08

08005080 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005086:	4b36      	ldr	r3, [pc, #216]	; (8005160 <xPortStartScheduler+0xe0>)
 8005088:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	b2db      	uxtb	r3, r3
 8005090:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	22ff      	movs	r2, #255	; 0xff
 8005096:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	b2db      	uxtb	r3, r3
 800509e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050a0:	78fb      	ldrb	r3, [r7, #3]
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80050a8:	b2da      	uxtb	r2, r3
 80050aa:	4b2e      	ldr	r3, [pc, #184]	; (8005164 <xPortStartScheduler+0xe4>)
 80050ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80050ae:	4b2e      	ldr	r3, [pc, #184]	; (8005168 <xPortStartScheduler+0xe8>)
 80050b0:	2207      	movs	r2, #7
 80050b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050b4:	e009      	b.n	80050ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80050b6:	4b2c      	ldr	r3, [pc, #176]	; (8005168 <xPortStartScheduler+0xe8>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	3b01      	subs	r3, #1
 80050bc:	4a2a      	ldr	r2, [pc, #168]	; (8005168 <xPortStartScheduler+0xe8>)
 80050be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80050c0:	78fb      	ldrb	r3, [r7, #3]
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050ca:	78fb      	ldrb	r3, [r7, #3]
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d2:	2b80      	cmp	r3, #128	; 0x80
 80050d4:	d0ef      	beq.n	80050b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80050d6:	4b24      	ldr	r3, [pc, #144]	; (8005168 <xPortStartScheduler+0xe8>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f1c3 0307 	rsb	r3, r3, #7
 80050de:	2b04      	cmp	r3, #4
 80050e0:	d00b      	beq.n	80050fa <xPortStartScheduler+0x7a>
 80050e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e6:	b672      	cpsid	i
 80050e8:	f383 8811 	msr	BASEPRI, r3
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	b662      	cpsie	i
 80050f6:	60bb      	str	r3, [r7, #8]
 80050f8:	e7fe      	b.n	80050f8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80050fa:	4b1b      	ldr	r3, [pc, #108]	; (8005168 <xPortStartScheduler+0xe8>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	021b      	lsls	r3, r3, #8
 8005100:	4a19      	ldr	r2, [pc, #100]	; (8005168 <xPortStartScheduler+0xe8>)
 8005102:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005104:	4b18      	ldr	r3, [pc, #96]	; (8005168 <xPortStartScheduler+0xe8>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800510c:	4a16      	ldr	r2, [pc, #88]	; (8005168 <xPortStartScheduler+0xe8>)
 800510e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	b2da      	uxtb	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005118:	4b14      	ldr	r3, [pc, #80]	; (800516c <xPortStartScheduler+0xec>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a13      	ldr	r2, [pc, #76]	; (800516c <xPortStartScheduler+0xec>)
 800511e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005122:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005124:	4b11      	ldr	r3, [pc, #68]	; (800516c <xPortStartScheduler+0xec>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a10      	ldr	r2, [pc, #64]	; (800516c <xPortStartScheduler+0xec>)
 800512a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800512e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005130:	f000 f8d4 	bl	80052dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005134:	4b0e      	ldr	r3, [pc, #56]	; (8005170 <xPortStartScheduler+0xf0>)
 8005136:	2200      	movs	r2, #0
 8005138:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800513a:	f000 f8f3 	bl	8005324 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800513e:	4b0d      	ldr	r3, [pc, #52]	; (8005174 <xPortStartScheduler+0xf4>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a0c      	ldr	r2, [pc, #48]	; (8005174 <xPortStartScheduler+0xf4>)
 8005144:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005148:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800514a:	f7ff ff85 	bl	8005058 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800514e:	f7ff fa51 	bl	80045f4 <vTaskSwitchContext>
	prvTaskExitError();
 8005152:	f7ff ff3d 	bl	8004fd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	e000e400 	.word	0xe000e400
 8005164:	200005ac 	.word	0x200005ac
 8005168:	200005b0 	.word	0x200005b0
 800516c:	e000ed20 	.word	0xe000ed20
 8005170:	2000000c 	.word	0x2000000c
 8005174:	e000ef34 	.word	0xe000ef34

08005178 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005182:	b672      	cpsid	i
 8005184:	f383 8811 	msr	BASEPRI, r3
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	b662      	cpsie	i
 8005192:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005194:	4b0f      	ldr	r3, [pc, #60]	; (80051d4 <vPortEnterCritical+0x5c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	3301      	adds	r3, #1
 800519a:	4a0e      	ldr	r2, [pc, #56]	; (80051d4 <vPortEnterCritical+0x5c>)
 800519c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800519e:	4b0d      	ldr	r3, [pc, #52]	; (80051d4 <vPortEnterCritical+0x5c>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d110      	bne.n	80051c8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051a6:	4b0c      	ldr	r3, [pc, #48]	; (80051d8 <vPortEnterCritical+0x60>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00b      	beq.n	80051c8 <vPortEnterCritical+0x50>
 80051b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b4:	b672      	cpsid	i
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	b662      	cpsie	i
 80051c4:	603b      	str	r3, [r7, #0]
 80051c6:	e7fe      	b.n	80051c6 <vPortEnterCritical+0x4e>
	}
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	2000000c 	.word	0x2000000c
 80051d8:	e000ed04 	.word	0xe000ed04

080051dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80051e2:	4b12      	ldr	r3, [pc, #72]	; (800522c <vPortExitCritical+0x50>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10b      	bne.n	8005202 <vPortExitCritical+0x26>
 80051ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ee:	b672      	cpsid	i
 80051f0:	f383 8811 	msr	BASEPRI, r3
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	b662      	cpsie	i
 80051fe:	607b      	str	r3, [r7, #4]
 8005200:	e7fe      	b.n	8005200 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8005202:	4b0a      	ldr	r3, [pc, #40]	; (800522c <vPortExitCritical+0x50>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	3b01      	subs	r3, #1
 8005208:	4a08      	ldr	r2, [pc, #32]	; (800522c <vPortExitCritical+0x50>)
 800520a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800520c:	4b07      	ldr	r3, [pc, #28]	; (800522c <vPortExitCritical+0x50>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d104      	bne.n	800521e <vPortExitCritical+0x42>
 8005214:	2300      	movs	r3, #0
 8005216:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800521e:	bf00      	nop
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	2000000c 	.word	0x2000000c

08005230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005230:	f3ef 8009 	mrs	r0, PSP
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	4b15      	ldr	r3, [pc, #84]	; (8005290 <pxCurrentTCBConst>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	f01e 0f10 	tst.w	lr, #16
 8005240:	bf08      	it	eq
 8005242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800524a:	6010      	str	r0, [r2, #0]
 800524c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005250:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005254:	b672      	cpsid	i
 8005256:	f380 8811 	msr	BASEPRI, r0
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	f3bf 8f6f 	isb	sy
 8005262:	b662      	cpsie	i
 8005264:	f7ff f9c6 	bl	80045f4 <vTaskSwitchContext>
 8005268:	f04f 0000 	mov.w	r0, #0
 800526c:	f380 8811 	msr	BASEPRI, r0
 8005270:	bc09      	pop	{r0, r3}
 8005272:	6819      	ldr	r1, [r3, #0]
 8005274:	6808      	ldr	r0, [r1, #0]
 8005276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800527a:	f01e 0f10 	tst.w	lr, #16
 800527e:	bf08      	it	eq
 8005280:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005284:	f380 8809 	msr	PSP, r0
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop

08005290 <pxCurrentTCBConst>:
 8005290:	20000480 	.word	0x20000480
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005294:	bf00      	nop
 8005296:	bf00      	nop

08005298 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
	__asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a2:	b672      	cpsid	i
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	b662      	cpsie	i
 80052b2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80052b4:	f7ff f8e0 	bl	8004478 <xTaskIncrementTick>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80052be:	4b06      	ldr	r3, [pc, #24]	; (80052d8 <SysTick_Handler+0x40>)
 80052c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	2300      	movs	r3, #0
 80052c8:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80052d0:	bf00      	nop
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	e000ed04 	.word	0xe000ed04

080052dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052e0:	4b0b      	ldr	r3, [pc, #44]	; (8005310 <vPortSetupTimerInterrupt+0x34>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052e6:	4b0b      	ldr	r3, [pc, #44]	; (8005314 <vPortSetupTimerInterrupt+0x38>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052ec:	4b0a      	ldr	r3, [pc, #40]	; (8005318 <vPortSetupTimerInterrupt+0x3c>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a0a      	ldr	r2, [pc, #40]	; (800531c <vPortSetupTimerInterrupt+0x40>)
 80052f2:	fba2 2303 	umull	r2, r3, r2, r3
 80052f6:	099b      	lsrs	r3, r3, #6
 80052f8:	4a09      	ldr	r2, [pc, #36]	; (8005320 <vPortSetupTimerInterrupt+0x44>)
 80052fa:	3b01      	subs	r3, #1
 80052fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80052fe:	4b04      	ldr	r3, [pc, #16]	; (8005310 <vPortSetupTimerInterrupt+0x34>)
 8005300:	2207      	movs	r2, #7
 8005302:	601a      	str	r2, [r3, #0]
}
 8005304:	bf00      	nop
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	e000e010 	.word	0xe000e010
 8005314:	e000e018 	.word	0xe000e018
 8005318:	20000000 	.word	0x20000000
 800531c:	10624dd3 	.word	0x10624dd3
 8005320:	e000e014 	.word	0xe000e014

08005324 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005324:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005334 <vPortEnableVFP+0x10>
 8005328:	6801      	ldr	r1, [r0, #0]
 800532a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800532e:	6001      	str	r1, [r0, #0]
 8005330:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005332:	bf00      	nop
 8005334:	e000ed88 	.word	0xe000ed88

08005338 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800533e:	f3ef 8305 	mrs	r3, IPSR
 8005342:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2b0f      	cmp	r3, #15
 8005348:	d915      	bls.n	8005376 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800534a:	4a18      	ldr	r2, [pc, #96]	; (80053ac <vPortValidateInterruptPriority+0x74>)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4413      	add	r3, r2
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005354:	4b16      	ldr	r3, [pc, #88]	; (80053b0 <vPortValidateInterruptPriority+0x78>)
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	7afa      	ldrb	r2, [r7, #11]
 800535a:	429a      	cmp	r2, r3
 800535c:	d20b      	bcs.n	8005376 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800535e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005362:	b672      	cpsid	i
 8005364:	f383 8811 	msr	BASEPRI, r3
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	b662      	cpsie	i
 8005372:	607b      	str	r3, [r7, #4]
 8005374:	e7fe      	b.n	8005374 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005376:	4b0f      	ldr	r3, [pc, #60]	; (80053b4 <vPortValidateInterruptPriority+0x7c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800537e:	4b0e      	ldr	r3, [pc, #56]	; (80053b8 <vPortValidateInterruptPriority+0x80>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	429a      	cmp	r2, r3
 8005384:	d90b      	bls.n	800539e <vPortValidateInterruptPriority+0x66>
 8005386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538a:	b672      	cpsid	i
 800538c:	f383 8811 	msr	BASEPRI, r3
 8005390:	f3bf 8f6f 	isb	sy
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	b662      	cpsie	i
 800539a:	603b      	str	r3, [r7, #0]
 800539c:	e7fe      	b.n	800539c <vPortValidateInterruptPriority+0x64>
	}
 800539e:	bf00      	nop
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	e000e3f0 	.word	0xe000e3f0
 80053b0:	200005ac 	.word	0x200005ac
 80053b4:	e000ed0c 	.word	0xe000ed0c
 80053b8:	200005b0 	.word	0x200005b0

080053bc <vSetVarulMaxPRIGROUPValue>:

#if(configASSERT_DEFINED == 1 )
void vSetVarulMaxPRIGROUPValue( void)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80053c2:	4b27      	ldr	r3, [pc, #156]	; (8005460 <vSetVarulMaxPRIGROUPValue+0xa4>)
 80053c4:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	22ff      	movs	r2, #255	; 0xff
 80053d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80053dc:	78fb      	ldrb	r3, [r7, #3]
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80053e4:	b2da      	uxtb	r2, r3
 80053e6:	4b1f      	ldr	r3, [pc, #124]	; (8005464 <vSetVarulMaxPRIGROUPValue+0xa8>)
 80053e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80053ea:	4b1f      	ldr	r3, [pc, #124]	; (8005468 <vSetVarulMaxPRIGROUPValue+0xac>)
 80053ec:	2207      	movs	r2, #7
 80053ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053f0:	e009      	b.n	8005406 <vSetVarulMaxPRIGROUPValue+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80053f2:	4b1d      	ldr	r3, [pc, #116]	; (8005468 <vSetVarulMaxPRIGROUPValue+0xac>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	3b01      	subs	r3, #1
 80053f8:	4a1b      	ldr	r2, [pc, #108]	; (8005468 <vSetVarulMaxPRIGROUPValue+0xac>)
 80053fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80053fc:	78fb      	ldrb	r3, [r7, #3]
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	005b      	lsls	r3, r3, #1
 8005402:	b2db      	uxtb	r3, r3
 8005404:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005406:	78fb      	ldrb	r3, [r7, #3]
 8005408:	b2db      	uxtb	r3, r3
 800540a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540e:	2b80      	cmp	r3, #128	; 0x80
 8005410:	d0ef      	beq.n	80053f2 <vSetVarulMaxPRIGROUPValue+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005412:	4b15      	ldr	r3, [pc, #84]	; (8005468 <vSetVarulMaxPRIGROUPValue+0xac>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f1c3 0307 	rsb	r3, r3, #7
 800541a:	2b04      	cmp	r3, #4
 800541c:	d00b      	beq.n	8005436 <vSetVarulMaxPRIGROUPValue+0x7a>
 800541e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005422:	b672      	cpsid	i
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	b662      	cpsie	i
 8005432:	60bb      	str	r3, [r7, #8]
 8005434:	e7fe      	b.n	8005434 <vSetVarulMaxPRIGROUPValue+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005436:	4b0c      	ldr	r3, [pc, #48]	; (8005468 <vSetVarulMaxPRIGROUPValue+0xac>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	021b      	lsls	r3, r3, #8
 800543c:	4a0a      	ldr	r2, [pc, #40]	; (8005468 <vSetVarulMaxPRIGROUPValue+0xac>)
 800543e:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005440:	4b09      	ldr	r3, [pc, #36]	; (8005468 <vSetVarulMaxPRIGROUPValue+0xac>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005448:	4a07      	ldr	r2, [pc, #28]	; (8005468 <vSetVarulMaxPRIGROUPValue+0xac>)
 800544a:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	b2da      	uxtb	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

}
 8005454:	bf00      	nop
 8005456:	3714      	adds	r7, #20
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	e000e400 	.word	0xe000e400
 8005464:	200005ac 	.word	0x200005ac
 8005468:	200005b0 	.word	0x200005b0

0800546c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b08a      	sub	sp, #40	; 0x28
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005474:	2300      	movs	r3, #0
 8005476:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005478:	f7fe ff3c 	bl	80042f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800547c:	4b5a      	ldr	r3, [pc, #360]	; (80055e8 <pvPortMalloc+0x17c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d101      	bne.n	8005488 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005484:	f000 f916 	bl	80056b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005488:	4b58      	ldr	r3, [pc, #352]	; (80055ec <pvPortMalloc+0x180>)
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4013      	ands	r3, r2
 8005490:	2b00      	cmp	r3, #0
 8005492:	f040 8090 	bne.w	80055b6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d01e      	beq.n	80054da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800549c:	2208      	movs	r2, #8
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4413      	add	r3, r2
 80054a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f003 0307 	and.w	r3, r3, #7
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d015      	beq.n	80054da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f023 0307 	bic.w	r3, r3, #7
 80054b4:	3308      	adds	r3, #8
 80054b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f003 0307 	and.w	r3, r3, #7
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00b      	beq.n	80054da <pvPortMalloc+0x6e>
 80054c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c6:	b672      	cpsid	i
 80054c8:	f383 8811 	msr	BASEPRI, r3
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	b662      	cpsie	i
 80054d6:	617b      	str	r3, [r7, #20]
 80054d8:	e7fe      	b.n	80054d8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d06a      	beq.n	80055b6 <pvPortMalloc+0x14a>
 80054e0:	4b43      	ldr	r3, [pc, #268]	; (80055f0 <pvPortMalloc+0x184>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d865      	bhi.n	80055b6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80054ea:	4b42      	ldr	r3, [pc, #264]	; (80055f4 <pvPortMalloc+0x188>)
 80054ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80054ee:	4b41      	ldr	r3, [pc, #260]	; (80055f4 <pvPortMalloc+0x188>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054f4:	e004      	b.n	8005500 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	429a      	cmp	r2, r3
 8005508:	d903      	bls.n	8005512 <pvPortMalloc+0xa6>
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1f1      	bne.n	80054f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005512:	4b35      	ldr	r3, [pc, #212]	; (80055e8 <pvPortMalloc+0x17c>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005518:	429a      	cmp	r2, r3
 800551a:	d04c      	beq.n	80055b6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800551c:	6a3b      	ldr	r3, [r7, #32]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2208      	movs	r2, #8
 8005522:	4413      	add	r3, r2
 8005524:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	1ad2      	subs	r2, r2, r3
 8005536:	2308      	movs	r3, #8
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	429a      	cmp	r2, r3
 800553c:	d920      	bls.n	8005580 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800553e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4413      	add	r3, r2
 8005544:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	f003 0307 	and.w	r3, r3, #7
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00b      	beq.n	8005568 <pvPortMalloc+0xfc>
 8005550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005554:	b672      	cpsid	i
 8005556:	f383 8811 	msr	BASEPRI, r3
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	b662      	cpsie	i
 8005564:	613b      	str	r3, [r7, #16]
 8005566:	e7fe      	b.n	8005566 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	1ad2      	subs	r2, r2, r3
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800557a:	69b8      	ldr	r0, [r7, #24]
 800557c:	f000 f8fc 	bl	8005778 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005580:	4b1b      	ldr	r3, [pc, #108]	; (80055f0 <pvPortMalloc+0x184>)
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	4a19      	ldr	r2, [pc, #100]	; (80055f0 <pvPortMalloc+0x184>)
 800558c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800558e:	4b18      	ldr	r3, [pc, #96]	; (80055f0 <pvPortMalloc+0x184>)
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	4b19      	ldr	r3, [pc, #100]	; (80055f8 <pvPortMalloc+0x18c>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	429a      	cmp	r2, r3
 8005598:	d203      	bcs.n	80055a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800559a:	4b15      	ldr	r3, [pc, #84]	; (80055f0 <pvPortMalloc+0x184>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a16      	ldr	r2, [pc, #88]	; (80055f8 <pvPortMalloc+0x18c>)
 80055a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	4b11      	ldr	r3, [pc, #68]	; (80055ec <pvPortMalloc+0x180>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	431a      	orrs	r2, r3
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80055b6:	f7fe feab 	bl	8004310 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	f003 0307 	and.w	r3, r3, #7
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00b      	beq.n	80055dc <pvPortMalloc+0x170>
 80055c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c8:	b672      	cpsid	i
 80055ca:	f383 8811 	msr	BASEPRI, r3
 80055ce:	f3bf 8f6f 	isb	sy
 80055d2:	f3bf 8f4f 	dsb	sy
 80055d6:	b662      	cpsie	i
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	e7fe      	b.n	80055da <pvPortMalloc+0x16e>
	return pvReturn;
 80055dc:	69fb      	ldr	r3, [r7, #28]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3728      	adds	r7, #40	; 0x28
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	200041bc 	.word	0x200041bc
 80055ec:	200041c8 	.word	0x200041c8
 80055f0:	200041c0 	.word	0x200041c0
 80055f4:	200041b4 	.word	0x200041b4
 80055f8:	200041c4 	.word	0x200041c4

080055fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d04a      	beq.n	80056a4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800560e:	2308      	movs	r3, #8
 8005610:	425b      	negs	r3, r3
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	4413      	add	r3, r2
 8005616:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	4b22      	ldr	r3, [pc, #136]	; (80056ac <vPortFree+0xb0>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4013      	ands	r3, r2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10b      	bne.n	8005642 <vPortFree+0x46>
 800562a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562e:	b672      	cpsid	i
 8005630:	f383 8811 	msr	BASEPRI, r3
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	b662      	cpsie	i
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	e7fe      	b.n	8005640 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00b      	beq.n	8005662 <vPortFree+0x66>
 800564a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564e:	b672      	cpsid	i
 8005650:	f383 8811 	msr	BASEPRI, r3
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	b662      	cpsie	i
 800565e:	60bb      	str	r3, [r7, #8]
 8005660:	e7fe      	b.n	8005660 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	4b11      	ldr	r3, [pc, #68]	; (80056ac <vPortFree+0xb0>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4013      	ands	r3, r2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d019      	beq.n	80056a4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d115      	bne.n	80056a4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	4b0b      	ldr	r3, [pc, #44]	; (80056ac <vPortFree+0xb0>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	43db      	mvns	r3, r3
 8005682:	401a      	ands	r2, r3
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005688:	f7fe fe34 	bl	80042f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	4b07      	ldr	r3, [pc, #28]	; (80056b0 <vPortFree+0xb4>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4413      	add	r3, r2
 8005696:	4a06      	ldr	r2, [pc, #24]	; (80056b0 <vPortFree+0xb4>)
 8005698:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800569a:	6938      	ldr	r0, [r7, #16]
 800569c:	f000 f86c 	bl	8005778 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80056a0:	f7fe fe36 	bl	8004310 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80056a4:	bf00      	nop
 80056a6:	3718      	adds	r7, #24
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	200041c8 	.word	0x200041c8
 80056b0:	200041c0 	.word	0x200041c0

080056b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80056ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80056be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80056c0:	4b27      	ldr	r3, [pc, #156]	; (8005760 <prvHeapInit+0xac>)
 80056c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f003 0307 	and.w	r3, r3, #7
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00c      	beq.n	80056e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	3307      	adds	r3, #7
 80056d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 0307 	bic.w	r3, r3, #7
 80056da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	4a1f      	ldr	r2, [pc, #124]	; (8005760 <prvHeapInit+0xac>)
 80056e4:	4413      	add	r3, r2
 80056e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80056ec:	4a1d      	ldr	r2, [pc, #116]	; (8005764 <prvHeapInit+0xb0>)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80056f2:	4b1c      	ldr	r3, [pc, #112]	; (8005764 <prvHeapInit+0xb0>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	4413      	add	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005700:	2208      	movs	r2, #8
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	1a9b      	subs	r3, r3, r2
 8005706:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f023 0307 	bic.w	r3, r3, #7
 800570e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4a15      	ldr	r2, [pc, #84]	; (8005768 <prvHeapInit+0xb4>)
 8005714:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005716:	4b14      	ldr	r3, [pc, #80]	; (8005768 <prvHeapInit+0xb4>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2200      	movs	r2, #0
 800571c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800571e:	4b12      	ldr	r3, [pc, #72]	; (8005768 <prvHeapInit+0xb4>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2200      	movs	r2, #0
 8005724:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	1ad2      	subs	r2, r2, r3
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005734:	4b0c      	ldr	r3, [pc, #48]	; (8005768 <prvHeapInit+0xb4>)
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	4a0a      	ldr	r2, [pc, #40]	; (800576c <prvHeapInit+0xb8>)
 8005742:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	4a09      	ldr	r2, [pc, #36]	; (8005770 <prvHeapInit+0xbc>)
 800574a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800574c:	4b09      	ldr	r3, [pc, #36]	; (8005774 <prvHeapInit+0xc0>)
 800574e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005752:	601a      	str	r2, [r3, #0]
}
 8005754:	bf00      	nop
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	200005b4 	.word	0x200005b4
 8005764:	200041b4 	.word	0x200041b4
 8005768:	200041bc 	.word	0x200041bc
 800576c:	200041c4 	.word	0x200041c4
 8005770:	200041c0 	.word	0x200041c0
 8005774:	200041c8 	.word	0x200041c8

08005778 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005780:	4b28      	ldr	r3, [pc, #160]	; (8005824 <prvInsertBlockIntoFreeList+0xac>)
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	e002      	b.n	800578c <prvInsertBlockIntoFreeList+0x14>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	429a      	cmp	r2, r3
 8005794:	d8f7      	bhi.n	8005786 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	4413      	add	r3, r2
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d108      	bne.n	80057ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	441a      	add	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	441a      	add	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d118      	bne.n	8005800 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	4b15      	ldr	r3, [pc, #84]	; (8005828 <prvInsertBlockIntoFreeList+0xb0>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d00d      	beq.n	80057f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	441a      	add	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	e008      	b.n	8005808 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80057f6:	4b0c      	ldr	r3, [pc, #48]	; (8005828 <prvInsertBlockIntoFreeList+0xb0>)
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	e003      	b.n	8005808 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	429a      	cmp	r2, r3
 800580e:	d002      	beq.n	8005816 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005816:	bf00      	nop
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	200041b4 	.word	0x200041b4
 8005828:	200041bc 	.word	0x200041bc

0800582c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800582c:	b580      	push	{r7, lr}
 800582e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005830:	4803      	ldr	r0, [pc, #12]	; (8005840 <_cbSendSystemDesc+0x14>)
 8005832:	f001 fa61 	bl	8006cf8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8005836:	4803      	ldr	r0, [pc, #12]	; (8005844 <_cbSendSystemDesc+0x18>)
 8005838:	f001 fa5e 	bl	8006cf8 <SEGGER_SYSVIEW_SendSysDesc>
}
 800583c:	bf00      	nop
 800583e:	bd80      	pop	{r7, pc}
 8005840:	08007408 	.word	0x08007408
 8005844:	08007444 	.word	0x08007444

08005848 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005848:	b580      	push	{r7, lr}
 800584a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800584c:	4b06      	ldr	r3, [pc, #24]	; (8005868 <SEGGER_SYSVIEW_Conf+0x20>)
 800584e:	6818      	ldr	r0, [r3, #0]
 8005850:	4b05      	ldr	r3, [pc, #20]	; (8005868 <SEGGER_SYSVIEW_Conf+0x20>)
 8005852:	6819      	ldr	r1, [r3, #0]
 8005854:	4b05      	ldr	r3, [pc, #20]	; (800586c <SEGGER_SYSVIEW_Conf+0x24>)
 8005856:	4a06      	ldr	r2, [pc, #24]	; (8005870 <SEGGER_SYSVIEW_Conf+0x28>)
 8005858:	f000 fdca 	bl	80063f0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800585c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8005860:	f000 fe0c 	bl	800647c <SEGGER_SYSVIEW_SetRAMBase>
}
 8005864:	bf00      	nop
 8005866:	bd80      	pop	{r7, pc}
 8005868:	20000000 	.word	0x20000000
 800586c:	0800582d 	.word	0x0800582d
 8005870:	080074e4 	.word	0x080074e4

08005874 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005876:	b085      	sub	sp, #20
 8005878:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800587a:	2300      	movs	r3, #0
 800587c:	607b      	str	r3, [r7, #4]
 800587e:	e034      	b.n	80058ea <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005880:	491e      	ldr	r1, [pc, #120]	; (80058fc <_cbSendTaskList+0x88>)
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	4613      	mov	r3, r2
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4413      	add	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	440b      	add	r3, r1
 800588e:	6818      	ldr	r0, [r3, #0]
 8005890:	491a      	ldr	r1, [pc, #104]	; (80058fc <_cbSendTaskList+0x88>)
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	4613      	mov	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	440b      	add	r3, r1
 800589e:	3304      	adds	r3, #4
 80058a0:	681c      	ldr	r4, [r3, #0]
 80058a2:	4916      	ldr	r1, [pc, #88]	; (80058fc <_cbSendTaskList+0x88>)
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	4613      	mov	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	440b      	add	r3, r1
 80058b0:	3308      	adds	r3, #8
 80058b2:	681d      	ldr	r5, [r3, #0]
 80058b4:	4911      	ldr	r1, [pc, #68]	; (80058fc <_cbSendTaskList+0x88>)
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	4613      	mov	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	440b      	add	r3, r1
 80058c2:	330c      	adds	r3, #12
 80058c4:	681e      	ldr	r6, [r3, #0]
 80058c6:	490d      	ldr	r1, [pc, #52]	; (80058fc <_cbSendTaskList+0x88>)
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	4613      	mov	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4413      	add	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	440b      	add	r3, r1
 80058d4:	3310      	adds	r3, #16
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	4633      	mov	r3, r6
 80058dc:	462a      	mov	r2, r5
 80058de:	4621      	mov	r1, r4
 80058e0:	f000 f8b4 	bl	8005a4c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3301      	adds	r3, #1
 80058e8:	607b      	str	r3, [r7, #4]
 80058ea:	4b05      	ldr	r3, [pc, #20]	; (8005900 <_cbSendTaskList+0x8c>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d3c5      	bcc.n	8005880 <_cbSendTaskList+0xc>
  }
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058fc:	200041cc 	.word	0x200041cc
 8005900:	2000426c 	.word	0x2000426c

08005904 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8005904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800590a:	f7fe fda3 	bl	8004454 <xTaskGetTickCountFromISR>
 800590e:	4603      	mov	r3, r0
 8005910:	f04f 0400 	mov.w	r4, #0
 8005914:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005918:	e9d7 5600 	ldrd	r5, r6, [r7]
 800591c:	462b      	mov	r3, r5
 800591e:	4634      	mov	r4, r6
 8005920:	f04f 0100 	mov.w	r1, #0
 8005924:	f04f 0200 	mov.w	r2, #0
 8005928:	0162      	lsls	r2, r4, #5
 800592a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800592e:	0159      	lsls	r1, r3, #5
 8005930:	460b      	mov	r3, r1
 8005932:	4614      	mov	r4, r2
 8005934:	1b5b      	subs	r3, r3, r5
 8005936:	eb64 0406 	sbc.w	r4, r4, r6
 800593a:	f04f 0100 	mov.w	r1, #0
 800593e:	f04f 0200 	mov.w	r2, #0
 8005942:	00a2      	lsls	r2, r4, #2
 8005944:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8005948:	0099      	lsls	r1, r3, #2
 800594a:	460b      	mov	r3, r1
 800594c:	4614      	mov	r4, r2
 800594e:	195b      	adds	r3, r3, r5
 8005950:	eb44 0406 	adc.w	r4, r4, r6
 8005954:	f04f 0100 	mov.w	r1, #0
 8005958:	f04f 0200 	mov.w	r2, #0
 800595c:	00e2      	lsls	r2, r4, #3
 800595e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005962:	00d9      	lsls	r1, r3, #3
 8005964:	460b      	mov	r3, r1
 8005966:	4614      	mov	r4, r2
 8005968:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 800596c:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8005970:	4618      	mov	r0, r3
 8005972:	4621      	mov	r1, r4
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800597c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800597c:	b580      	push	{r7, lr}
 800597e:	b086      	sub	sp, #24
 8005980:	af02      	add	r7, sp, #8
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
 8005988:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800598a:	2205      	movs	r2, #5
 800598c:	492b      	ldr	r1, [pc, #172]	; (8005a3c <SYSVIEW_AddTask+0xc0>)
 800598e:	68b8      	ldr	r0, [r7, #8]
 8005990:	f001 fcc8 	bl	8007324 <memcmp>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d04b      	beq.n	8005a32 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800599a:	4b29      	ldr	r3, [pc, #164]	; (8005a40 <SYSVIEW_AddTask+0xc4>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b07      	cmp	r3, #7
 80059a0:	d903      	bls.n	80059aa <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80059a2:	4828      	ldr	r0, [pc, #160]	; (8005a44 <SYSVIEW_AddTask+0xc8>)
 80059a4:	f001 fc3e 	bl	8007224 <SEGGER_SYSVIEW_Warn>
    return;
 80059a8:	e044      	b.n	8005a34 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80059aa:	4b25      	ldr	r3, [pc, #148]	; (8005a40 <SYSVIEW_AddTask+0xc4>)
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	4926      	ldr	r1, [pc, #152]	; (8005a48 <SYSVIEW_AddTask+0xcc>)
 80059b0:	4613      	mov	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	440b      	add	r3, r1
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80059be:	4b20      	ldr	r3, [pc, #128]	; (8005a40 <SYSVIEW_AddTask+0xc4>)
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	4921      	ldr	r1, [pc, #132]	; (8005a48 <SYSVIEW_AddTask+0xcc>)
 80059c4:	4613      	mov	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	440b      	add	r3, r1
 80059ce:	3304      	adds	r3, #4
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80059d4:	4b1a      	ldr	r3, [pc, #104]	; (8005a40 <SYSVIEW_AddTask+0xc4>)
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	491b      	ldr	r1, [pc, #108]	; (8005a48 <SYSVIEW_AddTask+0xcc>)
 80059da:	4613      	mov	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4413      	add	r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	440b      	add	r3, r1
 80059e4:	3308      	adds	r3, #8
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80059ea:	4b15      	ldr	r3, [pc, #84]	; (8005a40 <SYSVIEW_AddTask+0xc4>)
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	4916      	ldr	r1, [pc, #88]	; (8005a48 <SYSVIEW_AddTask+0xcc>)
 80059f0:	4613      	mov	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	440b      	add	r3, r1
 80059fa:	330c      	adds	r3, #12
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005a00:	4b0f      	ldr	r3, [pc, #60]	; (8005a40 <SYSVIEW_AddTask+0xc4>)
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	4910      	ldr	r1, [pc, #64]	; (8005a48 <SYSVIEW_AddTask+0xcc>)
 8005a06:	4613      	mov	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	440b      	add	r3, r1
 8005a10:	3310      	adds	r3, #16
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005a16:	4b0a      	ldr	r3, [pc, #40]	; (8005a40 <SYSVIEW_AddTask+0xc4>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	4a08      	ldr	r2, [pc, #32]	; (8005a40 <SYSVIEW_AddTask+0xc4>)
 8005a1e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	9300      	str	r3, [sp, #0]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	68b9      	ldr	r1, [r7, #8]
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 f80e 	bl	8005a4c <SYSVIEW_SendTaskInfo>
 8005a30:	e000      	b.n	8005a34 <SYSVIEW_AddTask+0xb8>
    return;
 8005a32:	bf00      	nop

}
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	08007454 	.word	0x08007454
 8005a40:	2000426c 	.word	0x2000426c
 8005a44:	0800745c 	.word	0x0800745c
 8005a48:	200041cc 	.word	0x200041cc

08005a4c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b08a      	sub	sp, #40	; 0x28
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
 8005a58:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005a5a:	f107 0314 	add.w	r3, r7, #20
 8005a5e:	2214      	movs	r2, #20
 8005a60:	2100      	movs	r1, #0
 8005a62:	4618      	mov	r0, r3
 8005a64:	f001 fc78 	bl	8007358 <memset>
  TaskInfo.TaskID     = TaskID;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005a7c:	f107 0314 	add.w	r3, r7, #20
 8005a80:	4618      	mov	r0, r3
 8005a82:	f001 f841 	bl	8006b08 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005a86:	bf00      	nop
 8005a88:	3728      	adds	r7, #40	; 0x28
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
	...

08005a90 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005a96:	4b24      	ldr	r3, [pc, #144]	; (8005b28 <_DoInit+0x98>)
 8005a98:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2203      	movs	r2, #3
 8005a9e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2203      	movs	r2, #3
 8005aa4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a20      	ldr	r2, [pc, #128]	; (8005b2c <_DoInit+0x9c>)
 8005aaa:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a20      	ldr	r2, [pc, #128]	; (8005b30 <_DoInit+0xa0>)
 8005ab0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ab8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a17      	ldr	r2, [pc, #92]	; (8005b2c <_DoInit+0x9c>)
 8005ad0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a17      	ldr	r2, [pc, #92]	; (8005b34 <_DoInit+0xa4>)
 8005ad6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2210      	movs	r2, #16
 8005adc:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	3307      	adds	r3, #7
 8005af4:	4a10      	ldr	r2, [pc, #64]	; (8005b38 <_DoInit+0xa8>)
 8005af6:	6810      	ldr	r0, [r2, #0]
 8005af8:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005afa:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a0e      	ldr	r2, [pc, #56]	; (8005b3c <_DoInit+0xac>)
 8005b02:	6810      	ldr	r0, [r2, #0]
 8005b04:	6018      	str	r0, [r3, #0]
 8005b06:	8891      	ldrh	r1, [r2, #4]
 8005b08:	7992      	ldrb	r2, [r2, #6]
 8005b0a:	8099      	strh	r1, [r3, #4]
 8005b0c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005b0e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2220      	movs	r2, #32
 8005b16:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005b18:	f3bf 8f5f 	dmb	sy
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	200355b0 	.word	0x200355b0
 8005b2c:	080074ac 	.word	0x080074ac
 8005b30:	20004270 	.word	0x20004270
 8005b34:	20004670 	.word	0x20004670
 8005b38:	080074b8 	.word	0x080074b8
 8005b3c:	080074bc 	.word	0x080074bc

08005b40 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08c      	sub	sp, #48	; 0x30
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005b4c:	4b3e      	ldr	r3, [pc, #248]	; (8005c48 <SEGGER_RTT_ReadNoLock+0x108>)
 8005b4e:	623b      	str	r3, [r7, #32]
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <SEGGER_RTT_ReadNoLock+0x1e>
 8005b5a:	f7ff ff99 	bl	8005a90 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	4613      	mov	r3, r2
 8005b62:	005b      	lsls	r3, r3, #1
 8005b64:	4413      	add	r3, r2
 8005b66:	00db      	lsls	r3, r3, #3
 8005b68:	3360      	adds	r3, #96	; 0x60
 8005b6a:	4a37      	ldr	r2, [pc, #220]	; (8005c48 <SEGGER_RTT_ReadNoLock+0x108>)
 8005b6c:	4413      	add	r3, r2
 8005b6e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005b80:	2300      	movs	r3, #0
 8005b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005b84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d92b      	bls.n	8005be4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	689a      	ldr	r2, [r3, #8]
 8005b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	bf28      	it	cs
 8005b9e:	4613      	movcs	r3, r2
 8005ba0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba8:	4413      	add	r3, r2
 8005baa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	6939      	ldr	r1, [r7, #16]
 8005bb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bb2:	f001 fbc6 	bl	8007342 <memcpy>
    NumBytesRead += NumBytesRem;
 8005bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	4413      	add	r3, r2
 8005bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005bce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d101      	bne.n	8005be4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005be0:	2300      	movs	r3, #0
 8005be2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	bf28      	it	cs
 8005bf4:	4613      	movcs	r3, r2
 8005bf6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d019      	beq.n	8005c32 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c04:	4413      	add	r3, r2
 8005c06:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	6939      	ldr	r1, [r7, #16]
 8005c0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c0e:	f001 fb98 	bl	8007342 <memcpy>
    NumBytesRead += NumBytesRem;
 8005c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	4413      	add	r3, r2
 8005c18:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	4413      	add	r3, r2
 8005c20:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005c2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	4413      	add	r3, r2
 8005c30:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d002      	beq.n	8005c3e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c3c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3730      	adds	r7, #48	; 0x30
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	200355b0 	.word	0x200355b0

08005c4c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b088      	sub	sp, #32
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
 8005c58:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005c5a:	4b3d      	ldr	r3, [pc, #244]	; (8005d50 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005c5c:	61bb      	str	r3, [r7, #24]
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d101      	bne.n	8005c6c <SEGGER_RTT_AllocUpBuffer+0x20>
 8005c68:	f7ff ff12 	bl	8005a90 <_DoInit>
  SEGGER_RTT_LOCK();
 8005c6c:	f3ef 8311 	mrs	r3, BASEPRI
 8005c70:	f04f 0120 	mov.w	r1, #32
 8005c74:	f381 8811 	msr	BASEPRI, r1
 8005c78:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005c7a:	4b35      	ldr	r3, [pc, #212]	; (8005d50 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005c7c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005c82:	6939      	ldr	r1, [r7, #16]
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	1c5a      	adds	r2, r3, #1
 8005c88:	4613      	mov	r3, r2
 8005c8a:	005b      	lsls	r3, r3, #1
 8005c8c:	4413      	add	r3, r2
 8005c8e:	00db      	lsls	r3, r3, #3
 8005c90:	440b      	add	r3, r1
 8005c92:	3304      	adds	r3, #4
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d008      	beq.n	8005cac <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	69fa      	ldr	r2, [r7, #28]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	dbeb      	blt.n	8005c82 <SEGGER_RTT_AllocUpBuffer+0x36>
 8005caa:	e000      	b.n	8005cae <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005cac:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	69fa      	ldr	r2, [r7, #28]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	da3f      	bge.n	8005d38 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005cb8:	6939      	ldr	r1, [r7, #16]
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	1c5a      	adds	r2, r3, #1
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	005b      	lsls	r3, r3, #1
 8005cc2:	4413      	add	r3, r2
 8005cc4:	00db      	lsls	r3, r3, #3
 8005cc6:	440b      	add	r3, r1
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005ccc:	6939      	ldr	r1, [r7, #16]
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	1c5a      	adds	r2, r3, #1
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	005b      	lsls	r3, r3, #1
 8005cd6:	4413      	add	r3, r2
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	440b      	add	r3, r1
 8005cdc:	3304      	adds	r3, #4
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005ce2:	6939      	ldr	r1, [r7, #16]
 8005ce4:	69fa      	ldr	r2, [r7, #28]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	005b      	lsls	r3, r3, #1
 8005cea:	4413      	add	r3, r2
 8005cec:	00db      	lsls	r3, r3, #3
 8005cee:	440b      	add	r3, r1
 8005cf0:	3320      	adds	r3, #32
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005cf6:	6939      	ldr	r1, [r7, #16]
 8005cf8:	69fa      	ldr	r2, [r7, #28]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	4413      	add	r3, r2
 8005d00:	00db      	lsls	r3, r3, #3
 8005d02:	440b      	add	r3, r1
 8005d04:	3328      	adds	r3, #40	; 0x28
 8005d06:	2200      	movs	r2, #0
 8005d08:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005d0a:	6939      	ldr	r1, [r7, #16]
 8005d0c:	69fa      	ldr	r2, [r7, #28]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	4413      	add	r3, r2
 8005d14:	00db      	lsls	r3, r3, #3
 8005d16:	440b      	add	r3, r1
 8005d18:	3324      	adds	r3, #36	; 0x24
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005d1e:	6939      	ldr	r1, [r7, #16]
 8005d20:	69fa      	ldr	r2, [r7, #28]
 8005d22:	4613      	mov	r3, r2
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	4413      	add	r3, r2
 8005d28:	00db      	lsls	r3, r3, #3
 8005d2a:	440b      	add	r3, r1
 8005d2c:	332c      	adds	r3, #44	; 0x2c
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005d32:	f3bf 8f5f 	dmb	sy
 8005d36:	e002      	b.n	8005d3e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005d38:	f04f 33ff 	mov.w	r3, #4294967295
 8005d3c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005d44:	69fb      	ldr	r3, [r7, #28]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3720      	adds	r7, #32
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	200355b0 	.word	0x200355b0

08005d54 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b088      	sub	sp, #32
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
 8005d60:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005d62:	4b33      	ldr	r3, [pc, #204]	; (8005e30 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005d64:	61bb      	str	r3, [r7, #24]
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d101      	bne.n	8005d74 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005d70:	f7ff fe8e 	bl	8005a90 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005d74:	4b2e      	ldr	r3, [pc, #184]	; (8005e30 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005d76:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d24d      	bcs.n	8005e20 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005d84:	f3ef 8311 	mrs	r3, BASEPRI
 8005d88:	f04f 0120 	mov.w	r1, #32
 8005d8c:	f381 8811 	msr	BASEPRI, r1
 8005d90:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d031      	beq.n	8005dfc <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005d98:	6979      	ldr	r1, [r7, #20]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	005b      	lsls	r3, r3, #1
 8005da0:	4413      	add	r3, r2
 8005da2:	00db      	lsls	r3, r3, #3
 8005da4:	440b      	add	r3, r1
 8005da6:	3360      	adds	r3, #96	; 0x60
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005dac:	6979      	ldr	r1, [r7, #20]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	4613      	mov	r3, r2
 8005db2:	005b      	lsls	r3, r3, #1
 8005db4:	4413      	add	r3, r2
 8005db6:	00db      	lsls	r3, r3, #3
 8005db8:	440b      	add	r3, r1
 8005dba:	3364      	adds	r3, #100	; 0x64
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005dc0:	6979      	ldr	r1, [r7, #20]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	005b      	lsls	r3, r3, #1
 8005dc8:	4413      	add	r3, r2
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	440b      	add	r3, r1
 8005dce:	3368      	adds	r3, #104	; 0x68
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005dd4:	6979      	ldr	r1, [r7, #20]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	005b      	lsls	r3, r3, #1
 8005ddc:	4413      	add	r3, r2
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	440b      	add	r3, r1
 8005de2:	3370      	adds	r3, #112	; 0x70
 8005de4:	2200      	movs	r2, #0
 8005de6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005de8:	6979      	ldr	r1, [r7, #20]
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	4613      	mov	r3, r2
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	4413      	add	r3, r2
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	440b      	add	r3, r1
 8005df6:	336c      	adds	r3, #108	; 0x6c
 8005df8:	2200      	movs	r2, #0
 8005dfa:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005dfc:	6979      	ldr	r1, [r7, #20]
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	4613      	mov	r3, r2
 8005e02:	005b      	lsls	r3, r3, #1
 8005e04:	4413      	add	r3, r2
 8005e06:	00db      	lsls	r3, r3, #3
 8005e08:	440b      	add	r3, r1
 8005e0a:	3374      	adds	r3, #116	; 0x74
 8005e0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e0e:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005e10:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	61fb      	str	r3, [r7, #28]
 8005e1e:	e002      	b.n	8005e26 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005e20:	f04f 33ff 	mov.w	r3, #4294967295
 8005e24:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005e26:	69fb      	ldr	r3, [r7, #28]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3720      	adds	r7, #32
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	200355b0 	.word	0x200355b0

08005e34 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005e34:	b480      	push	{r7}
 8005e36:	b087      	sub	sp, #28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005e40:	2300      	movs	r3, #0
 8005e42:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005e44:	e002      	b.n	8005e4c <_EncodeStr+0x18>
    Len++;
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005e4c:	68ba      	ldr	r2, [r7, #8]
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	4413      	add	r3, r2
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1f6      	bne.n	8005e46 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d901      	bls.n	8005e64 <_EncodeStr+0x30>
    Len = Limit;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	2bfe      	cmp	r3, #254	; 0xfe
 8005e68:	d806      	bhi.n	8005e78 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	1c5a      	adds	r2, r3, #1
 8005e6e:	60fa      	str	r2, [r7, #12]
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	b2d2      	uxtb	r2, r2
 8005e74:	701a      	strb	r2, [r3, #0]
 8005e76:	e011      	b.n	8005e9c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	1c5a      	adds	r2, r3, #1
 8005e7c:	60fa      	str	r2, [r7, #12]
 8005e7e:	22ff      	movs	r2, #255	; 0xff
 8005e80:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	1c5a      	adds	r2, r3, #1
 8005e86:	60fa      	str	r2, [r7, #12]
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	b2d2      	uxtb	r2, r2
 8005e8c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	0a19      	lsrs	r1, r3, #8
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	1c5a      	adds	r2, r3, #1
 8005e96:	60fa      	str	r2, [r7, #12]
 8005e98:	b2ca      	uxtb	r2, r1
 8005e9a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005ea0:	e00a      	b.n	8005eb8 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	1c53      	adds	r3, r2, #1
 8005ea6:	60bb      	str	r3, [r7, #8]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	1c59      	adds	r1, r3, #1
 8005eac:	60f9      	str	r1, [r7, #12]
 8005eae:	7812      	ldrb	r2, [r2, #0]
 8005eb0:	701a      	strb	r2, [r3, #0]
    n++;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d3f0      	bcc.n	8005ea2 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	371c      	adds	r7, #28
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005ece:	b480      	push	{r7}
 8005ed0:	b083      	sub	sp, #12
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	3304      	adds	r3, #4
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
	...

08005ee8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005eee:	4b33      	ldr	r3, [pc, #204]	; (8005fbc <_HandleIncomingPacket+0xd4>)
 8005ef0:	7e1b      	ldrb	r3, [r3, #24]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	1cfb      	adds	r3, r7, #3
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	4619      	mov	r1, r3
 8005efa:	f7ff fe21 	bl	8005b40 <SEGGER_RTT_ReadNoLock>
 8005efe:	4603      	mov	r3, r0
 8005f00:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	dd4d      	ble.n	8005fa4 <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 8005f08:	78fb      	ldrb	r3, [r7, #3]
 8005f0a:	2b05      	cmp	r3, #5
 8005f0c:	d022      	beq.n	8005f54 <_HandleIncomingPacket+0x6c>
 8005f0e:	2b05      	cmp	r3, #5
 8005f10:	dc0b      	bgt.n	8005f2a <_HandleIncomingPacket+0x42>
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d015      	beq.n	8005f42 <_HandleIncomingPacket+0x5a>
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	dc02      	bgt.n	8005f20 <_HandleIncomingPacket+0x38>
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d00e      	beq.n	8005f3c <_HandleIncomingPacket+0x54>
 8005f1e:	e034      	b.n	8005f8a <_HandleIncomingPacket+0xa2>
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	d011      	beq.n	8005f48 <_HandleIncomingPacket+0x60>
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	d012      	beq.n	8005f4e <_HandleIncomingPacket+0x66>
 8005f28:	e02f      	b.n	8005f8a <_HandleIncomingPacket+0xa2>
 8005f2a:	2b07      	cmp	r3, #7
 8005f2c:	d018      	beq.n	8005f60 <_HandleIncomingPacket+0x78>
 8005f2e:	2b07      	cmp	r3, #7
 8005f30:	db13      	blt.n	8005f5a <_HandleIncomingPacket+0x72>
 8005f32:	2b7f      	cmp	r3, #127	; 0x7f
 8005f34:	d038      	beq.n	8005fa8 <_HandleIncomingPacket+0xc0>
 8005f36:	2b80      	cmp	r3, #128	; 0x80
 8005f38:	d015      	beq.n	8005f66 <_HandleIncomingPacket+0x7e>
 8005f3a:	e026      	b.n	8005f8a <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005f3c:	f000 fc6a 	bl	8006814 <SEGGER_SYSVIEW_Start>
      break;
 8005f40:	e037      	b.n	8005fb2 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005f42:	f000 fd21 	bl	8006988 <SEGGER_SYSVIEW_Stop>
      break;
 8005f46:	e034      	b.n	8005fb2 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005f48:	f000 fefa 	bl	8006d40 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005f4c:	e031      	b.n	8005fb2 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005f4e:	f000 febf 	bl	8006cd0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005f52:	e02e      	b.n	8005fb2 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005f54:	f000 fd3e 	bl	80069d4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005f58:	e02b      	b.n	8005fb2 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005f5a:	f001 f911 	bl	8007180 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005f5e:	e028      	b.n	8005fb2 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005f60:	f001 f8f0 	bl	8007144 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005f64:	e025      	b.n	8005fb2 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005f66:	4b15      	ldr	r3, [pc, #84]	; (8005fbc <_HandleIncomingPacket+0xd4>)
 8005f68:	7e1b      	ldrb	r3, [r3, #24]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	1cfb      	adds	r3, r7, #3
 8005f6e:	2201      	movs	r2, #1
 8005f70:	4619      	mov	r1, r3
 8005f72:	f7ff fde5 	bl	8005b40 <SEGGER_RTT_ReadNoLock>
 8005f76:	4603      	mov	r3, r0
 8005f78:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	dd15      	ble.n	8005fac <_HandleIncomingPacket+0xc4>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005f80:	78fb      	ldrb	r3, [r7, #3]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f001 f85e 	bl	8007044 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005f88:	e010      	b.n	8005fac <_HandleIncomingPacket+0xc4>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005f8a:	78fb      	ldrb	r3, [r7, #3]
 8005f8c:	b25b      	sxtb	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	da0e      	bge.n	8005fb0 <_HandleIncomingPacket+0xc8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005f92:	4b0a      	ldr	r3, [pc, #40]	; (8005fbc <_HandleIncomingPacket+0xd4>)
 8005f94:	7e1b      	ldrb	r3, [r3, #24]
 8005f96:	4618      	mov	r0, r3
 8005f98:	1cfb      	adds	r3, r7, #3
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	f7ff fdcf 	bl	8005b40 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005fa2:	e005      	b.n	8005fb0 <_HandleIncomingPacket+0xc8>
    }
  }
 8005fa4:	bf00      	nop
 8005fa6:	e004      	b.n	8005fb2 <_HandleIncomingPacket+0xca>
      break;
 8005fa8:	bf00      	nop
 8005faa:	e002      	b.n	8005fb2 <_HandleIncomingPacket+0xca>
      break;
 8005fac:	bf00      	nop
 8005fae:	e000      	b.n	8005fb2 <_HandleIncomingPacket+0xca>
      break;
 8005fb0:	bf00      	nop
}
 8005fb2:	bf00      	nop
 8005fb4:	3708      	adds	r7, #8
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	200353c8 	.word	0x200353c8

08005fc0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b08c      	sub	sp, #48	; 0x30
 8005fc4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005fca:	1d3b      	adds	r3, r7, #4
 8005fcc:	3301      	adds	r3, #1
 8005fce:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fd4:	4b31      	ldr	r3, [pc, #196]	; (800609c <_TrySendOverflowPacket+0xdc>)
 8005fd6:	695b      	ldr	r3, [r3, #20]
 8005fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fda:	e00b      	b.n	8005ff4 <_TrySendOverflowPacket+0x34>
 8005fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fde:	b2da      	uxtb	r2, r3
 8005fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe2:	1c59      	adds	r1, r3, #1
 8005fe4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005fe6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fea:	b2d2      	uxtb	r2, r2
 8005fec:	701a      	strb	r2, [r3, #0]
 8005fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff0:	09db      	lsrs	r3, r3, #7
 8005ff2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ff8:	d8f0      	bhi.n	8005fdc <_TrySendOverflowPacket+0x1c>
 8005ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffc:	1c5a      	adds	r2, r3, #1
 8005ffe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006000:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006002:	b2d2      	uxtb	r2, r2
 8006004:	701a      	strb	r2, [r3, #0]
 8006006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006008:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800600a:	4b25      	ldr	r3, [pc, #148]	; (80060a0 <_TrySendOverflowPacket+0xe0>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006010:	4b22      	ldr	r3, [pc, #136]	; (800609c <_TrySendOverflowPacket+0xdc>)
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	627b      	str	r3, [r7, #36]	; 0x24
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	623b      	str	r3, [r7, #32]
 8006022:	e00b      	b.n	800603c <_TrySendOverflowPacket+0x7c>
 8006024:	6a3b      	ldr	r3, [r7, #32]
 8006026:	b2da      	uxtb	r2, r3
 8006028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602a:	1c59      	adds	r1, r3, #1
 800602c:	6279      	str	r1, [r7, #36]	; 0x24
 800602e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006032:	b2d2      	uxtb	r2, r2
 8006034:	701a      	strb	r2, [r3, #0]
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	09db      	lsrs	r3, r3, #7
 800603a:	623b      	str	r3, [r7, #32]
 800603c:	6a3b      	ldr	r3, [r7, #32]
 800603e:	2b7f      	cmp	r3, #127	; 0x7f
 8006040:	d8f0      	bhi.n	8006024 <_TrySendOverflowPacket+0x64>
 8006042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006044:	1c5a      	adds	r2, r3, #1
 8006046:	627a      	str	r2, [r7, #36]	; 0x24
 8006048:	6a3a      	ldr	r2, [r7, #32]
 800604a:	b2d2      	uxtb	r2, r2
 800604c:	701a      	strb	r2, [r3, #0]
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8006052:	4b12      	ldr	r3, [pc, #72]	; (800609c <_TrySendOverflowPacket+0xdc>)
 8006054:	785b      	ldrb	r3, [r3, #1]
 8006056:	4618      	mov	r0, r3
 8006058:	69fa      	ldr	r2, [r7, #28]
 800605a:	1d3b      	adds	r3, r7, #4
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	461a      	mov	r2, r3
 8006060:	1d3b      	adds	r3, r7, #4
 8006062:	4619      	mov	r1, r3
 8006064:	f7fa f8d4 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006068:	4603      	mov	r3, r0
 800606a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d009      	beq.n	8006086 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006072:	4a0a      	ldr	r2, [pc, #40]	; (800609c <_TrySendOverflowPacket+0xdc>)
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006078:	4b08      	ldr	r3, [pc, #32]	; (800609c <_TrySendOverflowPacket+0xdc>)
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	3b01      	subs	r3, #1
 800607e:	b2da      	uxtb	r2, r3
 8006080:	4b06      	ldr	r3, [pc, #24]	; (800609c <_TrySendOverflowPacket+0xdc>)
 8006082:	701a      	strb	r2, [r3, #0]
 8006084:	e004      	b.n	8006090 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8006086:	4b05      	ldr	r3, [pc, #20]	; (800609c <_TrySendOverflowPacket+0xdc>)
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	3301      	adds	r3, #1
 800608c:	4a03      	ldr	r2, [pc, #12]	; (800609c <_TrySendOverflowPacket+0xdc>)
 800608e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8006090:	693b      	ldr	r3, [r7, #16]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3730      	adds	r7, #48	; 0x30
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	200353c8 	.word	0x200353c8
 80060a0:	e0001004 	.word	0xe0001004

080060a4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b08a      	sub	sp, #40	; 0x28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80060b0:	4b6c      	ldr	r3, [pc, #432]	; (8006264 <_SendPacket+0x1c0>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d010      	beq.n	80060da <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80060b8:	4b6a      	ldr	r3, [pc, #424]	; (8006264 <_SendPacket+0x1c0>)
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 80a3 	beq.w	8006208 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80060c2:	4b68      	ldr	r3, [pc, #416]	; (8006264 <_SendPacket+0x1c0>)
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d109      	bne.n	80060de <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80060ca:	f7ff ff79 	bl	8005fc0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80060ce:	4b65      	ldr	r3, [pc, #404]	; (8006264 <_SendPacket+0x1c0>)
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	f040 809a 	bne.w	800620c <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80060d8:	e001      	b.n	80060de <_SendPacket+0x3a>
    goto Send;
 80060da:	bf00      	nop
 80060dc:	e000      	b.n	80060e0 <_SendPacket+0x3c>
Send:
 80060de:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b1f      	cmp	r3, #31
 80060e4:	d809      	bhi.n	80060fa <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80060e6:	4b5f      	ldr	r3, [pc, #380]	; (8006264 <_SendPacket+0x1c0>)
 80060e8:	69da      	ldr	r2, [r3, #28]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	fa22 f303 	lsr.w	r3, r2, r3
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f040 808b 	bne.w	8006210 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2b17      	cmp	r3, #23
 80060fe:	d807      	bhi.n	8006110 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	3b01      	subs	r3, #1
 8006104:	60fb      	str	r3, [r7, #12]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	b2da      	uxtb	r2, r3
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	701a      	strb	r2, [r3, #0]
 800610e:	e03d      	b.n	800618c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	2b7f      	cmp	r3, #127	; 0x7f
 800611c:	d912      	bls.n	8006144 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	09da      	lsrs	r2, r3, #7
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	3b01      	subs	r3, #1
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	b2d2      	uxtb	r2, r2
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	b2db      	uxtb	r3, r3
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	3a01      	subs	r2, #1
 8006136:	60fa      	str	r2, [r7, #12]
 8006138:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800613c:	b2da      	uxtb	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	701a      	strb	r2, [r3, #0]
 8006142:	e006      	b.n	8006152 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	3b01      	subs	r3, #1
 8006148:	60fb      	str	r3, [r7, #12]
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	b2da      	uxtb	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b7f      	cmp	r3, #127	; 0x7f
 8006156:	d912      	bls.n	800617e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	09da      	lsrs	r2, r3, #7
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	3b01      	subs	r3, #1
 8006160:	60fb      	str	r3, [r7, #12]
 8006162:	b2d2      	uxtb	r2, r2
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	b2db      	uxtb	r3, r3
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	3a01      	subs	r2, #1
 8006170:	60fa      	str	r2, [r7, #12]
 8006172:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006176:	b2da      	uxtb	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	701a      	strb	r2, [r3, #0]
 800617c:	e006      	b.n	800618c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	3b01      	subs	r3, #1
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	b2da      	uxtb	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800618c:	4b36      	ldr	r3, [pc, #216]	; (8006268 <_SendPacket+0x1c4>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006192:	4b34      	ldr	r3, [pc, #208]	; (8006264 <_SendPacket+0x1c0>)
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	69ba      	ldr	r2, [r7, #24]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	627b      	str	r3, [r7, #36]	; 0x24
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	623b      	str	r3, [r7, #32]
 80061a4:	e00b      	b.n	80061be <_SendPacket+0x11a>
 80061a6:	6a3b      	ldr	r3, [r7, #32]
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ac:	1c59      	adds	r1, r3, #1
 80061ae:	6279      	str	r1, [r7, #36]	; 0x24
 80061b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061b4:	b2d2      	uxtb	r2, r2
 80061b6:	701a      	strb	r2, [r3, #0]
 80061b8:	6a3b      	ldr	r3, [r7, #32]
 80061ba:	09db      	lsrs	r3, r3, #7
 80061bc:	623b      	str	r3, [r7, #32]
 80061be:	6a3b      	ldr	r3, [r7, #32]
 80061c0:	2b7f      	cmp	r3, #127	; 0x7f
 80061c2:	d8f0      	bhi.n	80061a6 <_SendPacket+0x102>
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	1c5a      	adds	r2, r3, #1
 80061c8:	627a      	str	r2, [r7, #36]	; 0x24
 80061ca:	6a3a      	ldr	r2, [r7, #32]
 80061cc:	b2d2      	uxtb	r2, r2
 80061ce:	701a      	strb	r2, [r3, #0]
 80061d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80061d4:	4b23      	ldr	r3, [pc, #140]	; (8006264 <_SendPacket+0x1c0>)
 80061d6:	785b      	ldrb	r3, [r3, #1]
 80061d8:	4618      	mov	r0, r3
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	461a      	mov	r2, r3
 80061e2:	68f9      	ldr	r1, [r7, #12]
 80061e4:	f7fa f814 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80061e8:	4603      	mov	r3, r0
 80061ea:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d003      	beq.n	80061fa <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80061f2:	4a1c      	ldr	r2, [pc, #112]	; (8006264 <_SendPacket+0x1c0>)
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	60d3      	str	r3, [r2, #12]
 80061f8:	e00b      	b.n	8006212 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80061fa:	4b1a      	ldr	r3, [pc, #104]	; (8006264 <_SendPacket+0x1c0>)
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	3301      	adds	r3, #1
 8006200:	b2da      	uxtb	r2, r3
 8006202:	4b18      	ldr	r3, [pc, #96]	; (8006264 <_SendPacket+0x1c0>)
 8006204:	701a      	strb	r2, [r3, #0]
 8006206:	e004      	b.n	8006212 <_SendPacket+0x16e>
    goto SendDone;
 8006208:	bf00      	nop
 800620a:	e002      	b.n	8006212 <_SendPacket+0x16e>
      goto SendDone;
 800620c:	bf00      	nop
 800620e:	e000      	b.n	8006212 <_SendPacket+0x16e>
      goto SendDone;
 8006210:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006212:	4b14      	ldr	r3, [pc, #80]	; (8006264 <_SendPacket+0x1c0>)
 8006214:	7e1b      	ldrb	r3, [r3, #24]
 8006216:	4619      	mov	r1, r3
 8006218:	4a14      	ldr	r2, [pc, #80]	; (800626c <_SendPacket+0x1c8>)
 800621a:	460b      	mov	r3, r1
 800621c:	005b      	lsls	r3, r3, #1
 800621e:	440b      	add	r3, r1
 8006220:	00db      	lsls	r3, r3, #3
 8006222:	4413      	add	r3, r2
 8006224:	336c      	adds	r3, #108	; 0x6c
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	4b0e      	ldr	r3, [pc, #56]	; (8006264 <_SendPacket+0x1c0>)
 800622a:	7e1b      	ldrb	r3, [r3, #24]
 800622c:	4618      	mov	r0, r3
 800622e:	490f      	ldr	r1, [pc, #60]	; (800626c <_SendPacket+0x1c8>)
 8006230:	4603      	mov	r3, r0
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	4403      	add	r3, r0
 8006236:	00db      	lsls	r3, r3, #3
 8006238:	440b      	add	r3, r1
 800623a:	3370      	adds	r3, #112	; 0x70
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	429a      	cmp	r2, r3
 8006240:	d00b      	beq.n	800625a <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006242:	4b08      	ldr	r3, [pc, #32]	; (8006264 <_SendPacket+0x1c0>)
 8006244:	789b      	ldrb	r3, [r3, #2]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d107      	bne.n	800625a <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800624a:	4b06      	ldr	r3, [pc, #24]	; (8006264 <_SendPacket+0x1c0>)
 800624c:	2201      	movs	r2, #1
 800624e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006250:	f7ff fe4a 	bl	8005ee8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006254:	4b03      	ldr	r3, [pc, #12]	; (8006264 <_SendPacket+0x1c0>)
 8006256:	2200      	movs	r2, #0
 8006258:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800625a:	bf00      	nop
 800625c:	3728      	adds	r7, #40	; 0x28
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	200353c8 	.word	0x200353c8
 8006268:	e0001004 	.word	0xe0001004
 800626c:	200355b0 	.word	0x200355b0

08006270 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8006270:	b580      	push	{r7, lr}
 8006272:	b0a2      	sub	sp, #136	; 0x88
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
#endif  
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 8006280:	2300      	movs	r3, #0
 8006282:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 8006286:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006288:	1c5a      	adds	r2, r3, #1
 800628a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 8006292:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006296:	2b00      	cmp	r3, #0
 8006298:	d01e      	beq.n	80062d8 <_VPrintHost+0x68>
      break;
    }
    if (c == '%') {
 800629a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800629e:	2b25      	cmp	r3, #37	; 0x25
 80062a0:	d1f1      	bne.n	8006286 <_VPrintHost+0x16>
      c = *p;
 80062a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = va_arg(*pParamList, int);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	1d19      	adds	r1, r3, #4
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	6011      	str	r1, [r2, #0]
 80062b4:	6819      	ldr	r1, [r3, #0]
 80062b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80062c0:	460a      	mov	r2, r1
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80062c8:	440b      	add	r3, r1
 80062ca:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 80062ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80062d2:	2b10      	cmp	r3, #16
 80062d4:	d002      	beq.n	80062dc <_VPrintHost+0x6c>
    c = *p++;
 80062d6:	e7d6      	b.n	8006286 <_VPrintHost+0x16>
      break;
 80062d8:	bf00      	nop
 80062da:	e000      	b.n	80062de <_VPrintHost+0x6e>
        break;
 80062dc:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 80062de:	f3ef 8311 	mrs	r3, BASEPRI
 80062e2:	f04f 0120 	mov.w	r1, #32
 80062e6:	f381 8811 	msr	BASEPRI, r1
 80062ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80062ec:	483f      	ldr	r0, [pc, #252]	; (80063ec <_VPrintHost+0x17c>)
 80062ee:	f7ff fdee 	bl	8005ece <_PreparePacket>
 80062f2:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80062f4:	2280      	movs	r2, #128	; 0x80
 80062f6:	68f9      	ldr	r1, [r7, #12]
 80062f8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80062fa:	f7ff fd9b 	bl	8005e34 <_EncodeStr>
 80062fe:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 8006300:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006302:	677b      	str	r3, [r7, #116]	; 0x74
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	673b      	str	r3, [r7, #112]	; 0x70
 8006308:	e00b      	b.n	8006322 <_VPrintHost+0xb2>
 800630a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800630c:	b2da      	uxtb	r2, r3
 800630e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006310:	1c59      	adds	r1, r3, #1
 8006312:	6779      	str	r1, [r7, #116]	; 0x74
 8006314:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006318:	b2d2      	uxtb	r2, r2
 800631a:	701a      	strb	r2, [r3, #0]
 800631c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800631e:	09db      	lsrs	r3, r3, #7
 8006320:	673b      	str	r3, [r7, #112]	; 0x70
 8006322:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006324:	2b7f      	cmp	r3, #127	; 0x7f
 8006326:	d8f0      	bhi.n	800630a <_VPrintHost+0x9a>
 8006328:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800632a:	1c5a      	adds	r2, r3, #1
 800632c:	677a      	str	r2, [r7, #116]	; 0x74
 800632e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006330:	b2d2      	uxtb	r2, r2
 8006332:	701a      	strb	r2, [r3, #0]
 8006334:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006336:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 8006338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800633a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800633c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006340:	66bb      	str	r3, [r7, #104]	; 0x68
 8006342:	e00b      	b.n	800635c <_VPrintHost+0xec>
 8006344:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006346:	b2da      	uxtb	r2, r3
 8006348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800634a:	1c59      	adds	r1, r3, #1
 800634c:	66f9      	str	r1, [r7, #108]	; 0x6c
 800634e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006352:	b2d2      	uxtb	r2, r2
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006358:	09db      	lsrs	r3, r3, #7
 800635a:	66bb      	str	r3, [r7, #104]	; 0x68
 800635c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800635e:	2b7f      	cmp	r3, #127	; 0x7f
 8006360:	d8f0      	bhi.n	8006344 <_VPrintHost+0xd4>
 8006362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006364:	1c5a      	adds	r2, r3, #1
 8006366:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006368:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800636a:	b2d2      	uxtb	r2, r2
 800636c:	701a      	strb	r2, [r3, #0]
 800636e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006370:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 8006372:	f107 0314 	add.w	r3, r7, #20
 8006376:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 800637a:	e022      	b.n	80063c2 <_VPrintHost+0x152>
      ENCODE_U32(pPayload, (*pParas));
 800637c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800637e:	667b      	str	r3, [r7, #100]	; 0x64
 8006380:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	663b      	str	r3, [r7, #96]	; 0x60
 8006388:	e00b      	b.n	80063a2 <_VPrintHost+0x132>
 800638a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800638c:	b2da      	uxtb	r2, r3
 800638e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006390:	1c59      	adds	r1, r3, #1
 8006392:	6679      	str	r1, [r7, #100]	; 0x64
 8006394:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006398:	b2d2      	uxtb	r2, r2
 800639a:	701a      	strb	r2, [r3, #0]
 800639c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800639e:	09db      	lsrs	r3, r3, #7
 80063a0:	663b      	str	r3, [r7, #96]	; 0x60
 80063a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063a4:	2b7f      	cmp	r3, #127	; 0x7f
 80063a6:	d8f0      	bhi.n	800638a <_VPrintHost+0x11a>
 80063a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063aa:	1c5a      	adds	r2, r3, #1
 80063ac:	667a      	str	r2, [r7, #100]	; 0x64
 80063ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80063b0:	b2d2      	uxtb	r2, r2
 80063b2:	701a      	strb	r2, [r3, #0]
 80063b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063b6:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 80063b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063bc:	3304      	adds	r3, #4
 80063be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 80063c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063c6:	1e5a      	subs	r2, r3, #1
 80063c8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1d5      	bne.n	800637c <_VPrintHost+0x10c>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80063d0:	221a      	movs	r2, #26
 80063d2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80063d4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80063d6:	f7ff fe65 	bl	80060a4 <_SendPacket>
    RECORD_END();
 80063da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063dc:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3788      	adds	r7, #136	; 0x88
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	200353f8 	.word	0x200353f8

080063f0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af02      	add	r7, sp, #8
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
 80063fc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80063fe:	2300      	movs	r3, #0
 8006400:	4a18      	ldr	r2, [pc, #96]	; (8006464 <SEGGER_SYSVIEW_Init+0x74>)
 8006402:	4919      	ldr	r1, [pc, #100]	; (8006468 <SEGGER_SYSVIEW_Init+0x78>)
 8006404:	4819      	ldr	r0, [pc, #100]	; (800646c <SEGGER_SYSVIEW_Init+0x7c>)
 8006406:	f7ff fc21 	bl	8005c4c <SEGGER_RTT_AllocUpBuffer>
 800640a:	4603      	mov	r3, r0
 800640c:	b2da      	uxtb	r2, r3
 800640e:	4b18      	ldr	r3, [pc, #96]	; (8006470 <SEGGER_SYSVIEW_Init+0x80>)
 8006410:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006412:	4b17      	ldr	r3, [pc, #92]	; (8006470 <SEGGER_SYSVIEW_Init+0x80>)
 8006414:	785a      	ldrb	r2, [r3, #1]
 8006416:	4b16      	ldr	r3, [pc, #88]	; (8006470 <SEGGER_SYSVIEW_Init+0x80>)
 8006418:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800641a:	4b15      	ldr	r3, [pc, #84]	; (8006470 <SEGGER_SYSVIEW_Init+0x80>)
 800641c:	7e1b      	ldrb	r3, [r3, #24]
 800641e:	4618      	mov	r0, r3
 8006420:	2300      	movs	r3, #0
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	2308      	movs	r3, #8
 8006426:	4a13      	ldr	r2, [pc, #76]	; (8006474 <SEGGER_SYSVIEW_Init+0x84>)
 8006428:	4910      	ldr	r1, [pc, #64]	; (800646c <SEGGER_SYSVIEW_Init+0x7c>)
 800642a:	f7ff fc93 	bl	8005d54 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800642e:	4b10      	ldr	r3, [pc, #64]	; (8006470 <SEGGER_SYSVIEW_Init+0x80>)
 8006430:	2200      	movs	r2, #0
 8006432:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006434:	4b10      	ldr	r3, [pc, #64]	; (8006478 <SEGGER_SYSVIEW_Init+0x88>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a0d      	ldr	r2, [pc, #52]	; (8006470 <SEGGER_SYSVIEW_Init+0x80>)
 800643a:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800643c:	4a0c      	ldr	r2, [pc, #48]	; (8006470 <SEGGER_SYSVIEW_Init+0x80>)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006442:	4a0b      	ldr	r2, [pc, #44]	; (8006470 <SEGGER_SYSVIEW_Init+0x80>)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006448:	4a09      	ldr	r2, [pc, #36]	; (8006470 <SEGGER_SYSVIEW_Init+0x80>)
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800644e:	4a08      	ldr	r2, [pc, #32]	; (8006470 <SEGGER_SYSVIEW_Init+0x80>)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006454:	4b06      	ldr	r3, [pc, #24]	; (8006470 <SEGGER_SYSVIEW_Init+0x80>)
 8006456:	2200      	movs	r2, #0
 8006458:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800645a:	bf00      	nop
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	00030d40 	.word	0x00030d40
 8006468:	20004680 	.word	0x20004680
 800646c:	080074c4 	.word	0x080074c4
 8006470:	200353c8 	.word	0x200353c8
 8006474:	200353c0 	.word	0x200353c0
 8006478:	e0001004 	.word	0xe0001004

0800647c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006484:	4a04      	ldr	r2, [pc, #16]	; (8006498 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6113      	str	r3, [r2, #16]
}
 800648a:	bf00      	nop
 800648c:	370c      	adds	r7, #12
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	200353c8 	.word	0x200353c8

0800649c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80064a4:	f3ef 8311 	mrs	r3, BASEPRI
 80064a8:	f04f 0120 	mov.w	r1, #32
 80064ac:	f381 8811 	msr	BASEPRI, r1
 80064b0:	60fb      	str	r3, [r7, #12]
 80064b2:	4808      	ldr	r0, [pc, #32]	; (80064d4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80064b4:	f7ff fd0b 	bl	8005ece <_PreparePacket>
 80064b8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	68b9      	ldr	r1, [r7, #8]
 80064be:	68b8      	ldr	r0, [r7, #8]
 80064c0:	f7ff fdf0 	bl	80060a4 <_SendPacket>
  RECORD_END();
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f383 8811 	msr	BASEPRI, r3
}
 80064ca:	bf00      	nop
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	200353f8 	.word	0x200353f8

080064d8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80064d8:	b580      	push	{r7, lr}
 80064da:	b088      	sub	sp, #32
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80064e2:	f3ef 8311 	mrs	r3, BASEPRI
 80064e6:	f04f 0120 	mov.w	r1, #32
 80064ea:	f381 8811 	msr	BASEPRI, r1
 80064ee:	617b      	str	r3, [r7, #20]
 80064f0:	4816      	ldr	r0, [pc, #88]	; (800654c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80064f2:	f7ff fcec 	bl	8005ece <_PreparePacket>
 80064f6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	61fb      	str	r3, [r7, #28]
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	61bb      	str	r3, [r7, #24]
 8006504:	e00b      	b.n	800651e <SEGGER_SYSVIEW_RecordU32+0x46>
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	b2da      	uxtb	r2, r3
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	1c59      	adds	r1, r3, #1
 800650e:	61f9      	str	r1, [r7, #28]
 8006510:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006514:	b2d2      	uxtb	r2, r2
 8006516:	701a      	strb	r2, [r3, #0]
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	09db      	lsrs	r3, r3, #7
 800651c:	61bb      	str	r3, [r7, #24]
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	2b7f      	cmp	r3, #127	; 0x7f
 8006522:	d8f0      	bhi.n	8006506 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	1c5a      	adds	r2, r3, #1
 8006528:	61fa      	str	r2, [r7, #28]
 800652a:	69ba      	ldr	r2, [r7, #24]
 800652c:	b2d2      	uxtb	r2, r2
 800652e:	701a      	strb	r2, [r3, #0]
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	68f9      	ldr	r1, [r7, #12]
 8006538:	6938      	ldr	r0, [r7, #16]
 800653a:	f7ff fdb3 	bl	80060a4 <_SendPacket>
  RECORD_END();
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f383 8811 	msr	BASEPRI, r3
}
 8006544:	bf00      	nop
 8006546:	3720      	adds	r7, #32
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	200353f8 	.word	0x200353f8

08006550 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006550:	b580      	push	{r7, lr}
 8006552:	b08c      	sub	sp, #48	; 0x30
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800655c:	f3ef 8311 	mrs	r3, BASEPRI
 8006560:	f04f 0120 	mov.w	r1, #32
 8006564:	f381 8811 	msr	BASEPRI, r1
 8006568:	61fb      	str	r3, [r7, #28]
 800656a:	4825      	ldr	r0, [pc, #148]	; (8006600 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800656c:	f7ff fcaf 	bl	8005ece <_PreparePacket>
 8006570:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	62fb      	str	r3, [r7, #44]	; 0x2c
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	62bb      	str	r3, [r7, #40]	; 0x28
 800657e:	e00b      	b.n	8006598 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006582:	b2da      	uxtb	r2, r3
 8006584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006586:	1c59      	adds	r1, r3, #1
 8006588:	62f9      	str	r1, [r7, #44]	; 0x2c
 800658a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800658e:	b2d2      	uxtb	r2, r2
 8006590:	701a      	strb	r2, [r3, #0]
 8006592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006594:	09db      	lsrs	r3, r3, #7
 8006596:	62bb      	str	r3, [r7, #40]	; 0x28
 8006598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659a:	2b7f      	cmp	r3, #127	; 0x7f
 800659c:	d8f0      	bhi.n	8006580 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800659e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a0:	1c5a      	adds	r2, r3, #1
 80065a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065a6:	b2d2      	uxtb	r2, r2
 80065a8:	701a      	strb	r2, [r3, #0]
 80065aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ac:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	627b      	str	r3, [r7, #36]	; 0x24
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	623b      	str	r3, [r7, #32]
 80065b6:	e00b      	b.n	80065d0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80065b8:	6a3b      	ldr	r3, [r7, #32]
 80065ba:	b2da      	uxtb	r2, r3
 80065bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065be:	1c59      	adds	r1, r3, #1
 80065c0:	6279      	str	r1, [r7, #36]	; 0x24
 80065c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065c6:	b2d2      	uxtb	r2, r2
 80065c8:	701a      	strb	r2, [r3, #0]
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	09db      	lsrs	r3, r3, #7
 80065ce:	623b      	str	r3, [r7, #32]
 80065d0:	6a3b      	ldr	r3, [r7, #32]
 80065d2:	2b7f      	cmp	r3, #127	; 0x7f
 80065d4:	d8f0      	bhi.n	80065b8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80065d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d8:	1c5a      	adds	r2, r3, #1
 80065da:	627a      	str	r2, [r7, #36]	; 0x24
 80065dc:	6a3a      	ldr	r2, [r7, #32]
 80065de:	b2d2      	uxtb	r2, r2
 80065e0:	701a      	strb	r2, [r3, #0]
 80065e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	6979      	ldr	r1, [r7, #20]
 80065ea:	69b8      	ldr	r0, [r7, #24]
 80065ec:	f7ff fd5a 	bl	80060a4 <_SendPacket>
  RECORD_END();
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	f383 8811 	msr	BASEPRI, r3
}
 80065f6:	bf00      	nop
 80065f8:	3730      	adds	r7, #48	; 0x30
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	200353f8 	.word	0x200353f8

08006604 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006604:	b580      	push	{r7, lr}
 8006606:	b08e      	sub	sp, #56	; 0x38
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
 8006610:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006612:	f3ef 8311 	mrs	r3, BASEPRI
 8006616:	f04f 0120 	mov.w	r1, #32
 800661a:	f381 8811 	msr	BASEPRI, r1
 800661e:	61fb      	str	r3, [r7, #28]
 8006620:	4832      	ldr	r0, [pc, #200]	; (80066ec <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006622:	f7ff fc54 	bl	8005ece <_PreparePacket>
 8006626:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	637b      	str	r3, [r7, #52]	; 0x34
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	633b      	str	r3, [r7, #48]	; 0x30
 8006634:	e00b      	b.n	800664e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006638:	b2da      	uxtb	r2, r3
 800663a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800663c:	1c59      	adds	r1, r3, #1
 800663e:	6379      	str	r1, [r7, #52]	; 0x34
 8006640:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006644:	b2d2      	uxtb	r2, r2
 8006646:	701a      	strb	r2, [r3, #0]
 8006648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664a:	09db      	lsrs	r3, r3, #7
 800664c:	633b      	str	r3, [r7, #48]	; 0x30
 800664e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006650:	2b7f      	cmp	r3, #127	; 0x7f
 8006652:	d8f0      	bhi.n	8006636 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006656:	1c5a      	adds	r2, r3, #1
 8006658:	637a      	str	r2, [r7, #52]	; 0x34
 800665a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800665c:	b2d2      	uxtb	r2, r2
 800665e:	701a      	strb	r2, [r3, #0]
 8006660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006662:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	62bb      	str	r3, [r7, #40]	; 0x28
 800666c:	e00b      	b.n	8006686 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800666e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006670:	b2da      	uxtb	r2, r3
 8006672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006674:	1c59      	adds	r1, r3, #1
 8006676:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006678:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800667c:	b2d2      	uxtb	r2, r2
 800667e:	701a      	strb	r2, [r3, #0]
 8006680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006682:	09db      	lsrs	r3, r3, #7
 8006684:	62bb      	str	r3, [r7, #40]	; 0x28
 8006686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006688:	2b7f      	cmp	r3, #127	; 0x7f
 800668a:	d8f0      	bhi.n	800666e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800668c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668e:	1c5a      	adds	r2, r3, #1
 8006690:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006692:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006694:	b2d2      	uxtb	r2, r2
 8006696:	701a      	strb	r2, [r3, #0]
 8006698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	627b      	str	r3, [r7, #36]	; 0x24
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	623b      	str	r3, [r7, #32]
 80066a4:	e00b      	b.n	80066be <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80066a6:	6a3b      	ldr	r3, [r7, #32]
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	1c59      	adds	r1, r3, #1
 80066ae:	6279      	str	r1, [r7, #36]	; 0x24
 80066b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066b4:	b2d2      	uxtb	r2, r2
 80066b6:	701a      	strb	r2, [r3, #0]
 80066b8:	6a3b      	ldr	r3, [r7, #32]
 80066ba:	09db      	lsrs	r3, r3, #7
 80066bc:	623b      	str	r3, [r7, #32]
 80066be:	6a3b      	ldr	r3, [r7, #32]
 80066c0:	2b7f      	cmp	r3, #127	; 0x7f
 80066c2:	d8f0      	bhi.n	80066a6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80066c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c6:	1c5a      	adds	r2, r3, #1
 80066c8:	627a      	str	r2, [r7, #36]	; 0x24
 80066ca:	6a3a      	ldr	r2, [r7, #32]
 80066cc:	b2d2      	uxtb	r2, r2
 80066ce:	701a      	strb	r2, [r3, #0]
 80066d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	6979      	ldr	r1, [r7, #20]
 80066d8:	69b8      	ldr	r0, [r7, #24]
 80066da:	f7ff fce3 	bl	80060a4 <_SendPacket>
  RECORD_END();
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	f383 8811 	msr	BASEPRI, r3
}
 80066e4:	bf00      	nop
 80066e6:	3738      	adds	r7, #56	; 0x38
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	200353f8 	.word	0x200353f8

080066f0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b090      	sub	sp, #64	; 0x40
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
 80066fc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80066fe:	f3ef 8311 	mrs	r3, BASEPRI
 8006702:	f04f 0120 	mov.w	r1, #32
 8006706:	f381 8811 	msr	BASEPRI, r1
 800670a:	61fb      	str	r3, [r7, #28]
 800670c:	4840      	ldr	r0, [pc, #256]	; (8006810 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800670e:	f7ff fbde 	bl	8005ece <_PreparePacket>
 8006712:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006720:	e00b      	b.n	800673a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006724:	b2da      	uxtb	r2, r3
 8006726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006728:	1c59      	adds	r1, r3, #1
 800672a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800672c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006730:	b2d2      	uxtb	r2, r2
 8006732:	701a      	strb	r2, [r3, #0]
 8006734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006736:	09db      	lsrs	r3, r3, #7
 8006738:	63bb      	str	r3, [r7, #56]	; 0x38
 800673a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673c:	2b7f      	cmp	r3, #127	; 0x7f
 800673e:	d8f0      	bhi.n	8006722 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006742:	1c5a      	adds	r2, r3, #1
 8006744:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006746:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006748:	b2d2      	uxtb	r2, r2
 800674a:	701a      	strb	r2, [r3, #0]
 800674c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800674e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	637b      	str	r3, [r7, #52]	; 0x34
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	633b      	str	r3, [r7, #48]	; 0x30
 8006758:	e00b      	b.n	8006772 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800675a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675c:	b2da      	uxtb	r2, r3
 800675e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006760:	1c59      	adds	r1, r3, #1
 8006762:	6379      	str	r1, [r7, #52]	; 0x34
 8006764:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006768:	b2d2      	uxtb	r2, r2
 800676a:	701a      	strb	r2, [r3, #0]
 800676c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676e:	09db      	lsrs	r3, r3, #7
 8006770:	633b      	str	r3, [r7, #48]	; 0x30
 8006772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006774:	2b7f      	cmp	r3, #127	; 0x7f
 8006776:	d8f0      	bhi.n	800675a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	637a      	str	r2, [r7, #52]	; 0x34
 800677e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006780:	b2d2      	uxtb	r2, r2
 8006782:	701a      	strb	r2, [r3, #0]
 8006784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006786:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006790:	e00b      	b.n	80067aa <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006794:	b2da      	uxtb	r2, r3
 8006796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006798:	1c59      	adds	r1, r3, #1
 800679a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800679c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067a0:	b2d2      	uxtb	r2, r2
 80067a2:	701a      	strb	r2, [r3, #0]
 80067a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a6:	09db      	lsrs	r3, r3, #7
 80067a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80067aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ac:	2b7f      	cmp	r3, #127	; 0x7f
 80067ae:	d8f0      	bhi.n	8006792 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80067b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b2:	1c5a      	adds	r2, r3, #1
 80067b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067b8:	b2d2      	uxtb	r2, r2
 80067ba:	701a      	strb	r2, [r3, #0]
 80067bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	627b      	str	r3, [r7, #36]	; 0x24
 80067c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067c6:	623b      	str	r3, [r7, #32]
 80067c8:	e00b      	b.n	80067e2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	b2da      	uxtb	r2, r3
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	1c59      	adds	r1, r3, #1
 80067d2:	6279      	str	r1, [r7, #36]	; 0x24
 80067d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067d8:	b2d2      	uxtb	r2, r2
 80067da:	701a      	strb	r2, [r3, #0]
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	09db      	lsrs	r3, r3, #7
 80067e0:	623b      	str	r3, [r7, #32]
 80067e2:	6a3b      	ldr	r3, [r7, #32]
 80067e4:	2b7f      	cmp	r3, #127	; 0x7f
 80067e6:	d8f0      	bhi.n	80067ca <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80067e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ea:	1c5a      	adds	r2, r3, #1
 80067ec:	627a      	str	r2, [r7, #36]	; 0x24
 80067ee:	6a3a      	ldr	r2, [r7, #32]
 80067f0:	b2d2      	uxtb	r2, r2
 80067f2:	701a      	strb	r2, [r3, #0]
 80067f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	6979      	ldr	r1, [r7, #20]
 80067fc:	69b8      	ldr	r0, [r7, #24]
 80067fe:	f7ff fc51 	bl	80060a4 <_SendPacket>
  RECORD_END();
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	f383 8811 	msr	BASEPRI, r3
}
 8006808:	bf00      	nop
 800680a:	3740      	adds	r7, #64	; 0x40
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	200353f8 	.word	0x200353f8

08006814 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006814:	b580      	push	{r7, lr}
 8006816:	b08c      	sub	sp, #48	; 0x30
 8006818:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800681a:	4b58      	ldr	r3, [pc, #352]	; (800697c <SEGGER_SYSVIEW_Start+0x168>)
 800681c:	2201      	movs	r2, #1
 800681e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006820:	f3ef 8311 	mrs	r3, BASEPRI
 8006824:	f04f 0120 	mov.w	r1, #32
 8006828:	f381 8811 	msr	BASEPRI, r1
 800682c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800682e:	4b53      	ldr	r3, [pc, #332]	; (800697c <SEGGER_SYSVIEW_Start+0x168>)
 8006830:	785b      	ldrb	r3, [r3, #1]
 8006832:	220a      	movs	r2, #10
 8006834:	4952      	ldr	r1, [pc, #328]	; (8006980 <SEGGER_SYSVIEW_Start+0x16c>)
 8006836:	4618      	mov	r0, r3
 8006838:	f7f9 fcea 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006842:	200a      	movs	r0, #10
 8006844:	f7ff fe2a 	bl	800649c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006848:	f3ef 8311 	mrs	r3, BASEPRI
 800684c:	f04f 0120 	mov.w	r1, #32
 8006850:	f381 8811 	msr	BASEPRI, r1
 8006854:	60bb      	str	r3, [r7, #8]
 8006856:	484b      	ldr	r0, [pc, #300]	; (8006984 <SEGGER_SYSVIEW_Start+0x170>)
 8006858:	f7ff fb39 	bl	8005ece <_PreparePacket>
 800685c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006866:	4b45      	ldr	r3, [pc, #276]	; (800697c <SEGGER_SYSVIEW_Start+0x168>)
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	62bb      	str	r3, [r7, #40]	; 0x28
 800686c:	e00b      	b.n	8006886 <SEGGER_SYSVIEW_Start+0x72>
 800686e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006870:	b2da      	uxtb	r2, r3
 8006872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006874:	1c59      	adds	r1, r3, #1
 8006876:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006878:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800687c:	b2d2      	uxtb	r2, r2
 800687e:	701a      	strb	r2, [r3, #0]
 8006880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006882:	09db      	lsrs	r3, r3, #7
 8006884:	62bb      	str	r3, [r7, #40]	; 0x28
 8006886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006888:	2b7f      	cmp	r3, #127	; 0x7f
 800688a:	d8f0      	bhi.n	800686e <SEGGER_SYSVIEW_Start+0x5a>
 800688c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688e:	1c5a      	adds	r2, r3, #1
 8006890:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006892:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006894:	b2d2      	uxtb	r2, r2
 8006896:	701a      	strb	r2, [r3, #0]
 8006898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	627b      	str	r3, [r7, #36]	; 0x24
 80068a0:	4b36      	ldr	r3, [pc, #216]	; (800697c <SEGGER_SYSVIEW_Start+0x168>)
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	623b      	str	r3, [r7, #32]
 80068a6:	e00b      	b.n	80068c0 <SEGGER_SYSVIEW_Start+0xac>
 80068a8:	6a3b      	ldr	r3, [r7, #32]
 80068aa:	b2da      	uxtb	r2, r3
 80068ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ae:	1c59      	adds	r1, r3, #1
 80068b0:	6279      	str	r1, [r7, #36]	; 0x24
 80068b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068b6:	b2d2      	uxtb	r2, r2
 80068b8:	701a      	strb	r2, [r3, #0]
 80068ba:	6a3b      	ldr	r3, [r7, #32]
 80068bc:	09db      	lsrs	r3, r3, #7
 80068be:	623b      	str	r3, [r7, #32]
 80068c0:	6a3b      	ldr	r3, [r7, #32]
 80068c2:	2b7f      	cmp	r3, #127	; 0x7f
 80068c4:	d8f0      	bhi.n	80068a8 <SEGGER_SYSVIEW_Start+0x94>
 80068c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c8:	1c5a      	adds	r2, r3, #1
 80068ca:	627a      	str	r2, [r7, #36]	; 0x24
 80068cc:	6a3a      	ldr	r2, [r7, #32]
 80068ce:	b2d2      	uxtb	r2, r2
 80068d0:	701a      	strb	r2, [r3, #0]
 80068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	61fb      	str	r3, [r7, #28]
 80068da:	4b28      	ldr	r3, [pc, #160]	; (800697c <SEGGER_SYSVIEW_Start+0x168>)
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	61bb      	str	r3, [r7, #24]
 80068e0:	e00b      	b.n	80068fa <SEGGER_SYSVIEW_Start+0xe6>
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	b2da      	uxtb	r2, r3
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	1c59      	adds	r1, r3, #1
 80068ea:	61f9      	str	r1, [r7, #28]
 80068ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068f0:	b2d2      	uxtb	r2, r2
 80068f2:	701a      	strb	r2, [r3, #0]
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	09db      	lsrs	r3, r3, #7
 80068f8:	61bb      	str	r3, [r7, #24]
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	2b7f      	cmp	r3, #127	; 0x7f
 80068fe:	d8f0      	bhi.n	80068e2 <SEGGER_SYSVIEW_Start+0xce>
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	1c5a      	adds	r2, r3, #1
 8006904:	61fa      	str	r2, [r7, #28]
 8006906:	69ba      	ldr	r2, [r7, #24]
 8006908:	b2d2      	uxtb	r2, r2
 800690a:	701a      	strb	r2, [r3, #0]
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	617b      	str	r3, [r7, #20]
 8006914:	2300      	movs	r3, #0
 8006916:	613b      	str	r3, [r7, #16]
 8006918:	e00b      	b.n	8006932 <SEGGER_SYSVIEW_Start+0x11e>
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	b2da      	uxtb	r2, r3
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	1c59      	adds	r1, r3, #1
 8006922:	6179      	str	r1, [r7, #20]
 8006924:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006928:	b2d2      	uxtb	r2, r2
 800692a:	701a      	strb	r2, [r3, #0]
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	09db      	lsrs	r3, r3, #7
 8006930:	613b      	str	r3, [r7, #16]
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	2b7f      	cmp	r3, #127	; 0x7f
 8006936:	d8f0      	bhi.n	800691a <SEGGER_SYSVIEW_Start+0x106>
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	1c5a      	adds	r2, r3, #1
 800693c:	617a      	str	r2, [r7, #20]
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	b2d2      	uxtb	r2, r2
 8006942:	701a      	strb	r2, [r3, #0]
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006948:	2218      	movs	r2, #24
 800694a:	6839      	ldr	r1, [r7, #0]
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f7ff fba9 	bl	80060a4 <_SendPacket>
      RECORD_END();
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006958:	4b08      	ldr	r3, [pc, #32]	; (800697c <SEGGER_SYSVIEW_Start+0x168>)
 800695a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695c:	2b00      	cmp	r3, #0
 800695e:	d002      	beq.n	8006966 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006960:	4b06      	ldr	r3, [pc, #24]	; (800697c <SEGGER_SYSVIEW_Start+0x168>)
 8006962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006964:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006966:	f000 f9eb 	bl	8006d40 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800696a:	f000 f9b1 	bl	8006cd0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800696e:	f000 fc07 	bl	8007180 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006972:	bf00      	nop
 8006974:	3730      	adds	r7, #48	; 0x30
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	200353c8 	.word	0x200353c8
 8006980:	080074ec 	.word	0x080074ec
 8006984:	200353f8 	.word	0x200353f8

08006988 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800698e:	f3ef 8311 	mrs	r3, BASEPRI
 8006992:	f04f 0120 	mov.w	r1, #32
 8006996:	f381 8811 	msr	BASEPRI, r1
 800699a:	607b      	str	r3, [r7, #4]
 800699c:	480b      	ldr	r0, [pc, #44]	; (80069cc <SEGGER_SYSVIEW_Stop+0x44>)
 800699e:	f7ff fa96 	bl	8005ece <_PreparePacket>
 80069a2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80069a4:	4b0a      	ldr	r3, [pc, #40]	; (80069d0 <SEGGER_SYSVIEW_Stop+0x48>)
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d007      	beq.n	80069bc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80069ac:	220b      	movs	r2, #11
 80069ae:	6839      	ldr	r1, [r7, #0]
 80069b0:	6838      	ldr	r0, [r7, #0]
 80069b2:	f7ff fb77 	bl	80060a4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80069b6:	4b06      	ldr	r3, [pc, #24]	; (80069d0 <SEGGER_SYSVIEW_Stop+0x48>)
 80069b8:	2200      	movs	r2, #0
 80069ba:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f383 8811 	msr	BASEPRI, r3
}
 80069c2:	bf00      	nop
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	200353f8 	.word	0x200353f8
 80069d0:	200353c8 	.word	0x200353c8

080069d4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b08c      	sub	sp, #48	; 0x30
 80069d8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80069da:	f3ef 8311 	mrs	r3, BASEPRI
 80069de:	f04f 0120 	mov.w	r1, #32
 80069e2:	f381 8811 	msr	BASEPRI, r1
 80069e6:	60fb      	str	r3, [r7, #12]
 80069e8:	4845      	ldr	r0, [pc, #276]	; (8006b00 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80069ea:	f7ff fa70 	bl	8005ece <_PreparePacket>
 80069ee:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069f8:	4b42      	ldr	r3, [pc, #264]	; (8006b04 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80069fe:	e00b      	b.n	8006a18 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a02:	b2da      	uxtb	r2, r3
 8006a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a06:	1c59      	adds	r1, r3, #1
 8006a08:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006a0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a0e:	b2d2      	uxtb	r2, r2
 8006a10:	701a      	strb	r2, [r3, #0]
 8006a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a14:	09db      	lsrs	r3, r3, #7
 8006a16:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1a:	2b7f      	cmp	r3, #127	; 0x7f
 8006a1c:	d8f0      	bhi.n	8006a00 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a20:	1c5a      	adds	r2, r3, #1
 8006a22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a26:	b2d2      	uxtb	r2, r2
 8006a28:	701a      	strb	r2, [r3, #0]
 8006a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a2c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	627b      	str	r3, [r7, #36]	; 0x24
 8006a32:	4b34      	ldr	r3, [pc, #208]	; (8006b04 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	623b      	str	r3, [r7, #32]
 8006a38:	e00b      	b.n	8006a52 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	1c59      	adds	r1, r3, #1
 8006a42:	6279      	str	r1, [r7, #36]	; 0x24
 8006a44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a48:	b2d2      	uxtb	r2, r2
 8006a4a:	701a      	strb	r2, [r3, #0]
 8006a4c:	6a3b      	ldr	r3, [r7, #32]
 8006a4e:	09db      	lsrs	r3, r3, #7
 8006a50:	623b      	str	r3, [r7, #32]
 8006a52:	6a3b      	ldr	r3, [r7, #32]
 8006a54:	2b7f      	cmp	r3, #127	; 0x7f
 8006a56:	d8f0      	bhi.n	8006a3a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5a:	1c5a      	adds	r2, r3, #1
 8006a5c:	627a      	str	r2, [r7, #36]	; 0x24
 8006a5e:	6a3a      	ldr	r2, [r7, #32]
 8006a60:	b2d2      	uxtb	r2, r2
 8006a62:	701a      	strb	r2, [r3, #0]
 8006a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a66:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	61fb      	str	r3, [r7, #28]
 8006a6c:	4b25      	ldr	r3, [pc, #148]	; (8006b04 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	61bb      	str	r3, [r7, #24]
 8006a72:	e00b      	b.n	8006a8c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	b2da      	uxtb	r2, r3
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	1c59      	adds	r1, r3, #1
 8006a7c:	61f9      	str	r1, [r7, #28]
 8006a7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a82:	b2d2      	uxtb	r2, r2
 8006a84:	701a      	strb	r2, [r3, #0]
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	09db      	lsrs	r3, r3, #7
 8006a8a:	61bb      	str	r3, [r7, #24]
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	2b7f      	cmp	r3, #127	; 0x7f
 8006a90:	d8f0      	bhi.n	8006a74 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	1c5a      	adds	r2, r3, #1
 8006a96:	61fa      	str	r2, [r7, #28]
 8006a98:	69ba      	ldr	r2, [r7, #24]
 8006a9a:	b2d2      	uxtb	r2, r2
 8006a9c:	701a      	strb	r2, [r3, #0]
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	617b      	str	r3, [r7, #20]
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	613b      	str	r3, [r7, #16]
 8006aaa:	e00b      	b.n	8006ac4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	b2da      	uxtb	r2, r3
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	1c59      	adds	r1, r3, #1
 8006ab4:	6179      	str	r1, [r7, #20]
 8006ab6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006aba:	b2d2      	uxtb	r2, r2
 8006abc:	701a      	strb	r2, [r3, #0]
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	09db      	lsrs	r3, r3, #7
 8006ac2:	613b      	str	r3, [r7, #16]
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ac8:	d8f0      	bhi.n	8006aac <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	1c5a      	adds	r2, r3, #1
 8006ace:	617a      	str	r2, [r7, #20]
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	b2d2      	uxtb	r2, r2
 8006ad4:	701a      	strb	r2, [r3, #0]
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006ada:	2218      	movs	r2, #24
 8006adc:	6879      	ldr	r1, [r7, #4]
 8006ade:	68b8      	ldr	r0, [r7, #8]
 8006ae0:	f7ff fae0 	bl	80060a4 <_SendPacket>
  RECORD_END();
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006aea:	4b06      	ldr	r3, [pc, #24]	; (8006b04 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d002      	beq.n	8006af8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006af2:	4b04      	ldr	r3, [pc, #16]	; (8006b04 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af6:	4798      	blx	r3
  }
}
 8006af8:	bf00      	nop
 8006afa:	3730      	adds	r7, #48	; 0x30
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	200353f8 	.word	0x200353f8
 8006b04:	200353c8 	.word	0x200353c8

08006b08 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b092      	sub	sp, #72	; 0x48
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006b10:	f3ef 8311 	mrs	r3, BASEPRI
 8006b14:	f04f 0120 	mov.w	r1, #32
 8006b18:	f381 8811 	msr	BASEPRI, r1
 8006b1c:	617b      	str	r3, [r7, #20]
 8006b1e:	486a      	ldr	r0, [pc, #424]	; (8006cc8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006b20:	f7ff f9d5 	bl	8005ece <_PreparePacket>
 8006b24:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	647b      	str	r3, [r7, #68]	; 0x44
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	4b66      	ldr	r3, [pc, #408]	; (8006ccc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	643b      	str	r3, [r7, #64]	; 0x40
 8006b3a:	e00b      	b.n	8006b54 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b3e:	b2da      	uxtb	r2, r3
 8006b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b42:	1c59      	adds	r1, r3, #1
 8006b44:	6479      	str	r1, [r7, #68]	; 0x44
 8006b46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b4a:	b2d2      	uxtb	r2, r2
 8006b4c:	701a      	strb	r2, [r3, #0]
 8006b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b50:	09db      	lsrs	r3, r3, #7
 8006b52:	643b      	str	r3, [r7, #64]	; 0x40
 8006b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b56:	2b7f      	cmp	r3, #127	; 0x7f
 8006b58:	d8f0      	bhi.n	8006b3c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006b5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b5c:	1c5a      	adds	r2, r3, #1
 8006b5e:	647a      	str	r2, [r7, #68]	; 0x44
 8006b60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b62:	b2d2      	uxtb	r2, r2
 8006b64:	701a      	strb	r2, [r3, #0]
 8006b66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b68:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b74:	e00b      	b.n	8006b8e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b78:	b2da      	uxtb	r2, r3
 8006b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b7c:	1c59      	adds	r1, r3, #1
 8006b7e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006b80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b84:	b2d2      	uxtb	r2, r2
 8006b86:	701a      	strb	r2, [r3, #0]
 8006b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8a:	09db      	lsrs	r3, r3, #7
 8006b8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b90:	2b7f      	cmp	r3, #127	; 0x7f
 8006b92:	d8f0      	bhi.n	8006b76 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b96:	1c5a      	adds	r2, r3, #1
 8006b98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006b9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b9c:	b2d2      	uxtb	r2, r2
 8006b9e:	701a      	strb	r2, [r3, #0]
 8006ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	4619      	mov	r1, r3
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f7ff f941 	bl	8005e34 <_EncodeStr>
 8006bb2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006bb4:	2209      	movs	r2, #9
 8006bb6:	68f9      	ldr	r1, [r7, #12]
 8006bb8:	6938      	ldr	r0, [r7, #16]
 8006bba:	f7ff fa73 	bl	80060a4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	4b40      	ldr	r3, [pc, #256]	; (8006ccc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	633b      	str	r3, [r7, #48]	; 0x30
 8006bd2:	e00b      	b.n	8006bec <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bda:	1c59      	adds	r1, r3, #1
 8006bdc:	6379      	str	r1, [r7, #52]	; 0x34
 8006bde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006be2:	b2d2      	uxtb	r2, r2
 8006be4:	701a      	strb	r2, [r3, #0]
 8006be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be8:	09db      	lsrs	r3, r3, #7
 8006bea:	633b      	str	r3, [r7, #48]	; 0x30
 8006bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bee:	2b7f      	cmp	r3, #127	; 0x7f
 8006bf0:	d8f0      	bhi.n	8006bd4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf4:	1c5a      	adds	r2, r3, #1
 8006bf6:	637a      	str	r2, [r7, #52]	; 0x34
 8006bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bfa:	b2d2      	uxtb	r2, r2
 8006bfc:	701a      	strb	r2, [r3, #0]
 8006bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c00:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c0c:	e00b      	b.n	8006c26 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c14:	1c59      	adds	r1, r3, #1
 8006c16:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006c18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c1c:	b2d2      	uxtb	r2, r2
 8006c1e:	701a      	strb	r2, [r3, #0]
 8006c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c22:	09db      	lsrs	r3, r3, #7
 8006c24:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c28:	2b7f      	cmp	r3, #127	; 0x7f
 8006c2a:	d8f0      	bhi.n	8006c0e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2e:	1c5a      	adds	r2, r3, #1
 8006c30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c34:	b2d2      	uxtb	r2, r2
 8006c36:	701a      	strb	r2, [r3, #0]
 8006c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	623b      	str	r3, [r7, #32]
 8006c46:	e00b      	b.n	8006c60 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006c48:	6a3b      	ldr	r3, [r7, #32]
 8006c4a:	b2da      	uxtb	r2, r3
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	1c59      	adds	r1, r3, #1
 8006c50:	6279      	str	r1, [r7, #36]	; 0x24
 8006c52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c56:	b2d2      	uxtb	r2, r2
 8006c58:	701a      	strb	r2, [r3, #0]
 8006c5a:	6a3b      	ldr	r3, [r7, #32]
 8006c5c:	09db      	lsrs	r3, r3, #7
 8006c5e:	623b      	str	r3, [r7, #32]
 8006c60:	6a3b      	ldr	r3, [r7, #32]
 8006c62:	2b7f      	cmp	r3, #127	; 0x7f
 8006c64:	d8f0      	bhi.n	8006c48 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c68:	1c5a      	adds	r2, r3, #1
 8006c6a:	627a      	str	r2, [r7, #36]	; 0x24
 8006c6c:	6a3a      	ldr	r2, [r7, #32]
 8006c6e:	b2d2      	uxtb	r2, r2
 8006c70:	701a      	strb	r2, [r3, #0]
 8006c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c74:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	61fb      	str	r3, [r7, #28]
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	61bb      	str	r3, [r7, #24]
 8006c7e:	e00b      	b.n	8006c98 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	b2da      	uxtb	r2, r3
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	1c59      	adds	r1, r3, #1
 8006c88:	61f9      	str	r1, [r7, #28]
 8006c8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c8e:	b2d2      	uxtb	r2, r2
 8006c90:	701a      	strb	r2, [r3, #0]
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	09db      	lsrs	r3, r3, #7
 8006c96:	61bb      	str	r3, [r7, #24]
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	2b7f      	cmp	r3, #127	; 0x7f
 8006c9c:	d8f0      	bhi.n	8006c80 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	1c5a      	adds	r2, r3, #1
 8006ca2:	61fa      	str	r2, [r7, #28]
 8006ca4:	69ba      	ldr	r2, [r7, #24]
 8006ca6:	b2d2      	uxtb	r2, r2
 8006ca8:	701a      	strb	r2, [r3, #0]
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006cae:	2215      	movs	r2, #21
 8006cb0:	68f9      	ldr	r1, [r7, #12]
 8006cb2:	6938      	ldr	r0, [r7, #16]
 8006cb4:	f7ff f9f6 	bl	80060a4 <_SendPacket>
  RECORD_END();
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f383 8811 	msr	BASEPRI, r3
}
 8006cbe:	bf00      	nop
 8006cc0:	3748      	adds	r7, #72	; 0x48
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	200353f8 	.word	0x200353f8
 8006ccc:	200353c8 	.word	0x200353c8

08006cd0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006cd4:	4b07      	ldr	r3, [pc, #28]	; (8006cf4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006cd6:	6a1b      	ldr	r3, [r3, #32]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d008      	beq.n	8006cee <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006cdc:	4b05      	ldr	r3, [pc, #20]	; (8006cf4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006cde:	6a1b      	ldr	r3, [r3, #32]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d003      	beq.n	8006cee <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006ce6:	4b03      	ldr	r3, [pc, #12]	; (8006cf4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	4798      	blx	r3
  }
}
 8006cee:	bf00      	nop
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	200353c8 	.word	0x200353c8

08006cf8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b086      	sub	sp, #24
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d00:	f3ef 8311 	mrs	r3, BASEPRI
 8006d04:	f04f 0120 	mov.w	r1, #32
 8006d08:	f381 8811 	msr	BASEPRI, r1
 8006d0c:	617b      	str	r3, [r7, #20]
 8006d0e:	480b      	ldr	r0, [pc, #44]	; (8006d3c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006d10:	f7ff f8dd 	bl	8005ece <_PreparePacket>
 8006d14:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d16:	2280      	movs	r2, #128	; 0x80
 8006d18:	6879      	ldr	r1, [r7, #4]
 8006d1a:	6938      	ldr	r0, [r7, #16]
 8006d1c:	f7ff f88a 	bl	8005e34 <_EncodeStr>
 8006d20:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006d22:	220e      	movs	r2, #14
 8006d24:	68f9      	ldr	r1, [r7, #12]
 8006d26:	6938      	ldr	r0, [r7, #16]
 8006d28:	f7ff f9bc 	bl	80060a4 <_SendPacket>
  RECORD_END();
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	f383 8811 	msr	BASEPRI, r3
}
 8006d32:	bf00      	nop
 8006d34:	3718      	adds	r7, #24
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	200353f8 	.word	0x200353f8

08006d40 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006d40:	b590      	push	{r4, r7, lr}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006d46:	4b14      	ldr	r3, [pc, #80]	; (8006d98 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d019      	beq.n	8006d82 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8006d4e:	4b12      	ldr	r3, [pc, #72]	; (8006d98 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d014      	beq.n	8006d82 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006d58:	4b0f      	ldr	r3, [pc, #60]	; (8006d98 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8006d5a:	6a1b      	ldr	r3, [r3, #32]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4798      	blx	r3
 8006d60:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006d64:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006d66:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006d6a:	f04f 0300 	mov.w	r3, #0
 8006d6e:	f04f 0400 	mov.w	r4, #0
 8006d72:	0013      	movs	r3, r2
 8006d74:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006d76:	461a      	mov	r2, r3
 8006d78:	4601      	mov	r1, r0
 8006d7a:	200d      	movs	r0, #13
 8006d7c:	f7ff fbe8 	bl	8006550 <SEGGER_SYSVIEW_RecordU32x2>
 8006d80:	e005      	b.n	8006d8e <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006d82:	4b06      	ldr	r3, [pc, #24]	; (8006d9c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4619      	mov	r1, r3
 8006d88:	200c      	movs	r0, #12
 8006d8a:	f7ff fba5 	bl	80064d8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006d8e:	bf00      	nop
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd90      	pop	{r4, r7, pc}
 8006d96:	bf00      	nop
 8006d98:	200353c8 	.word	0x200353c8
 8006d9c:	e0001004 	.word	0xe0001004

08006da0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006da6:	f3ef 8311 	mrs	r3, BASEPRI
 8006daa:	f04f 0120 	mov.w	r1, #32
 8006dae:	f381 8811 	msr	BASEPRI, r1
 8006db2:	607b      	str	r3, [r7, #4]
 8006db4:	4807      	ldr	r0, [pc, #28]	; (8006dd4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006db6:	f7ff f88a 	bl	8005ece <_PreparePacket>
 8006dba:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006dbc:	2211      	movs	r2, #17
 8006dbe:	6839      	ldr	r1, [r7, #0]
 8006dc0:	6838      	ldr	r0, [r7, #0]
 8006dc2:	f7ff f96f 	bl	80060a4 <_SendPacket>
  RECORD_END();
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f383 8811 	msr	BASEPRI, r3
}
 8006dcc:	bf00      	nop
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	200353f8 	.word	0x200353f8

08006dd8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b088      	sub	sp, #32
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006de0:	f3ef 8311 	mrs	r3, BASEPRI
 8006de4:	f04f 0120 	mov.w	r1, #32
 8006de8:	f381 8811 	msr	BASEPRI, r1
 8006dec:	617b      	str	r3, [r7, #20]
 8006dee:	4819      	ldr	r0, [pc, #100]	; (8006e54 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006df0:	f7ff f86d 	bl	8005ece <_PreparePacket>
 8006df4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006dfa:	4b17      	ldr	r3, [pc, #92]	; (8006e58 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	61fb      	str	r3, [r7, #28]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	61bb      	str	r3, [r7, #24]
 8006e0c:	e00b      	b.n	8006e26 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	b2da      	uxtb	r2, r3
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	1c59      	adds	r1, r3, #1
 8006e16:	61f9      	str	r1, [r7, #28]
 8006e18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e1c:	b2d2      	uxtb	r2, r2
 8006e1e:	701a      	strb	r2, [r3, #0]
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	09db      	lsrs	r3, r3, #7
 8006e24:	61bb      	str	r3, [r7, #24]
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	2b7f      	cmp	r3, #127	; 0x7f
 8006e2a:	d8f0      	bhi.n	8006e0e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	1c5a      	adds	r2, r3, #1
 8006e30:	61fa      	str	r2, [r7, #28]
 8006e32:	69ba      	ldr	r2, [r7, #24]
 8006e34:	b2d2      	uxtb	r2, r2
 8006e36:	701a      	strb	r2, [r3, #0]
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006e3c:	2208      	movs	r2, #8
 8006e3e:	68f9      	ldr	r1, [r7, #12]
 8006e40:	6938      	ldr	r0, [r7, #16]
 8006e42:	f7ff f92f 	bl	80060a4 <_SendPacket>
  RECORD_END();
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	f383 8811 	msr	BASEPRI, r3
}
 8006e4c:	bf00      	nop
 8006e4e:	3720      	adds	r7, #32
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	200353f8 	.word	0x200353f8
 8006e58:	200353c8 	.word	0x200353c8

08006e5c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b088      	sub	sp, #32
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006e64:	f3ef 8311 	mrs	r3, BASEPRI
 8006e68:	f04f 0120 	mov.w	r1, #32
 8006e6c:	f381 8811 	msr	BASEPRI, r1
 8006e70:	617b      	str	r3, [r7, #20]
 8006e72:	4819      	ldr	r0, [pc, #100]	; (8006ed8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006e74:	f7ff f82b 	bl	8005ece <_PreparePacket>
 8006e78:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006e7e:	4b17      	ldr	r3, [pc, #92]	; (8006edc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	61fb      	str	r3, [r7, #28]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	61bb      	str	r3, [r7, #24]
 8006e90:	e00b      	b.n	8006eaa <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	b2da      	uxtb	r2, r3
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	1c59      	adds	r1, r3, #1
 8006e9a:	61f9      	str	r1, [r7, #28]
 8006e9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ea0:	b2d2      	uxtb	r2, r2
 8006ea2:	701a      	strb	r2, [r3, #0]
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	09db      	lsrs	r3, r3, #7
 8006ea8:	61bb      	str	r3, [r7, #24]
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	2b7f      	cmp	r3, #127	; 0x7f
 8006eae:	d8f0      	bhi.n	8006e92 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	1c5a      	adds	r2, r3, #1
 8006eb4:	61fa      	str	r2, [r7, #28]
 8006eb6:	69ba      	ldr	r2, [r7, #24]
 8006eb8:	b2d2      	uxtb	r2, r2
 8006eba:	701a      	strb	r2, [r3, #0]
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006ec0:	2204      	movs	r2, #4
 8006ec2:	68f9      	ldr	r1, [r7, #12]
 8006ec4:	6938      	ldr	r0, [r7, #16]
 8006ec6:	f7ff f8ed 	bl	80060a4 <_SendPacket>
  RECORD_END();
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f383 8811 	msr	BASEPRI, r3
}
 8006ed0:	bf00      	nop
 8006ed2:	3720      	adds	r7, #32
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	200353f8 	.word	0x200353f8
 8006edc:	200353c8 	.word	0x200353c8

08006ee0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b088      	sub	sp, #32
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ee8:	f3ef 8311 	mrs	r3, BASEPRI
 8006eec:	f04f 0120 	mov.w	r1, #32
 8006ef0:	f381 8811 	msr	BASEPRI, r1
 8006ef4:	617b      	str	r3, [r7, #20]
 8006ef6:	4819      	ldr	r0, [pc, #100]	; (8006f5c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006ef8:	f7fe ffe9 	bl	8005ece <_PreparePacket>
 8006efc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006f02:	4b17      	ldr	r3, [pc, #92]	; (8006f60 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	61fb      	str	r3, [r7, #28]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	61bb      	str	r3, [r7, #24]
 8006f14:	e00b      	b.n	8006f2e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	b2da      	uxtb	r2, r3
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	1c59      	adds	r1, r3, #1
 8006f1e:	61f9      	str	r1, [r7, #28]
 8006f20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f24:	b2d2      	uxtb	r2, r2
 8006f26:	701a      	strb	r2, [r3, #0]
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	09db      	lsrs	r3, r3, #7
 8006f2c:	61bb      	str	r3, [r7, #24]
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	2b7f      	cmp	r3, #127	; 0x7f
 8006f32:	d8f0      	bhi.n	8006f16 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	1c5a      	adds	r2, r3, #1
 8006f38:	61fa      	str	r2, [r7, #28]
 8006f3a:	69ba      	ldr	r2, [r7, #24]
 8006f3c:	b2d2      	uxtb	r2, r2
 8006f3e:	701a      	strb	r2, [r3, #0]
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006f44:	2206      	movs	r2, #6
 8006f46:	68f9      	ldr	r1, [r7, #12]
 8006f48:	6938      	ldr	r0, [r7, #16]
 8006f4a:	f7ff f8ab 	bl	80060a4 <_SendPacket>
  RECORD_END();
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f383 8811 	msr	BASEPRI, r3
}
 8006f54:	bf00      	nop
 8006f56:	3720      	adds	r7, #32
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	200353f8 	.word	0x200353f8
 8006f60:	200353c8 	.word	0x200353c8

08006f64 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b08a      	sub	sp, #40	; 0x28
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006f6e:	f3ef 8311 	mrs	r3, BASEPRI
 8006f72:	f04f 0120 	mov.w	r1, #32
 8006f76:	f381 8811 	msr	BASEPRI, r1
 8006f7a:	617b      	str	r3, [r7, #20]
 8006f7c:	4827      	ldr	r0, [pc, #156]	; (800701c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006f7e:	f7fe ffa6 	bl	8005ece <_PreparePacket>
 8006f82:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006f88:	4b25      	ldr	r3, [pc, #148]	; (8007020 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	627b      	str	r3, [r7, #36]	; 0x24
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	623b      	str	r3, [r7, #32]
 8006f9a:	e00b      	b.n	8006fb4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006f9c:	6a3b      	ldr	r3, [r7, #32]
 8006f9e:	b2da      	uxtb	r2, r3
 8006fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa2:	1c59      	adds	r1, r3, #1
 8006fa4:	6279      	str	r1, [r7, #36]	; 0x24
 8006fa6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006faa:	b2d2      	uxtb	r2, r2
 8006fac:	701a      	strb	r2, [r3, #0]
 8006fae:	6a3b      	ldr	r3, [r7, #32]
 8006fb0:	09db      	lsrs	r3, r3, #7
 8006fb2:	623b      	str	r3, [r7, #32]
 8006fb4:	6a3b      	ldr	r3, [r7, #32]
 8006fb6:	2b7f      	cmp	r3, #127	; 0x7f
 8006fb8:	d8f0      	bhi.n	8006f9c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbc:	1c5a      	adds	r2, r3, #1
 8006fbe:	627a      	str	r2, [r7, #36]	; 0x24
 8006fc0:	6a3a      	ldr	r2, [r7, #32]
 8006fc2:	b2d2      	uxtb	r2, r2
 8006fc4:	701a      	strb	r2, [r3, #0]
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	61fb      	str	r3, [r7, #28]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	61bb      	str	r3, [r7, #24]
 8006fd2:	e00b      	b.n	8006fec <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	b2da      	uxtb	r2, r3
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	1c59      	adds	r1, r3, #1
 8006fdc:	61f9      	str	r1, [r7, #28]
 8006fde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fe2:	b2d2      	uxtb	r2, r2
 8006fe4:	701a      	strb	r2, [r3, #0]
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	09db      	lsrs	r3, r3, #7
 8006fea:	61bb      	str	r3, [r7, #24]
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	2b7f      	cmp	r3, #127	; 0x7f
 8006ff0:	d8f0      	bhi.n	8006fd4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	1c5a      	adds	r2, r3, #1
 8006ff6:	61fa      	str	r2, [r7, #28]
 8006ff8:	69ba      	ldr	r2, [r7, #24]
 8006ffa:	b2d2      	uxtb	r2, r2
 8006ffc:	701a      	strb	r2, [r3, #0]
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8007002:	2207      	movs	r2, #7
 8007004:	68f9      	ldr	r1, [r7, #12]
 8007006:	6938      	ldr	r0, [r7, #16]
 8007008:	f7ff f84c 	bl	80060a4 <_SendPacket>
  RECORD_END();
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	f383 8811 	msr	BASEPRI, r3
}
 8007012:	bf00      	nop
 8007014:	3728      	adds	r7, #40	; 0x28
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	200353f8 	.word	0x200353f8
 8007020:	200353c8 	.word	0x200353c8

08007024 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800702c:	4b04      	ldr	r3, [pc, #16]	; (8007040 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	1ad3      	subs	r3, r2, r3
}
 8007034:	4618      	mov	r0, r3
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr
 8007040:	200353c8 	.word	0x200353c8

08007044 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007044:	b580      	push	{r7, lr}
 8007046:	b08c      	sub	sp, #48	; 0x30
 8007048:	af00      	add	r7, sp, #0
 800704a:	4603      	mov	r3, r0
 800704c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800704e:	4b3b      	ldr	r3, [pc, #236]	; (800713c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d06d      	beq.n	8007132 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8007056:	4b39      	ldr	r3, [pc, #228]	; (800713c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800705c:	2300      	movs	r3, #0
 800705e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007060:	e008      	b.n	8007074 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706a:	2b00      	cmp	r3, #0
 800706c:	d007      	beq.n	800707e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800706e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007070:	3301      	adds	r3, #1
 8007072:	62bb      	str	r3, [r7, #40]	; 0x28
 8007074:	79fb      	ldrb	r3, [r7, #7]
 8007076:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007078:	429a      	cmp	r2, r3
 800707a:	d3f2      	bcc.n	8007062 <SEGGER_SYSVIEW_SendModule+0x1e>
 800707c:	e000      	b.n	8007080 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800707e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007082:	2b00      	cmp	r3, #0
 8007084:	d055      	beq.n	8007132 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007086:	f3ef 8311 	mrs	r3, BASEPRI
 800708a:	f04f 0120 	mov.w	r1, #32
 800708e:	f381 8811 	msr	BASEPRI, r1
 8007092:	617b      	str	r3, [r7, #20]
 8007094:	482a      	ldr	r0, [pc, #168]	; (8007140 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8007096:	f7fe ff1a 	bl	8005ece <_PreparePacket>
 800709a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	627b      	str	r3, [r7, #36]	; 0x24
 80070a4:	79fb      	ldrb	r3, [r7, #7]
 80070a6:	623b      	str	r3, [r7, #32]
 80070a8:	e00b      	b.n	80070c2 <SEGGER_SYSVIEW_SendModule+0x7e>
 80070aa:	6a3b      	ldr	r3, [r7, #32]
 80070ac:	b2da      	uxtb	r2, r3
 80070ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b0:	1c59      	adds	r1, r3, #1
 80070b2:	6279      	str	r1, [r7, #36]	; 0x24
 80070b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070b8:	b2d2      	uxtb	r2, r2
 80070ba:	701a      	strb	r2, [r3, #0]
 80070bc:	6a3b      	ldr	r3, [r7, #32]
 80070be:	09db      	lsrs	r3, r3, #7
 80070c0:	623b      	str	r3, [r7, #32]
 80070c2:	6a3b      	ldr	r3, [r7, #32]
 80070c4:	2b7f      	cmp	r3, #127	; 0x7f
 80070c6:	d8f0      	bhi.n	80070aa <SEGGER_SYSVIEW_SendModule+0x66>
 80070c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ca:	1c5a      	adds	r2, r3, #1
 80070cc:	627a      	str	r2, [r7, #36]	; 0x24
 80070ce:	6a3a      	ldr	r2, [r7, #32]
 80070d0:	b2d2      	uxtb	r2, r2
 80070d2:	701a      	strb	r2, [r3, #0]
 80070d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	61fb      	str	r3, [r7, #28]
 80070dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	61bb      	str	r3, [r7, #24]
 80070e2:	e00b      	b.n	80070fc <SEGGER_SYSVIEW_SendModule+0xb8>
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	1c59      	adds	r1, r3, #1
 80070ec:	61f9      	str	r1, [r7, #28]
 80070ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070f2:	b2d2      	uxtb	r2, r2
 80070f4:	701a      	strb	r2, [r3, #0]
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	09db      	lsrs	r3, r3, #7
 80070fa:	61bb      	str	r3, [r7, #24]
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	2b7f      	cmp	r3, #127	; 0x7f
 8007100:	d8f0      	bhi.n	80070e4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	1c5a      	adds	r2, r3, #1
 8007106:	61fa      	str	r2, [r7, #28]
 8007108:	69ba      	ldr	r2, [r7, #24]
 800710a:	b2d2      	uxtb	r2, r2
 800710c:	701a      	strb	r2, [r3, #0]
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2280      	movs	r2, #128	; 0x80
 8007118:	4619      	mov	r1, r3
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f7fe fe8a 	bl	8005e34 <_EncodeStr>
 8007120:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007122:	2216      	movs	r2, #22
 8007124:	68f9      	ldr	r1, [r7, #12]
 8007126:	6938      	ldr	r0, [r7, #16]
 8007128:	f7fe ffbc 	bl	80060a4 <_SendPacket>
      RECORD_END();
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007132:	bf00      	nop
 8007134:	3730      	adds	r7, #48	; 0x30
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	200353f0 	.word	0x200353f0
 8007140:	200353f8 	.word	0x200353f8

08007144 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800714a:	4b0c      	ldr	r3, [pc, #48]	; (800717c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00f      	beq.n	8007172 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007152:	4b0a      	ldr	r3, [pc, #40]	; (800717c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d002      	beq.n	8007166 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1f2      	bne.n	8007158 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007172:	bf00      	nop
 8007174:	3708      	adds	r7, #8
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	200353f0 	.word	0x200353f0

08007180 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007186:	f3ef 8311 	mrs	r3, BASEPRI
 800718a:	f04f 0120 	mov.w	r1, #32
 800718e:	f381 8811 	msr	BASEPRI, r1
 8007192:	60fb      	str	r3, [r7, #12]
 8007194:	4817      	ldr	r0, [pc, #92]	; (80071f4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007196:	f7fe fe9a 	bl	8005ece <_PreparePacket>
 800719a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	617b      	str	r3, [r7, #20]
 80071a4:	4b14      	ldr	r3, [pc, #80]	; (80071f8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	613b      	str	r3, [r7, #16]
 80071aa:	e00b      	b.n	80071c4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	b2da      	uxtb	r2, r3
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	1c59      	adds	r1, r3, #1
 80071b4:	6179      	str	r1, [r7, #20]
 80071b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071ba:	b2d2      	uxtb	r2, r2
 80071bc:	701a      	strb	r2, [r3, #0]
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	09db      	lsrs	r3, r3, #7
 80071c2:	613b      	str	r3, [r7, #16]
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	2b7f      	cmp	r3, #127	; 0x7f
 80071c8:	d8f0      	bhi.n	80071ac <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	1c5a      	adds	r2, r3, #1
 80071ce:	617a      	str	r2, [r7, #20]
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	b2d2      	uxtb	r2, r2
 80071d4:	701a      	strb	r2, [r3, #0]
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80071da:	221b      	movs	r2, #27
 80071dc:	6879      	ldr	r1, [r7, #4]
 80071de:	68b8      	ldr	r0, [r7, #8]
 80071e0:	f7fe ff60 	bl	80060a4 <_SendPacket>
  RECORD_END();
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f383 8811 	msr	BASEPRI, r3
}
 80071ea:	bf00      	nop
 80071ec:	3718      	adds	r7, #24
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	200353f8 	.word	0x200353f8
 80071f8:	200353f4 	.word	0x200353f4

080071fc <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 80071fc:	b40f      	push	{r0, r1, r2, r3}
 80071fe:	b580      	push	{r7, lr}
 8007200:	b082      	sub	sp, #8
 8007202:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 8007204:	f107 0314 	add.w	r3, r7, #20
 8007208:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800720a:	1d3b      	adds	r3, r7, #4
 800720c:	461a      	mov	r2, r3
 800720e:	2100      	movs	r1, #0
 8007210:	6938      	ldr	r0, [r7, #16]
 8007212:	f7ff f82d 	bl	8006270 <_VPrintHost>
  va_end(ParamList);
#endif
}
 8007216:	bf00      	nop
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007220:	b004      	add	sp, #16
 8007222:	4770      	bx	lr

08007224 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007224:	b580      	push	{r7, lr}
 8007226:	b08a      	sub	sp, #40	; 0x28
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800722c:	f3ef 8311 	mrs	r3, BASEPRI
 8007230:	f04f 0120 	mov.w	r1, #32
 8007234:	f381 8811 	msr	BASEPRI, r1
 8007238:	617b      	str	r3, [r7, #20]
 800723a:	4827      	ldr	r0, [pc, #156]	; (80072d8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800723c:	f7fe fe47 	bl	8005ece <_PreparePacket>
 8007240:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007242:	2280      	movs	r2, #128	; 0x80
 8007244:	6879      	ldr	r1, [r7, #4]
 8007246:	6938      	ldr	r0, [r7, #16]
 8007248:	f7fe fdf4 	bl	8005e34 <_EncodeStr>
 800724c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	627b      	str	r3, [r7, #36]	; 0x24
 8007252:	2301      	movs	r3, #1
 8007254:	623b      	str	r3, [r7, #32]
 8007256:	e00b      	b.n	8007270 <SEGGER_SYSVIEW_Warn+0x4c>
 8007258:	6a3b      	ldr	r3, [r7, #32]
 800725a:	b2da      	uxtb	r2, r3
 800725c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725e:	1c59      	adds	r1, r3, #1
 8007260:	6279      	str	r1, [r7, #36]	; 0x24
 8007262:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007266:	b2d2      	uxtb	r2, r2
 8007268:	701a      	strb	r2, [r3, #0]
 800726a:	6a3b      	ldr	r3, [r7, #32]
 800726c:	09db      	lsrs	r3, r3, #7
 800726e:	623b      	str	r3, [r7, #32]
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	2b7f      	cmp	r3, #127	; 0x7f
 8007274:	d8f0      	bhi.n	8007258 <SEGGER_SYSVIEW_Warn+0x34>
 8007276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007278:	1c5a      	adds	r2, r3, #1
 800727a:	627a      	str	r2, [r7, #36]	; 0x24
 800727c:	6a3a      	ldr	r2, [r7, #32]
 800727e:	b2d2      	uxtb	r2, r2
 8007280:	701a      	strb	r2, [r3, #0]
 8007282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007284:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	61fb      	str	r3, [r7, #28]
 800728a:	2300      	movs	r3, #0
 800728c:	61bb      	str	r3, [r7, #24]
 800728e:	e00b      	b.n	80072a8 <SEGGER_SYSVIEW_Warn+0x84>
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	b2da      	uxtb	r2, r3
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	1c59      	adds	r1, r3, #1
 8007298:	61f9      	str	r1, [r7, #28]
 800729a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800729e:	b2d2      	uxtb	r2, r2
 80072a0:	701a      	strb	r2, [r3, #0]
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	09db      	lsrs	r3, r3, #7
 80072a6:	61bb      	str	r3, [r7, #24]
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	2b7f      	cmp	r3, #127	; 0x7f
 80072ac:	d8f0      	bhi.n	8007290 <SEGGER_SYSVIEW_Warn+0x6c>
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	1c5a      	adds	r2, r3, #1
 80072b2:	61fa      	str	r2, [r7, #28]
 80072b4:	69ba      	ldr	r2, [r7, #24]
 80072b6:	b2d2      	uxtb	r2, r2
 80072b8:	701a      	strb	r2, [r3, #0]
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80072be:	221a      	movs	r2, #26
 80072c0:	68f9      	ldr	r1, [r7, #12]
 80072c2:	6938      	ldr	r0, [r7, #16]
 80072c4:	f7fe feee 	bl	80060a4 <_SendPacket>
  RECORD_END();
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	f383 8811 	msr	BASEPRI, r3
}
 80072ce:	bf00      	nop
 80072d0:	3728      	adds	r7, #40	; 0x28
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	200353f8 	.word	0x200353f8

080072dc <__libc_init_array>:
 80072dc:	b570      	push	{r4, r5, r6, lr}
 80072de:	4e0d      	ldr	r6, [pc, #52]	; (8007314 <__libc_init_array+0x38>)
 80072e0:	4c0d      	ldr	r4, [pc, #52]	; (8007318 <__libc_init_array+0x3c>)
 80072e2:	1ba4      	subs	r4, r4, r6
 80072e4:	10a4      	asrs	r4, r4, #2
 80072e6:	2500      	movs	r5, #0
 80072e8:	42a5      	cmp	r5, r4
 80072ea:	d109      	bne.n	8007300 <__libc_init_array+0x24>
 80072ec:	4e0b      	ldr	r6, [pc, #44]	; (800731c <__libc_init_array+0x40>)
 80072ee:	4c0c      	ldr	r4, [pc, #48]	; (8007320 <__libc_init_array+0x44>)
 80072f0:	f000 f83a 	bl	8007368 <_init>
 80072f4:	1ba4      	subs	r4, r4, r6
 80072f6:	10a4      	asrs	r4, r4, #2
 80072f8:	2500      	movs	r5, #0
 80072fa:	42a5      	cmp	r5, r4
 80072fc:	d105      	bne.n	800730a <__libc_init_array+0x2e>
 80072fe:	bd70      	pop	{r4, r5, r6, pc}
 8007300:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007304:	4798      	blx	r3
 8007306:	3501      	adds	r5, #1
 8007308:	e7ee      	b.n	80072e8 <__libc_init_array+0xc>
 800730a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800730e:	4798      	blx	r3
 8007310:	3501      	adds	r5, #1
 8007312:	e7f2      	b.n	80072fa <__libc_init_array+0x1e>
 8007314:	08007500 	.word	0x08007500
 8007318:	08007500 	.word	0x08007500
 800731c:	08007500 	.word	0x08007500
 8007320:	08007504 	.word	0x08007504

08007324 <memcmp>:
 8007324:	b530      	push	{r4, r5, lr}
 8007326:	2400      	movs	r4, #0
 8007328:	42a2      	cmp	r2, r4
 800732a:	d101      	bne.n	8007330 <memcmp+0xc>
 800732c:	2000      	movs	r0, #0
 800732e:	e007      	b.n	8007340 <memcmp+0x1c>
 8007330:	5d03      	ldrb	r3, [r0, r4]
 8007332:	3401      	adds	r4, #1
 8007334:	190d      	adds	r5, r1, r4
 8007336:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800733a:	42ab      	cmp	r3, r5
 800733c:	d0f4      	beq.n	8007328 <memcmp+0x4>
 800733e:	1b58      	subs	r0, r3, r5
 8007340:	bd30      	pop	{r4, r5, pc}

08007342 <memcpy>:
 8007342:	b510      	push	{r4, lr}
 8007344:	1e43      	subs	r3, r0, #1
 8007346:	440a      	add	r2, r1
 8007348:	4291      	cmp	r1, r2
 800734a:	d100      	bne.n	800734e <memcpy+0xc>
 800734c:	bd10      	pop	{r4, pc}
 800734e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007352:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007356:	e7f7      	b.n	8007348 <memcpy+0x6>

08007358 <memset>:
 8007358:	4402      	add	r2, r0
 800735a:	4603      	mov	r3, r0
 800735c:	4293      	cmp	r3, r2
 800735e:	d100      	bne.n	8007362 <memset+0xa>
 8007360:	4770      	bx	lr
 8007362:	f803 1b01 	strb.w	r1, [r3], #1
 8007366:	e7f9      	b.n	800735c <memset+0x4>

08007368 <_init>:
 8007368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800736a:	bf00      	nop
 800736c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800736e:	bc08      	pop	{r3}
 8007370:	469e      	mov	lr, r3
 8007372:	4770      	bx	lr

08007374 <_fini>:
 8007374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007376:	bf00      	nop
 8007378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800737a:	bc08      	pop	{r3}
 800737c:	469e      	mov	lr, r3
 800737e:	4770      	bx	lr
